{"version":3,"sources":["src/core/Keyboard/index.js","src/core/Mouse/index.js","src/core/AppContext/index.js","src/core/GameObject/index.js","node_modules/gl-matrix/esm/common.js","node_modules/gl-matrix/esm/mat2.js","node_modules/gl-matrix/esm/mat2d.js","node_modules/gl-matrix/esm/mat3.js","node_modules/gl-matrix/esm/mat4.js","node_modules/gl-matrix/esm/vec3.js","node_modules/gl-matrix/esm/vec4.js","node_modules/gl-matrix/esm/quat.js","node_modules/gl-matrix/esm/quat2.js","node_modules/gl-matrix/esm/vec2.js","node_modules/gl-matrix/esm/index.js","src/models/Model/index.js","src/models/primitives/Cylinder/index.js","src/core/shaders/VertexShader/index.js","src/core/shaders/FragmentShader/index.js","src/gameObjects/Coin/index.js","src/core/Scene/index.js","src/core/Camera/index.js","src/core/Texture/index.js","src/core/ControlScript/index.js","src/interpolators/Interpolator/index.js","src/interpolators/SerialInterpolatorSet/index.js","src/interpolators/ParallelInterpolatorSet/index.js","src/scripts/ControlCoin/animations.js","src/scripts/ControlCoin/index.js","src/models/Table/index.js","src/gameObjects/Table/index.js","src/UI/components/ResultMessage/index.js","src/UI/components/ClickPrompt/index.js","src/UI/components/ControlInfo/index.js","src/UI/components/GameLoader/index.js","src/UI/index.js","src/scripts/ControlCamera/index.js","src/index.js"],"names":["Keyboard","constructor","__keysMap","__reset","bind","__onKeyUp","__onKeyDown","window","addEventListener","e","key","isKeyPressed","destroy","removeEventListener","__resetKeys","_default","exports","default","BUTTONS","Mouse","__onMouseDown","__onMouseUp","__onMouseMove","__onWheel","isButtonPressed","button","__buttonsMap","getPosition","x","__x","y","__y","getMovement","__dx","__dy","getScroll","__dWheelX","__dWheelY","z","__dWheelZ","unit","__wheelUnit","isDragging","__dragging","clientX","clientY","movementX","movementY","deltaX","deltaY","deltaZ","deltaMode","update","_Keyboard","_interopRequireDefault","require","_Mouse","__esModule","DEFAULT_INPUT_OPTIONS","keyboard","mouse","AppContext","canvas","options","arguments","length","undefined","gl","getContext","console","warn","alert","Error","__state","__drawDoneTime","__deltaTime","__setupInputs","input","inputOptions","__input","notifyUpdating","performance","now","notifyUpdateDone","notifyDrawing","notifyDrawDone","createVertexShader","source","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createFragmentShader","fragmentShader","FRAGMENT_SHADER","GameObject","context","position","scale","rotation","__controlScripts","addControlScript","name","script","getControlScript","setScene","scene","_setModel","model","__model","draw","mView","mProj","prepareDraw","Object","keys","forEach","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","setMatrixArrayType","type","degree","PI","toRadian","a","equals","b","abs","max","hypot","i","sqrt","glMatrix","_interopRequireWildcard","_getRequireWildcardCache","WeakMap","r","t","has","get","n","__proto__","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","set","create","out","clone","copy","identity","fromValues","m00","m01","m10","m11","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","rotate","rad","s","sin","c","cos","v","v0","v1","fromRotation","fromScaling","str","frob","LDU","L","D","U","add","subtract","exactEquals","multiplyScalar","multiplyScalarAndAdd","mul","sub","d","tx","ty","aa","ab","ac","ad","atx","aty","a4","a5","b4","b5","translate","fromTranslation","fromMat4","m02","m12","m20","m21","m22","a01","a02","a12","a00","a10","a11","a20","a21","a22","b01","b11","b21","b00","b02","b10","b12","b20","b22","fromMat2d","fromQuat","q","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","a6","a7","a8","b6","b7","b8","m03","m13","m23","m30","m31","m32","m33","axis","len","rotateX","rotateY","rotateZ","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspectiveNO","fovy","aspect","f","tan","Infinity","perspective","perspectiveZO","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","orthoNO","lr","bt","ortho","orthoZO","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","a9","a14","a15","b9","b13","b14","b15","divide","ceil","floor","min","round","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","m","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","p","angle","mag","cosine","acos","zero","div","dist","sqrDist","sqrLen","vec","stride","offset","count","fn","arg","l","A","B","C","E","F","G","H","I","J","v2","v3","v4","s1","s2","ix","iy","iz","iw","mat3","vec3","vec4","setAxisAngle","getAxisAngle","out_axis","getAngle","dotproduct","calculateW","exp","et","ln","atan2","log","pow","slerp","omega","cosom","sinom","scale0","scale1","u1","u2","u3","sqrt1MinusU1","sqrtU1","invDot","conjugate","fromMat3","fRoot","fTrace","j","k","fromEuler","halfToRad","cx","cy","cz","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","view","quat","mat4","dq","w1","fromRotationTranslationValues","outer","getReal","getDual","setReal","setDual","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","mt","sqlen","a_dot_b","transformMat2","transformMat2d","p0","p1","sinC","cosC","mat2","mat2d","quat2","vec2","_glMatrix","Model","initialize","program","createProgram","attachShader","location","__linkAndValidate","__attribLocations","mWorld","getUniformLocation","_createBuffer","data","bufferObject","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","_createElementBuffer","ELEMENT_ARRAY_BUFFER","Uint16Array","useProgram","rotationQuat","mRotate","mScale","mTranslate","uniformMatrix4fv","FALSE","deleteProgram","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","validateProgram","VALIDATE_STATUS","_Model","Cylinder","attribLocations","vertPosition","getAttribLocation","texCoord","initializeProperties","radius","slices","setTexture","texture","generateVertices","halfLength","step","buffer","push","bodyLength","topStart","topLength","bottomStart","bottomSlices","bodyStart","bottomLength","vertexAttribPointer","FLOAT","BYTES_PER_ELEMENT","enableVertexAttribArray","bindTexture","TEXTURE_2D","activeTexture","TEXTURE0","drawArrays","TRIANGLE_STRIP","TRIANGLE_FAN","VertexShader","src","__compile","FragmentShader","_GameObject","_Cylinder","_VertexShader","_FragmentShader","_shader","_shader2","Coin","thickness","detail","vertexShaderSrc","fragmentShaderSrc","textureImage","Scene","__clearColor","__gameObjects","enable","DEPTH_TEST","CULL_FACE","frontFace","CCW","cullFace","BACK","__drawGameObject","__updateGameObject","setClearColor","clearColor","addGameObject","gameObject","__sceneIndex","removeGameObject","index","splice","setCamera","camera","__camera","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","viewMat","projMat","Camera","__viewMatrix","__projection","__fov","__focus","__lookAtPosition","__ratio","setPosition","_ref","setAspectRatio","ratio","stopLookAt","setFieldOfView","setFocus","from","Texture","setImage","image","channels","tile","__tile","__channels","__prepare","loadImage","url","Promise","resolve","reject","document","createElement","onload","__location","RGBA","RGB","createTexture","wrap","REPEAT","CLAMP_TO_EDGE","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","texImage2D","UNSIGNED_BYTE","ControlScript","Interpolator","to","duration","easingFn","EASING","__from","isArray","__to","__duration","__remaining","__easingFn","__done","reverse","reset","deltaTime","elapsed","map","val","IN","QUAD","CUBIC","QUART","QUINT","SINE","EXPO","CIRC","ELASTIC","asin","OUT","IN_OUT","SerialInterpolatorSet","interpolators","__items","__currentIdx","item","done","currentItem","ParallelInterpolatorSet","allDone","vals","_Interpolator","_SerialInterpolatorSet","_ParallelInterpolatorSet","flipAnimation","endAngle","startY","midY","endY","jump","slowJump","stall","jumpAnim","slowFlip","flip","endFlip","flipAnim","_ControlScript","_animations","ControlCoin","__flipping","__flipAnimation","__flipResult","__onFlipEnd","onFlipStart","callback","__onFlipStart","onFlipEnd","startFlipping","heads","tails","pos","rot","Table","breadth","legHeight","legWidth","legBreadth","legBreadh","generateLegVertices","halfBaseHeight","halfBaseWidth","halfBaseBreadth","indexOffset","halfHeight","halfWidth","halfBreadth","leg1","generateOneLegVertices","leg2","leg3","leg4","vertices","indices","legNumber","tz","numVertices","idx","baseHeight","baseWidth","baseBreadth","legData","drawElements","TRIANGLES","UNSIGNED_SHORT","_Table","TableModel","template","innerHTML","ResultMessage","HTMLElement","_shadowRoot","attachShadow","mode","appendChild","content","cloneNode","$root","querySelector","$result","connectedCallback","_render","attributeChangedCallback","oldValue","newValue","_result","getAttribute","value","setAttribute","innerText","resultText","classList","remove","customElements","define","ClickPrompt","arrowSvg","mouseSvg","ControlInfo","GameLoader","UI","__initialize","__sizeOverlay","resetResultMessage","overlay","id","body","__overlay","style","innerWidth","innerHeight","showHUD","message","clickPrompt","__message","__clickPrompt","showControlInfo","showClickPrompt","result","displayResultMessage","__messageTimeout","clearTimeout","setTimeout","controlInfo","showLoader","loader","ControlCamera","startRadius","startAngleHorz","__center","__radius","__angleHorz","scroll","delta","_AppContext","_Coin","_Scene","_Camera","_Texture","_ControlCoin","_UI","_ControlCamera","main","setupContext","ui","loadResources","then","resources","prepareGame","gameLoop","getElementById","tableTexture","coinTexture","all","table","coin","loadTextures","textures","setupScene","createCoin","createTable","loop","requestAnimationFrame","flipScript"],"mappings":";AAkCuB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAlCvB,MAAMA,EACJC,cACE,KAAKC,UAAY,GACjB,KAAKC,QAAU,KAAKA,QAAQC,KAAK,MACjC,KAAKC,UAAY,KAAKA,UAAUD,KAAK,MACrC,KAAKE,YAAc,KAAKA,YAAYF,KAAK,MACzCG,OAAOC,iBAAiB,OAAQ,KAAKL,SACrCI,OAAOC,iBAAiB,UAAW,KAAKF,aACxCC,OAAOC,iBAAiB,QAAS,KAAKH,WAGxCC,YAAaG,GACX,KAAKP,UAAUO,EAAEC,MAAO,EAG1BL,UAAWI,GACT,KAAKP,UAAUO,EAAEC,MAAO,EAG1BP,UACE,KAAKD,UAAY,GAGnBS,aAAcD,GACZ,OAAO,KAAKR,UAAUQ,KAAQ,EAGhCE,UACEL,OAAOM,oBAAoB,OAAQ,KAAKC,aACxCP,OAAOM,oBAAoB,UAAW,KAAKP,aAC3CC,OAAOM,oBAAoB,QAAS,KAAKR,YAE5C,IAAAU,EAAAC,QAAAC,QAEcjB;;ACoEK,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAtGpB,MAAMkB,EAAU,CAAC,OAAQ,QAAS,QAAS,OAAQ,WAEnD,MAAMC,EACJlB,cACE,KAAKmB,cAAgB,KAAKA,cAAchB,KAAK,MAC7C,KAAKiB,YAAc,KAAKA,YAAYjB,KAAK,MACzC,KAAKkB,cAAgB,KAAKA,cAAclB,KAAK,MAC7C,KAAKmB,UAAY,KAAKA,UAAUnB,KAAK,MACrC,KAAKD,QAAU,KAAKA,QAAQC,KAAK,MAEjC,KAAKD,UAELI,OAAOC,iBAAiB,YAAa,KAAKY,eAC1Cb,OAAOC,iBAAiB,UAAW,KAAKa,aACxCd,OAAOC,iBAAiB,YAAa,KAAKc,eAC1Cf,OAAOC,iBAAiB,QAAS,KAAKe,WACtChB,OAAOC,iBAAiB,OAAQ,KAAKL,SAGvCqB,gBAAiBC,GACf,OAAO,KAAKC,aAAaD,KAAW,EAGtCE,cACE,MAAO,CAAEC,EAAG,KAAKC,IAAKC,EAAG,KAAKC,KAGhCC,cACE,MAAO,CACLJ,EAAG,KAAKK,KACRH,EAAG,KAAKI,MAIZC,YACE,MAAO,CACLP,EAAG,KAAKQ,UACRN,EAAG,KAAKO,UACRC,EAAG,KAAKC,UACRC,KAAM,KAAKC,aAIfC,aACE,OAAO,KAAKC,WAGdvB,cAAeX,GACb,KAAKiB,aAAe,CAAE,CAACR,EAAQT,EAAEgB,UAAU,GAC3C,KAAKH,cAAcb,GAGrBY,YAAaZ,GACX,KAAKiB,aAAe,CAAE,CAACR,EAAQT,EAAEgB,UAAU,GAC3C,KAAKH,cAAcb,GAGrBa,cAAeb,GACb,KAAKoB,IAAMpB,EAAEmC,QACb,KAAKb,IAAMtB,EAAEoC,QACb,KAAKZ,KAAOxB,EAAEqC,UACd,KAAKZ,KAAOzB,EAAEsC,UACd,KAAKJ,WAAa,KAAKjB,aAAmB,OAAK,EAGjDH,UAAWd,GACT,KAAK2B,UAAY3B,EAAEuC,OACnB,KAAKX,UAAY5B,EAAEwC,OACnB,KAAKV,UAAY9B,EAAEyC,OACnB,KAAKT,YAAchC,EAAE0C,UAGvBC,SACE,KAAKnB,KAAO,EACZ,KAAKC,KAAO,EACZ,KAAKE,UAAY,EACjB,KAAKC,UAAY,EACjB,KAAKE,UAAY,EACjB,KAAKE,YAAc,EAGrBtC,UACE,KAAK0B,IAAM,EACX,KAAKE,IAAM,EACX,KAAKE,KAAO,EACZ,KAAKC,KAAO,EACZ,KAAKE,UAAY,EACjB,KAAKC,UAAY,EACjB,KAAKE,UAAY,EACjB,KAAKE,YAAc,EACnB,KAAKE,YAAa,EAClB,KAAKjB,aAAe,GAGtBd,UACEL,OAAOM,oBAAoB,YAAa,KAAKO,eAC7Cb,OAAOM,oBAAoB,UAAW,KAAKQ,aAC3Cd,OAAOM,oBAAoB,YAAa,KAAKS,eAC7Cf,OAAOM,oBAAoB,OAAQ,KAAKV,UAE3C,IAAAY,EAAAC,QAAAC,QAEcE;;ACfU,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAvFzB,IAAAkC,EAAAC,EAAAC,QAAA,gBACAC,EAAAF,EAAAC,QAAA,aAA4B,SAAAD,EAAA7C,GAAAA,OAAAA,GAAAA,EAAAgD,WAAAhD,EAAAQ,CAAAA,QAAAR,GAE5B,MAAMiD,EAAwB,CAAEC,UAAU,EAAMC,OAAO,GAEvD,MAAMC,EACJ5D,YAAa6D,GAAsB,IAAdC,EAAOC,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,GAAAF,UAAG,GAAA,GAC7B,KAAKF,OAASA,EACd,IAAIK,EAAKL,EAAOM,WAAW,SAK3B,GAJKD,IACHE,QAAQC,KAAK,yDACbH,EAAKL,EAAOM,WAAW,wBAEpBD,EAEH,MADA5D,OAAOgE,MAAM,oDACP,IAAIC,MAAM,oDAElB,KAAKL,GAAKA,EACV,KAAKM,QAAU,eACf,KAAKC,eAAiB,EACtB,KAAKC,YAAc,EACnB,KAAKC,cAAc,IAAKb,EAAQc,SAAUnB,IAG5CkB,cAAeE,GACb,KAAKC,QAAU,CACbpB,SAAUmB,EAAanB,SAAW,IAAI3D,EAAQ,aAAKkE,EACnDN,MAAOkB,EAAalB,MAAQ,IAAIzC,EAAK,aAAK+C,GAI9Cc,iBACE,KAAKL,YAAcpE,OAAO0E,YAAYC,MAAQ,KAAKR,eACnD,KAAKD,QAAU,WAGjBU,mBACE,KAAKV,QAAU,UACX,KAAKM,QAAQnB,OACf,KAAKmB,QAAQnB,MAAMR,SAIvBgC,gBACE,KAAKX,QAAU,UAGjBY,iBACE,KAAKZ,QAAU,QACf,KAAKC,eAAiBnE,OAAO0E,YAAYC,MAG3C,YACE,MAAO,IAAK,KAAKH,SAGnB,YACE,OAAO,KAAKN,QAGd,gBACE,OAAO,KAAKE,YAGdW,mBAAoBC,GAClB,MAAM,GAAEpB,GAAO,KACTqB,EAAerB,EAAGsB,aAAatB,EAAGuB,eAGxC,GAFAvB,EAAGwB,aAAaH,EAAcD,GAC9BpB,EAAGyB,cAAcJ,IACZrB,EAAG0B,mBAAmBL,EAAcrB,EAAG2B,gBAC1C,MAAM,IAAItB,uCAAuCL,EAAG4B,iBAAiBP,MAEvE,OAAOA,EAGTQ,qBAAsBT,GACpB,MAAM,GAAEpB,GAAO,KACT8B,EAAiB9B,EAAGsB,aAAatB,EAAG+B,iBAG1C,GAFA/B,EAAGwB,aAAaM,EAAgBV,GAChCpB,EAAGyB,cAAcK,IACZ9B,EAAG0B,mBAAmBI,EAAgB9B,EAAG2B,gBAC5C,MAAM,IAAItB,yCAAyCL,EAAG4B,iBAAiBE,MAEzE,OAAOA,GAEV,IAAAlF,EAAAC,QAAAC,QAEc4C;;ACrCU,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAlDzB,MAAMsC,EACJlG,YAAamG,GACX,KAAKA,QAAUA,EACf,KAAKC,SAAW,CAAEzE,EAAG,EAAGE,EAAG,EAAGQ,EAAG,GACjC,KAAKgE,MAAQ,CAAE1E,EAAG,EAAGE,EAAG,EAAGQ,EAAG,GAC9B,KAAKiE,SAAW,CAAE3E,EAAG,EAAGE,EAAG,EAAGQ,EAAG,GACjC,KAAKkE,iBAAmB,GAG1BC,iBAAkBC,EAAMC,GACtB,KAAKH,iBAAiBE,GAAQC,EAGhCC,iBAAkBF,GAChB,OAAO,KAAKF,iBAAiBE,GAG/BG,SAAUC,GACR,KAAKA,MAAQA,EAGfC,UAAWC,GACT,KAAKC,QAAUD,EAGjBE,KAAMC,EAAOC,GACP,KAAKH,UACP,KAAKA,QAAQI,YACX,KAAKhB,SACL,KAAKE,SACL,KAAKD,MACLa,EACAC,GAEF,KAAKH,QAAQC,QAIjB9D,SACE,MAAM,iBAAEoD,GAAqB,KAC7Bc,OAAOC,KAAKf,GAAkBgB,QAAQd,IACpCF,EAAiBE,GAAMtD,OAAO,KAAM,KAAKgD,WAI7CxF,UACM,KAAKqG,SAAS,KAAKA,QAAQrG,WAElC,IAAAG,EAAAC,QAAAC,QAEckF;;ACDd,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAA,QAAA,QAAA,QAAA,gBAAA,EAAA,QAAA,OAAA,EAAA,QAAA,mBAAA,EAAA,QAAA,SAAA,EA5CM,IAAIsB,EAAOzG,QAAAyG,QAAG,KACVC,EAAU1G,QAAA0G,WAA2B,oBAAjBC,aAA+BA,aAAeC,MAClEC,EAAM7G,QAAA6G,OAAGC,KAAKC,OAOlB,SAASC,EAAmBC,GACjCjH,QAAA0G,WAAAA,EAAaO,EAEf,IAAIC,EAASJ,KAAKK,GAAK,IAOhB,SAASC,EAASC,GACvB,OAAOA,EAAIH,EAYN,SAASI,EAAOD,EAAGE,GACxB,OAAOT,KAAKU,IAAIH,EAAIE,IAAMd,EAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIH,GAAIP,KAAKU,IAAID,IAErET,KAAKY,QAAOZ,KAAKY,MAAQ,WAI5B,IAHA,IAAI5G,EAAI,EACJ6G,EAAI3E,UAAUC,OAEX0E,KACL7G,GAAKkC,UAAU2E,GAAK3E,UAAU2E,GAGhC,OAAOb,KAAKc,KAAK9G;;AC+XM,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,QAAA,EAAA,QAAA,MAAA,EAAA,QAAA,KAAA,EAAA,QAAA,OAAA,EAAA,QAAA,YAAA,EAAA,QAAA,OAAA,EAAA,QAAA,YAAA,EAAA,QAAA,KAAA,EAAA,QAAA,aAAA,EAAA,QAAA,YAAA,EAAA,QAAA,WAAA,EAAA,QAAA,SAAA,EAAA,QAAA,OAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,eAAA,EAAA,QAAA,qBAAA,EAAA,QAAA,OAAA,EAAA,QAAA,MAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,UAAA,EA/azB,IAAA+G,EAAAC,EAAAvF,QAAA,gBAAwC,SAAAwF,EAAAtI,GAAAuI,GAAAA,mBAAAA,QAAAC,OAAAA,KAAAA,IAAAA,EAAAD,IAAAA,QAAAE,EAAAF,IAAAA,QAAAD,OAAAA,EAAAA,SAAAtI,GAAAA,OAAAA,EAAAyI,EAAAD,IAAAxI,GAAA,SAAAqI,EAAArI,EAAAwI,GAAAA,IAAAA,GAAAxI,GAAAA,EAAAgD,WAAAhD,OAAAA,EAAAA,GAAAA,OAAAA,GAAAA,iBAAAA,GAAAA,mBAAAA,EAAAQ,MAAAA,CAAAA,QAAAR,GAAAyI,IAAAA,EAAAH,EAAAE,GAAAC,GAAAA,GAAAA,EAAAC,IAAA1I,GAAAyI,OAAAA,EAAAE,IAAA3I,GAAA4I,IAAAA,EAAAC,CAAAA,UAAAjB,MAAAA,EAAAf,OAAAiC,gBAAAjC,OAAAkC,yBAAAC,IAAAA,IAAAA,KAAAhJ,EAAAgJ,GAAAA,YAAAA,GAAAC,GAAAA,eAAAC,KAAAlJ,EAAAgJ,GAAAd,CAAAA,IAAAA,EAAAN,EAAAf,OAAAkC,yBAAA/I,EAAAgJ,GAAAd,KAAAA,IAAAA,EAAAS,KAAAT,EAAAiB,KAAAtC,OAAAiC,eAAAF,EAAAI,EAAAd,GAAAU,EAAAI,GAAAhJ,EAAAgJ,GAAAJ,OAAAA,EAAApI,QAAAR,EAAAyI,GAAAA,EAAAU,IAAAnJ,EAAA4I,GAAAA,EAYjC,SAASQ,IACd,IAAIC,EAAM,IAAIjB,EAASnB,WAAW,GASlC,OAPImB,EAASnB,YAAcC,eACzBmC,EAAI,GAAK,EACTA,EAAI,GAAK,GAGXA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EASF,SAASC,EAAM1B,GACpB,IAAIyB,EAAM,IAAIjB,EAASnB,WAAW,GAKlC,OAJAoC,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACJyB,EAUF,SAASE,EAAKF,EAAKzB,GAKxB,OAJAyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACJyB,EASF,SAASG,EAASH,GAKvB,OAJAA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAYF,SAASI,EAAWC,EAAKC,EAAKC,EAAKC,GACxC,IAAIR,EAAM,IAAIjB,EAASnB,WAAW,GAKlC,OAJAoC,EAAI,GAAKK,EACTL,EAAI,GAAKM,EACTN,EAAI,GAAKO,EACTP,EAAI,GAAKQ,EACFR,EAaF,SAASF,EAAIE,EAAKK,EAAKC,EAAKC,EAAKC,GAKtC,OAJAR,EAAI,GAAKK,EACTL,EAAI,GAAKM,EACTN,EAAI,GAAKO,EACTP,EAAI,GAAKQ,EACFR,EAUF,SAASS,EAAUT,EAAKzB,GAG7B,GAAIyB,IAAQzB,EAAG,CACb,IAAImC,EAAKnC,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKU,OAETV,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GAGb,OAAOyB,EAUF,SAASW,EAAOX,EAAKzB,GAC1B,IAAIqC,EAAKrC,EAAE,GACPmC,EAAKnC,EAAE,GACPsC,EAAKtC,EAAE,GACPuC,EAAKvC,EAAE,GAEPwC,EAAMH,EAAKE,EAAKD,EAAKH,EAEzB,OAAKK,GAILA,EAAM,EAAMA,EACZf,EAAI,GAAKc,EAAKC,EACdf,EAAI,IAAMU,EAAKK,EACff,EAAI,IAAMa,EAAKE,EACff,EAAI,GAAKY,EAAKG,EACPf,GARE,KAkBJ,SAASgB,EAAQhB,EAAKzB,GAE3B,IAAIqC,EAAKrC,EAAE,GAKX,OAJAyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,IAAMzB,EAAE,GACZyB,EAAI,IAAMzB,EAAE,GACZyB,EAAI,GAAKY,EACFZ,EASF,SAASiB,EAAY1C,GAC1B,OAAOA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAWzB,SAAS2C,EAASlB,EAAKzB,EAAGE,GAC/B,IAAImC,EAAKrC,EAAE,GACPmC,EAAKnC,EAAE,GACPsC,EAAKtC,EAAE,GACPuC,EAAKvC,EAAE,GACP4C,EAAK1C,EAAE,GACP2C,EAAK3C,EAAE,GACP4C,EAAK5C,EAAE,GACP6C,EAAK7C,EAAE,GAKX,OAJAuB,EAAI,GAAKY,EAAKO,EAAKN,EAAKO,EACxBpB,EAAI,GAAKU,EAAKS,EAAKL,EAAKM,EACxBpB,EAAI,GAAKY,EAAKS,EAAKR,EAAKS,EACxBtB,EAAI,GAAKU,EAAKW,EAAKP,EAAKQ,EACjBtB,EAWF,SAASuB,EAAOvB,EAAKzB,EAAGiD,GAC7B,IAAIZ,EAAKrC,EAAE,GACPmC,EAAKnC,EAAE,GACPsC,EAAKtC,EAAE,GACPuC,EAAKvC,EAAE,GACPkD,EAAIzD,KAAK0D,IAAIF,GACbG,EAAI3D,KAAK4D,IAAIJ,GAKjB,OAJAxB,EAAI,GAAKY,EAAKe,EAAId,EAAKY,EACvBzB,EAAI,GAAKU,EAAKiB,EAAIb,EAAKW,EACvBzB,EAAI,GAAKY,GAAMa,EAAIZ,EAAKc,EACxB3B,EAAI,GAAKU,GAAMe,EAAIX,EAAKa,EACjB3B,EAWF,SAASxD,EAAMwD,EAAKzB,EAAGsD,GAC5B,IAAIjB,EAAKrC,EAAE,GACPmC,EAAKnC,EAAE,GACPsC,EAAKtC,EAAE,GACPuC,EAAKvC,EAAE,GACPuD,EAAKD,EAAE,GACPE,EAAKF,EAAE,GAKX,OAJA7B,EAAI,GAAKY,EAAKkB,EACd9B,EAAI,GAAKU,EAAKoB,EACd9B,EAAI,GAAKa,EAAKkB,EACd/B,EAAI,GAAKc,EAAKiB,EACP/B,EAcF,SAASgC,EAAahC,EAAKwB,GAChC,IAAIC,EAAIzD,KAAK0D,IAAIF,GACbG,EAAI3D,KAAK4D,IAAIJ,GAKjB,OAJAxB,EAAI,GAAK2B,EACT3B,EAAI,GAAKyB,EACTzB,EAAI,IAAMyB,EACVzB,EAAI,GAAK2B,EACF3B,EAcF,SAASiC,EAAYjC,EAAK6B,GAK/B,OAJA7B,EAAI,GAAK6B,EAAE,GACX7B,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK6B,EAAE,GACJ7B,EASF,SAASkC,EAAI3D,GAClB,MAAO,QAAUA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,IAS7D,SAAS4D,EAAK5D,GACnB,OAAOP,KAAKY,MAAML,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,IAUjC,SAAS6D,EAAIC,EAAGC,EAAGC,EAAGhE,GAK3B,OAJA8D,EAAE,GAAK9D,EAAE,GAAKA,EAAE,GAChBgE,EAAE,GAAKhE,EAAE,GACTgE,EAAE,GAAKhE,EAAE,GACTgE,EAAE,GAAKhE,EAAE,GAAK8D,EAAE,GAAKE,EAAE,GAChB,CAACF,EAAGC,EAAGC,GAWT,SAASC,EAAIxC,EAAKzB,EAAGE,GAK1B,OAJAuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GACXuB,EAWF,SAASyC,EAASzC,EAAKzB,EAAGE,GAK/B,OAJAuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GACXuB,EAUF,SAAS0C,EAAYnE,EAAGE,GAC7B,OAAOF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,GAUhE,SAASD,EAAOD,EAAGE,GACxB,IAAImC,EAAKrC,EAAE,GACPmC,EAAKnC,EAAE,GACPsC,EAAKtC,EAAE,GACPuC,EAAKvC,EAAE,GACP4C,EAAK1C,EAAE,GACP2C,EAAK3C,EAAE,GACP4C,EAAK5C,EAAE,GACP6C,EAAK7C,EAAE,GACX,OAAOT,KAAKU,IAAIkC,EAAKO,IAAOpC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIkC,GAAK5C,KAAKU,IAAIyC,KAAQnD,KAAKU,IAAIgC,EAAKU,IAAOrC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIgC,GAAK1C,KAAKU,IAAI0C,KAAQpD,KAAKU,IAAImC,EAAKQ,IAAOtC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAImC,GAAK7C,KAAKU,IAAI2C,KAAQrD,KAAKU,IAAIoC,EAAKQ,IAAOvC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIoC,GAAK9C,KAAKU,IAAI4C,IAW9U,SAASqB,EAAe3C,EAAKzB,EAAGE,GAKrC,OAJAuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EACTuB,EAYF,SAAS4C,EAAqB5C,EAAKzB,EAAGE,EAAGjC,GAK9C,OAJAwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EAChBwD,EAOF,IAAI6C,EAAG3L,QAAA2L,IAAG3B,EAMN4B,EAAG5L,QAAA4L,IAAGL;;ACsDQ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,IAAA,EAAA,QAAA,MAAA,EAAA,QAAA,KAAA,EAAA,QAAA,OAAA,EAAA,QAAA,YAAA,EAAA,QAAA,OAAA,EAAA,QAAA,YAAA,EAAA,QAAA,KAAA,EAAA,QAAA,aAAA,EAAA,QAAA,YAAA,EAAA,QAAA,gBAAA,EAAA,QAAA,WAAA,EAAA,QAAA,SAAA,EAAA,QAAA,OAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,eAAA,EAAA,QAAA,qBAAA,EAAA,QAAA,OAAA,EAAA,QAAA,MAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,UAAA,EArezB,IAAA1D,EAAAC,EAAAvF,QAAA,gBAAwC,SAAAwF,EAAAtI,GAAAuI,GAAAA,mBAAAA,QAAAC,OAAAA,KAAAA,IAAAA,EAAAD,IAAAA,QAAAE,EAAAF,IAAAA,QAAAD,OAAAA,EAAAA,SAAAtI,GAAAA,OAAAA,EAAAyI,EAAAD,IAAAxI,GAAA,SAAAqI,EAAArI,EAAAwI,GAAAA,IAAAA,GAAAxI,GAAAA,EAAAgD,WAAAhD,OAAAA,EAAAA,GAAAA,OAAAA,GAAAA,iBAAAA,GAAAA,mBAAAA,EAAAQ,MAAAA,CAAAA,QAAAR,GAAAyI,IAAAA,EAAAH,EAAAE,GAAAC,GAAAA,GAAAA,EAAAC,IAAA1I,GAAAyI,OAAAA,EAAAE,IAAA3I,GAAA4I,IAAAA,EAAAC,CAAAA,UAAAjB,MAAAA,EAAAf,OAAAiC,gBAAAjC,OAAAkC,yBAAAC,IAAAA,IAAAA,KAAAhJ,EAAAgJ,GAAAA,YAAAA,GAAAC,GAAAA,eAAAC,KAAAlJ,EAAAgJ,GAAAd,CAAAA,IAAAA,EAAAN,EAAAf,OAAAkC,yBAAA/I,EAAAgJ,GAAAd,KAAAA,IAAAA,EAAAS,KAAAT,EAAAiB,KAAAtC,OAAAiC,eAAAF,EAAAI,EAAAd,GAAAU,EAAAI,GAAAhJ,EAAAgJ,GAAAJ,OAAAA,EAAApI,QAAAR,EAAAyI,GAAAA,EAAAU,IAAAnJ,EAAA4I,GAAAA,EA0BjC,SAASQ,IACd,IAAIC,EAAM,IAAIjB,EAASnB,WAAW,GAWlC,OATImB,EAASnB,YAAcC,eACzBmC,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAGXA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EASF,SAASC,EAAM1B,GACpB,IAAIyB,EAAM,IAAIjB,EAASnB,WAAW,GAOlC,OANAoC,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACJyB,EAUF,SAASE,EAAKF,EAAKzB,GAOxB,OANAyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACJyB,EASF,SAASG,EAASH,GAOvB,OANAA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAcF,SAASI,EAAW7B,EAAGE,EAAGkD,EAAGoB,EAAGC,EAAIC,GACzC,IAAIjD,EAAM,IAAIjB,EAASnB,WAAW,GAOlC,OANAoC,EAAI,GAAKzB,EACTyB,EAAI,GAAKvB,EACTuB,EAAI,GAAK2B,EACT3B,EAAI,GAAK+C,EACT/C,EAAI,GAAKgD,EACThD,EAAI,GAAKiD,EACFjD,EAeF,SAASF,EAAIE,EAAKzB,EAAGE,EAAGkD,EAAGoB,EAAGC,EAAIC,GAOvC,OANAjD,EAAI,GAAKzB,EACTyB,EAAI,GAAKvB,EACTuB,EAAI,GAAK2B,EACT3B,EAAI,GAAK+C,EACT/C,EAAI,GAAKgD,EACThD,EAAI,GAAKiD,EACFjD,EAUF,SAASW,EAAOX,EAAKzB,GAC1B,IAAI2E,EAAK3E,EAAE,GACP4E,EAAK5E,EAAE,GACP6E,EAAK7E,EAAE,GACP8E,EAAK9E,EAAE,GACP+E,EAAM/E,EAAE,GACRgF,EAAMhF,EAAE,GACRwC,EAAMmC,EAAKG,EAAKF,EAAKC,EAEzB,OAAKrC,GAILA,EAAM,EAAMA,EACZf,EAAI,GAAKqD,EAAKtC,EACdf,EAAI,IAAMmD,EAAKpC,EACff,EAAI,IAAMoD,EAAKrC,EACff,EAAI,GAAKkD,EAAKnC,EACdf,EAAI,IAAMoD,EAAKG,EAAMF,EAAKC,GAAOvC,EACjCf,EAAI,IAAMmD,EAAKG,EAAMJ,EAAKK,GAAOxC,EAC1Bf,GAVE,KAmBJ,SAASiB,EAAY1C,GAC1B,OAAOA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAWzB,SAAS2C,EAASlB,EAAKzB,EAAGE,GAC/B,IAAImC,EAAKrC,EAAE,GACPmC,EAAKnC,EAAE,GACPsC,EAAKtC,EAAE,GACPuC,EAAKvC,EAAE,GACPiF,EAAKjF,EAAE,GACPkF,EAAKlF,EAAE,GACP4C,EAAK1C,EAAE,GACP2C,EAAK3C,EAAE,GACP4C,EAAK5C,EAAE,GACP6C,EAAK7C,EAAE,GACPiF,EAAKjF,EAAE,GACPkF,EAAKlF,EAAE,GAOX,OANAuB,EAAI,GAAKY,EAAKO,EAAKN,EAAKO,EACxBpB,EAAI,GAAKU,EAAKS,EAAKL,EAAKM,EACxBpB,EAAI,GAAKY,EAAKS,EAAKR,EAAKS,EACxBtB,EAAI,GAAKU,EAAKW,EAAKP,EAAKQ,EACxBtB,EAAI,GAAKY,EAAK8C,EAAK7C,EAAK8C,EAAKH,EAC7BxD,EAAI,GAAKU,EAAKgD,EAAK5C,EAAK6C,EAAKF,EACtBzD,EAWF,SAASuB,EAAOvB,EAAKzB,EAAGiD,GAC7B,IAAIZ,EAAKrC,EAAE,GACPmC,EAAKnC,EAAE,GACPsC,EAAKtC,EAAE,GACPuC,EAAKvC,EAAE,GACPiF,EAAKjF,EAAE,GACPkF,EAAKlF,EAAE,GACPkD,EAAIzD,KAAK0D,IAAIF,GACbG,EAAI3D,KAAK4D,IAAIJ,GAOjB,OANAxB,EAAI,GAAKY,EAAKe,EAAId,EAAKY,EACvBzB,EAAI,GAAKU,EAAKiB,EAAIb,EAAKW,EACvBzB,EAAI,GAAKY,GAAMa,EAAIZ,EAAKc,EACxB3B,EAAI,GAAKU,GAAMe,EAAIX,EAAKa,EACxB3B,EAAI,GAAKwD,EACTxD,EAAI,GAAKyD,EACFzD,EAWF,SAASxD,EAAMwD,EAAKzB,EAAGsD,GAC5B,IAAIjB,EAAKrC,EAAE,GACPmC,EAAKnC,EAAE,GACPsC,EAAKtC,EAAE,GACPuC,EAAKvC,EAAE,GACPiF,EAAKjF,EAAE,GACPkF,EAAKlF,EAAE,GACPuD,EAAKD,EAAE,GACPE,EAAKF,EAAE,GAOX,OANA7B,EAAI,GAAKY,EAAKkB,EACd9B,EAAI,GAAKU,EAAKoB,EACd9B,EAAI,GAAKa,EAAKkB,EACd/B,EAAI,GAAKc,EAAKiB,EACd/B,EAAI,GAAKwD,EACTxD,EAAI,GAAKyD,EACFzD,EAWF,SAAS4D,EAAU5D,EAAKzB,EAAGsD,GAChC,IAAIjB,EAAKrC,EAAE,GACPmC,EAAKnC,EAAE,GACPsC,EAAKtC,EAAE,GACPuC,EAAKvC,EAAE,GACPiF,EAAKjF,EAAE,GACPkF,EAAKlF,EAAE,GACPuD,EAAKD,EAAE,GACPE,EAAKF,EAAE,GAOX,OANA7B,EAAI,GAAKY,EACTZ,EAAI,GAAKU,EACTV,EAAI,GAAKa,EACTb,EAAI,GAAKc,EACTd,EAAI,GAAKY,EAAKkB,EAAKjB,EAAKkB,EAAKyB,EAC7BxD,EAAI,GAAKU,EAAKoB,EAAKhB,EAAKiB,EAAK0B,EACtBzD,EAcF,SAASgC,EAAahC,EAAKwB,GAChC,IAAIC,EAAIzD,KAAK0D,IAAIF,GACbG,EAAI3D,KAAK4D,IAAIJ,GAOjB,OANAxB,EAAI,GAAK2B,EACT3B,EAAI,GAAKyB,EACTzB,EAAI,IAAMyB,EACVzB,EAAI,GAAK2B,EACT3B,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAcF,SAASiC,EAAYjC,EAAK6B,GAO/B,OANA7B,EAAI,GAAK6B,EAAE,GACX7B,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK6B,EAAE,GACX7B,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAcF,SAAS6D,EAAgB7D,EAAK6B,GAOnC,OANA7B,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK6B,EAAE,GACX7B,EAAI,GAAK6B,EAAE,GACJ7B,EASF,SAASkC,EAAI3D,GAClB,MAAO,SAAWA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,IAS1F,SAAS4D,EAAK5D,GACnB,OAAOP,KAAKY,MAAML,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAI,GAWjD,SAASiE,EAAIxC,EAAKzB,EAAGE,GAO1B,OANAuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GACXuB,EAWF,SAASyC,EAASzC,EAAKzB,EAAGE,GAO/B,OANAuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GACXuB,EAWF,SAAS2C,EAAe3C,EAAKzB,EAAGE,GAOrC,OANAuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EACTuB,EAYF,SAAS4C,EAAqB5C,EAAKzB,EAAGE,EAAGjC,GAO9C,OANAwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EAChBwD,EAUF,SAAS0C,EAAYnE,EAAGE,GAC7B,OAAOF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,GAUlG,SAASD,EAAOD,EAAGE,GACxB,IAAImC,EAAKrC,EAAE,GACPmC,EAAKnC,EAAE,GACPsC,EAAKtC,EAAE,GACPuC,EAAKvC,EAAE,GACPiF,EAAKjF,EAAE,GACPkF,EAAKlF,EAAE,GACP4C,EAAK1C,EAAE,GACP2C,EAAK3C,EAAE,GACP4C,EAAK5C,EAAE,GACP6C,EAAK7C,EAAE,GACPiF,EAAKjF,EAAE,GACPkF,EAAKlF,EAAE,GACX,OAAOT,KAAKU,IAAIkC,EAAKO,IAAOpC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIkC,GAAK5C,KAAKU,IAAIyC,KAAQnD,KAAKU,IAAIgC,EAAKU,IAAOrC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIgC,GAAK1C,KAAKU,IAAI0C,KAAQpD,KAAKU,IAAImC,EAAKQ,IAAOtC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAImC,GAAK7C,KAAKU,IAAI2C,KAAQrD,KAAKU,IAAIoC,EAAKQ,IAAOvC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIoC,GAAK9C,KAAKU,IAAI4C,KAAQtD,KAAKU,IAAI8E,EAAKE,IAAO3E,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAI8E,GAAKxF,KAAKU,IAAIgF,KAAQ1F,KAAKU,IAAI+E,EAAKE,IAAO5E,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAI+E,GAAKzF,KAAKU,IAAIiF,IAOxf,IAAId,EAAG3L,QAAA2L,IAAG3B,EAMN4B,EAAG5L,QAAA4L,IAAGL;;ACoSQ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,IAAA,EAAA,QAAA,QAAA,EAAA,QAAA,MAAA,EAAA,QAAA,KAAA,EAAA,QAAA,OAAA,EAAA,QAAA,YAAA,EAAA,QAAA,OAAA,EAAA,QAAA,YAAA,EAAA,QAAA,KAAA,EAAA,QAAA,UAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,aAAA,EAAA,QAAA,YAAA,EAAA,QAAA,gBAAA,EAAA,QAAA,WAAA,EAAA,QAAA,SAAA,EAAA,QAAA,OAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,eAAA,EAAA,QAAA,qBAAA,EAAA,QAAA,eAAA,EAAA,QAAA,WAAA,EAAA,QAAA,OAAA,EAAA,QAAA,MAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,UAAA,EAAA,QAAA,UAAA,EAzwBzB,IAAA1D,EAAAC,EAAAvF,QAAA,gBAAwC,SAAAwF,EAAAtI,GAAAuI,GAAAA,mBAAAA,QAAAC,OAAAA,KAAAA,IAAAA,EAAAD,IAAAA,QAAAE,EAAAF,IAAAA,QAAAD,OAAAA,EAAAA,SAAAtI,GAAAA,OAAAA,EAAAyI,EAAAD,IAAAxI,GAAA,SAAAqI,EAAArI,EAAAwI,GAAAA,IAAAA,GAAAxI,GAAAA,EAAAgD,WAAAhD,OAAAA,EAAAA,GAAAA,OAAAA,GAAAA,iBAAAA,GAAAA,mBAAAA,EAAAQ,MAAAA,CAAAA,QAAAR,GAAAyI,IAAAA,EAAAH,EAAAE,GAAAC,GAAAA,GAAAA,EAAAC,IAAA1I,GAAAyI,OAAAA,EAAAE,IAAA3I,GAAA4I,IAAAA,EAAAC,CAAAA,UAAAjB,MAAAA,EAAAf,OAAAiC,gBAAAjC,OAAAkC,yBAAAC,IAAAA,IAAAA,KAAAhJ,EAAAgJ,GAAAA,YAAAA,GAAAC,GAAAA,eAAAC,KAAAlJ,EAAAgJ,GAAAd,CAAAA,IAAAA,EAAAN,EAAAf,OAAAkC,yBAAA/I,EAAAgJ,GAAAd,KAAAA,IAAAA,EAAAS,KAAAT,EAAAiB,KAAAtC,OAAAiC,eAAAF,EAAAI,EAAAd,GAAAU,EAAAI,GAAAhJ,EAAAgJ,GAAAJ,OAAAA,EAAApI,QAAAR,EAAAyI,GAAAA,EAAAU,IAAAnJ,EAAA4I,GAAAA,EAYjC,SAASQ,IACd,IAAIC,EAAM,IAAIjB,EAASnB,WAAW,GAclC,OAZImB,EAASnB,YAAcC,eACzBmC,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAGXA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAUF,SAAS8D,EAAS9D,EAAKzB,GAU5B,OATAyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,IACJyB,EASF,SAASC,EAAM1B,GACpB,IAAIyB,EAAM,IAAIjB,EAASnB,WAAW,GAUlC,OATAoC,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACJyB,EAUF,SAASE,EAAKF,EAAKzB,GAUxB,OATAyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACJyB,EAiBF,SAASI,EAAWC,EAAKC,EAAKyD,EAAKxD,EAAKC,EAAKwD,EAAKC,EAAKC,EAAKC,GACjE,IAAInE,EAAM,IAAIjB,EAASnB,WAAW,GAUlC,OATAoC,EAAI,GAAKK,EACTL,EAAI,GAAKM,EACTN,EAAI,GAAK+D,EACT/D,EAAI,GAAKO,EACTP,EAAI,GAAKQ,EACTR,EAAI,GAAKgE,EACThE,EAAI,GAAKiE,EACTjE,EAAI,GAAKkE,EACTlE,EAAI,GAAKmE,EACFnE,EAkBF,SAASF,EAAIE,EAAKK,EAAKC,EAAKyD,EAAKxD,EAAKC,EAAKwD,EAAKC,EAAKC,EAAKC,GAU/D,OATAnE,EAAI,GAAKK,EACTL,EAAI,GAAKM,EACTN,EAAI,GAAK+D,EACT/D,EAAI,GAAKO,EACTP,EAAI,GAAKQ,EACTR,EAAI,GAAKgE,EACThE,EAAI,GAAKiE,EACTjE,EAAI,GAAKkE,EACTlE,EAAI,GAAKmE,EACFnE,EASF,SAASG,EAASH,GAUvB,OATAA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAUF,SAASS,EAAUT,EAAKzB,GAE7B,GAAIyB,IAAQzB,EAAG,CACb,IAAI6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACR+F,EAAM/F,EAAE,GACZyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKoE,EACTpE,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKqE,EACTrE,EAAI,GAAKsE,OAETtE,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GAGb,OAAOyB,EAUF,SAASW,EAAOX,EAAKzB,GAC1B,IAAIgG,EAAMhG,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACRiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,GACR+F,EAAM/F,EAAE,GACRmG,EAAMnG,EAAE,GACRoG,EAAMpG,EAAE,GACRqG,EAAMrG,EAAE,GACRsG,EAAMD,EAAMH,EAAMH,EAAMK,EACxBG,GAAOF,EAAMJ,EAAMF,EAAMI,EACzBK,EAAMJ,EAAMH,EAAMC,EAAMC,EAExB3D,EAAMwD,EAAMM,EAAMT,EAAMU,EAAMT,EAAMU,EAExC,OAAKhE,GAILA,EAAM,EAAMA,EACZf,EAAI,GAAK6E,EAAM9D,EACff,EAAI,KAAO4E,EAAMR,EAAMC,EAAMM,GAAO5D,EACpCf,EAAI,IAAMsE,EAAMF,EAAMC,EAAMI,GAAO1D,EACnCf,EAAI,GAAK8E,EAAM/D,EACff,EAAI,IAAM4E,EAAML,EAAMF,EAAMK,GAAO3D,EACnCf,EAAI,KAAOsE,EAAMC,EAAMF,EAAMG,GAAOzD,EACpCf,EAAI,GAAK+E,EAAMhE,EACff,EAAI,KAAO2E,EAAMJ,EAAMH,EAAMM,GAAO3D,EACpCf,EAAI,IAAMyE,EAAMF,EAAMH,EAAMI,GAAOzD,EAC5Bf,GAbE,KAuBJ,SAASgB,EAAQhB,EAAKzB,GAC3B,IAAIgG,EAAMhG,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACRiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,GACR+F,EAAM/F,EAAE,GACRmG,EAAMnG,EAAE,GACRoG,EAAMpG,EAAE,GACRqG,EAAMrG,EAAE,GAUZ,OATAyB,EAAI,GAAKyE,EAAMG,EAAMN,EAAMK,EAC3B3E,EAAI,GAAKqE,EAAMM,EAAMP,EAAMQ,EAC3B5E,EAAI,GAAKoE,EAAME,EAAMD,EAAMI,EAC3BzE,EAAI,GAAKsE,EAAMI,EAAMF,EAAMI,EAC3B5E,EAAI,GAAKuE,EAAMK,EAAMP,EAAMK,EAC3B1E,EAAI,GAAKqE,EAAMG,EAAMD,EAAMD,EAC3BtE,EAAI,GAAKwE,EAAMG,EAAMF,EAAMC,EAC3B1E,EAAI,GAAKoE,EAAMM,EAAMH,EAAMI,EAC3B3E,EAAI,GAAKuE,EAAME,EAAML,EAAMI,EACpBxE,EASF,SAASiB,EAAY1C,GAC1B,IAAIgG,EAAMhG,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACRiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,GACR+F,EAAM/F,EAAE,GACRmG,EAAMnG,EAAE,GACRoG,EAAMpG,EAAE,GACRqG,EAAMrG,EAAE,GACZ,OAAOgG,GAAOK,EAAMH,EAAMH,EAAMK,GAAOP,IAAQQ,EAAMJ,EAAMF,EAAMI,GAAOL,GAAOM,EAAMH,EAAMC,EAAMC,GAW5F,SAASxD,EAASlB,EAAKzB,EAAGE,GAC/B,IAAI8F,EAAMhG,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACRiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,GACR+F,EAAM/F,EAAE,GACRmG,EAAMnG,EAAE,GACRoG,EAAMpG,EAAE,GACRqG,EAAMrG,EAAE,GACRyG,EAAMvG,EAAE,GACRoG,EAAMpG,EAAE,GACRwG,EAAMxG,EAAE,GACRyG,EAAMzG,EAAE,GACRqG,EAAMrG,EAAE,GACR0G,EAAM1G,EAAE,GACR2G,EAAM3G,EAAE,GACRsG,EAAMtG,EAAE,GACR4G,EAAM5G,EAAE,GAUZ,OATAuB,EAAI,GAAKgF,EAAMT,EAAMM,EAAML,EAAMS,EAAMP,EACvC1E,EAAI,GAAKgF,EAAMZ,EAAMS,EAAMJ,EAAMQ,EAAMN,EACvC3E,EAAI,GAAKgF,EAAMX,EAAMQ,EAAMP,EAAMW,EAAML,EACvC5E,EAAI,GAAKkF,EAAMX,EAAMO,EAAMN,EAAMW,EAAMT,EACvC1E,EAAI,GAAKkF,EAAMd,EAAMU,EAAML,EAAMU,EAAMR,EACvC3E,EAAI,GAAKkF,EAAMb,EAAMS,EAAMR,EAAMa,EAAMP,EACvC5E,EAAI,GAAKoF,EAAMb,EAAMQ,EAAMP,EAAMa,EAAMX,EACvC1E,EAAI,GAAKoF,EAAMhB,EAAMW,EAAMN,EAAMY,EAAMV,EACvC3E,EAAI,GAAKoF,EAAMf,EAAMU,EAAMT,EAAMe,EAAMT,EAChC5E,EAWF,SAAS4D,EAAU5D,EAAKzB,EAAGsD,GAChC,IAAI0C,EAAMhG,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACRiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,GACR+F,EAAM/F,EAAE,GACRmG,EAAMnG,EAAE,GACRoG,EAAMpG,EAAE,GACRqG,EAAMrG,EAAE,GACRzG,EAAI+J,EAAE,GACN7J,EAAI6J,EAAE,GAUV,OATA7B,EAAI,GAAKuE,EACTvE,EAAI,GAAKoE,EACTpE,EAAI,GAAKqE,EACTrE,EAAI,GAAKwE,EACTxE,EAAI,GAAKyE,EACTzE,EAAI,GAAKsE,EACTtE,EAAI,GAAKlI,EAAIyM,EAAMvM,EAAIwM,EAAME,EAC7B1E,EAAI,GAAKlI,EAAIsM,EAAMpM,EAAIyM,EAAME,EAC7B3E,EAAI,GAAKlI,EAAIuM,EAAMrM,EAAIsM,EAAMM,EACtB5E,EAWF,SAASuB,EAAOvB,EAAKzB,EAAGiD,GAC7B,IAAI+C,EAAMhG,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACRiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,GACR+F,EAAM/F,EAAE,GACRmG,EAAMnG,EAAE,GACRoG,EAAMpG,EAAE,GACRqG,EAAMrG,EAAE,GACRkD,EAAIzD,KAAK0D,IAAIF,GACbG,EAAI3D,KAAK4D,IAAIJ,GAUjB,OATAxB,EAAI,GAAK2B,EAAI4C,EAAM9C,EAAI+C,EACvBxE,EAAI,GAAK2B,EAAIyC,EAAM3C,EAAIgD,EACvBzE,EAAI,GAAK2B,EAAI0C,EAAM5C,EAAI6C,EACvBtE,EAAI,GAAK2B,EAAI6C,EAAM/C,EAAI8C,EACvBvE,EAAI,GAAK2B,EAAI8C,EAAMhD,EAAI2C,EACvBpE,EAAI,GAAK2B,EAAI2C,EAAM7C,EAAI4C,EACvBrE,EAAI,GAAK0E,EACT1E,EAAI,GAAK2E,EACT3E,EAAI,GAAK4E,EACF5E,EAWF,SAASxD,EAAMwD,EAAKzB,EAAGsD,GAC5B,IAAI/J,EAAI+J,EAAE,GACN7J,EAAI6J,EAAE,GAUV,OATA7B,EAAI,GAAKlI,EAAIyG,EAAE,GACfyB,EAAI,GAAKlI,EAAIyG,EAAE,GACfyB,EAAI,GAAKlI,EAAIyG,EAAE,GACfyB,EAAI,GAAKhI,EAAIuG,EAAE,GACfyB,EAAI,GAAKhI,EAAIuG,EAAE,GACfyB,EAAI,GAAKhI,EAAIuG,EAAE,GACfyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACJyB,EAcF,SAAS6D,EAAgB7D,EAAK6B,GAUnC,OATA7B,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK6B,EAAE,GACX7B,EAAI,GAAK6B,EAAE,GACX7B,EAAI,GAAK,EACFA,EAcF,SAASgC,EAAahC,EAAKwB,GAChC,IAAIC,EAAIzD,KAAK0D,IAAIF,GACbG,EAAI3D,KAAK4D,IAAIJ,GAUjB,OATAxB,EAAI,GAAK2B,EACT3B,EAAI,GAAKyB,EACTzB,EAAI,GAAK,EACTA,EAAI,IAAMyB,EACVzB,EAAI,GAAK2B,EACT3B,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAcF,SAASiC,EAAYjC,EAAK6B,GAU/B,OATA7B,EAAI,GAAK6B,EAAE,GACX7B,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK6B,EAAE,GACX7B,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAUF,SAASsF,EAAUtF,EAAKzB,GAU7B,OATAyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAK,EACTA,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAK,EACTA,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAK,EACFA,EAWF,SAASuF,EAASvF,EAAKwF,GAC5B,IAAI1N,EAAI0N,EAAE,GACNxN,EAAIwN,EAAE,GACNhN,EAAIgN,EAAE,GACNC,EAAID,EAAE,GACNE,EAAK5N,EAAIA,EACT6N,EAAK3N,EAAIA,EACT4N,EAAKpN,EAAIA,EACTqN,EAAK/N,EAAI4N,EACTI,EAAK9N,EAAI0N,EACTK,EAAK/N,EAAI2N,EACTK,EAAKxN,EAAIkN,EACTO,EAAKzN,EAAImN,EACTO,EAAK1N,EAAIoN,EACTO,EAAKV,EAAIC,EACTU,EAAKX,EAAIE,EACTU,EAAKZ,EAAIG,EAUb,OATA5F,EAAI,GAAK,EAAI+F,EAAKG,EAClBlG,EAAI,GAAK8F,EAAKO,EACdrG,EAAI,GAAKgG,EAAKI,EACdpG,EAAI,GAAK8F,EAAKO,EACdrG,EAAI,GAAK,EAAI6F,EAAKK,EAClBlG,EAAI,GAAKiG,EAAKE,EACdnG,EAAI,GAAKgG,EAAKI,EACdpG,EAAI,GAAKiG,EAAKE,EACdnG,EAAI,GAAK,EAAI6F,EAAKE,EACX/F,EAWF,SAASsG,EAAetG,EAAKzB,GAClC,IAAIgG,EAAMhG,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACRgI,EAAMhI,EAAE,GACRiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,GACR+F,EAAM/F,EAAE,GACRiI,EAAMjI,EAAE,GACRmG,EAAMnG,EAAE,GACRoG,EAAMpG,EAAE,GACRqG,EAAMrG,EAAE,IACRkI,EAAMlI,EAAE,IACRmI,EAAMnI,EAAE,IACRoI,EAAMpI,EAAE,IACRqI,EAAMrI,EAAE,IACRsI,EAAMtI,EAAE,IACRyG,EAAMT,EAAME,EAAML,EAAMI,EACxBK,EAAMN,EAAMD,EAAMD,EAAMG,EACxBS,EAAMV,EAAMiC,EAAMD,EAAM/B,EACxBsC,EAAM1C,EAAME,EAAMD,EAAMI,EACxBsC,EAAM3C,EAAMoC,EAAMD,EAAM9B,EACxBuC,EAAM3C,EAAMmC,EAAMD,EAAMjC,EACxB2C,EAAMvC,EAAMiC,EAAMhC,EAAM+B,EACxBQ,EAAMxC,EAAMkC,EAAMhC,EAAM8B,EACxBS,EAAMzC,EAAMmC,EAAMJ,EAAMC,EACxBU,EAAMzC,EAAMiC,EAAMhC,EAAM+B,EACxBzB,EAAMP,EAAMkC,EAAMJ,EAAME,EACxB7B,EAAMF,EAAMiC,EAAMJ,EAAMG,EAExB7F,EAAMiE,EAAMF,EAAMD,EAAMK,EAAMD,EAAMmC,EAAMN,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,EAE5E,OAAKlG,GAILA,EAAM,EAAMA,EACZf,EAAI,IAAMyE,EAAMK,EAAMR,EAAMY,EAAMsB,EAAMY,GAAOrG,EAC/Cf,EAAI,IAAMsE,EAAM6C,EAAM3C,EAAMM,EAAM0B,EAAMU,GAAOnG,EAC/Cf,EAAI,IAAMwE,EAAMU,EAAMT,EAAM0C,EAAMX,EAAMS,GAAOlG,EAC/Cf,EAAI,IAAMqE,EAAMa,EAAMd,EAAMU,EAAMyB,EAAMa,GAAOrG,EAC/Cf,EAAI,IAAMuE,EAAMO,EAAMT,EAAM8C,EAAMZ,EAAMW,GAAOnG,EAC/Cf,EAAI,IAAMoE,EAAM+C,EAAM5C,EAAMW,EAAMqB,EAAMU,GAAOlG,EAC/Cf,EAAI,IAAM2G,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,GAAO/F,EAC/Cf,EAAI,IAAM4G,EAAM3B,EAAMyB,EAAMM,EAAMH,EAAMhC,GAAO9D,EAC/Cf,EAAI,IAAM0G,EAAMK,EAAMJ,EAAM1B,EAAM4B,EAAM7B,GAAOjE,EACxCf,GAbE,KAwBJ,SAASqH,EAAWrH,EAAKsH,EAAOC,GAUrC,OATAvH,EAAI,GAAK,EAAIsH,EACbtH,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EAAIuH,EACdvH,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EASF,SAASkC,EAAI3D,GAClB,MAAO,QAAUA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,IASnI,SAAS4D,EAAK5D,GACnB,OAAOP,KAAKY,MAAML,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,IAW/D,SAASiE,EAAIxC,EAAKzB,EAAGE,GAU1B,OATAuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GACXuB,EAWF,SAASyC,EAASzC,EAAKzB,EAAGE,GAU/B,OATAuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GACXuB,EAWF,SAAS2C,EAAe3C,EAAKzB,EAAGE,GAUrC,OATAuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EACTuB,EAYF,SAAS4C,EAAqB5C,EAAKzB,EAAGE,EAAGjC,GAU9C,OATAwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EAChBwD,EAUF,SAAS0C,EAAYnE,EAAGE,GAC7B,OAAOF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,GAUrJ,SAASD,EAAOD,EAAGE,GACxB,IAAImC,EAAKrC,EAAE,GACPmC,EAAKnC,EAAE,GACPsC,EAAKtC,EAAE,GACPuC,EAAKvC,EAAE,GACPiF,EAAKjF,EAAE,GACPkF,EAAKlF,EAAE,GACPiJ,EAAKjJ,EAAE,GACPkJ,EAAKlJ,EAAE,GACPmJ,EAAKnJ,EAAE,GACP4C,EAAK1C,EAAE,GACP2C,EAAK3C,EAAE,GACP4C,EAAK5C,EAAE,GACP6C,EAAK7C,EAAE,GACPiF,EAAKjF,EAAE,GACPkF,EAAKlF,EAAE,GACPkJ,EAAKlJ,EAAE,GACPmJ,EAAKnJ,EAAE,GACPoJ,EAAKpJ,EAAE,GACX,OAAOT,KAAKU,IAAIkC,EAAKO,IAAOpC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIkC,GAAK5C,KAAKU,IAAIyC,KAAQnD,KAAKU,IAAIgC,EAAKU,IAAOrC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIgC,GAAK1C,KAAKU,IAAI0C,KAAQpD,KAAKU,IAAImC,EAAKQ,IAAOtC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAImC,GAAK7C,KAAKU,IAAI2C,KAAQrD,KAAKU,IAAIoC,EAAKQ,IAAOvC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIoC,GAAK9C,KAAKU,IAAI4C,KAAQtD,KAAKU,IAAI8E,EAAKE,IAAO3E,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAI8E,GAAKxF,KAAKU,IAAIgF,KAAQ1F,KAAKU,IAAI+E,EAAKE,IAAO5E,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAI+E,GAAKzF,KAAKU,IAAIiF,KAAQ3F,KAAKU,IAAI8I,EAAKG,IAAO5I,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAI8I,GAAKxJ,KAAKU,IAAIiJ,KAAQ3J,KAAKU,IAAI+I,EAAKG,IAAO7I,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAI+I,GAAKzJ,KAAKU,IAAIkJ,KAAQ5J,KAAKU,IAAIgJ,EAAKG,IAAO9I,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIgJ,GAAK1J,KAAKU,IAAImJ,IAOvvB,IAAIhF,EAAG3L,QAAA2L,IAAG3B,EAMN4B,EAAG5L,QAAA4L,IAAGL;;AC4mCQ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,IAAA,EAAA,QAAA,QAAA,EAAA,QAAA,MAAA,EAAA,QAAA,KAAA,EAAA,QAAA,OAAA,EAAA,QAAA,YAAA,EAAA,QAAA,OAAA,EAAA,QAAA,YAAA,EAAA,QAAA,KAAA,EAAA,QAAA,SAAA,EAAA,QAAA,UAAA,EAAA,QAAA,aAAA,EAAA,QAAA,wBAAA,EAAA,QAAA,6BAAA,EAAA,QAAA,mCAAA,EAAA,QAAA,YAAA,EAAA,QAAA,gBAAA,EAAA,QAAA,WAAA,EAAA,QAAA,cAAA,EAAA,QAAA,cAAA,EAAA,QAAA,cAAA,EAAA,QAAA,QAAA,EAAA,QAAA,YAAA,EAAA,QAAA,WAAA,EAAA,QAAA,eAAA,EAAA,QAAA,SAAA,EAAA,QAAA,OAAA,EAAA,QAAA,OAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,eAAA,EAAA,QAAA,qBAAA,EAAA,QAAA,WAAA,EAAA,QAAA,QAAA,EAAA,QAAA,QAAA,EAAA,QAAA,iBAAA,EAAA,QAAA,2BAAA,EAAA,QAAA,cAAA,EAAA,QAAA,cAAA,EAAA,QAAA,OAAA,EAAA,QAAA,QAAA,EAAA,QAAA,QAAA,EAAA,QAAA,QAAA,EAAA,QAAA,MAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,UAAA,EAAA,QAAA,UAAA,EAr3DzB,IAAA1D,EAAAC,EAAAvF,QAAA,gBAAwC,SAAAwF,EAAAtI,GAAAuI,GAAAA,mBAAAA,QAAAC,OAAAA,KAAAA,IAAAA,EAAAD,IAAAA,QAAAE,EAAAF,IAAAA,QAAAD,OAAAA,EAAAA,SAAAtI,GAAAA,OAAAA,EAAAyI,EAAAD,IAAAxI,GAAA,SAAAqI,EAAArI,EAAAwI,GAAAA,IAAAA,GAAAxI,GAAAA,EAAAgD,WAAAhD,OAAAA,EAAAA,GAAAA,OAAAA,GAAAA,iBAAAA,GAAAA,mBAAAA,EAAAQ,MAAAA,CAAAA,QAAAR,GAAAyI,IAAAA,EAAAH,EAAAE,GAAAC,GAAAA,GAAAA,EAAAC,IAAA1I,GAAAyI,OAAAA,EAAAE,IAAA3I,GAAA4I,IAAAA,EAAAC,CAAAA,UAAAjB,MAAAA,EAAAf,OAAAiC,gBAAAjC,OAAAkC,yBAAAC,IAAAA,IAAAA,KAAAhJ,EAAAgJ,GAAAA,YAAAA,GAAAC,GAAAA,eAAAC,KAAAlJ,EAAAgJ,GAAAd,CAAAA,IAAAA,EAAAN,EAAAf,OAAAkC,yBAAA/I,EAAAgJ,GAAAd,KAAAA,IAAAA,EAAAS,KAAAT,EAAAiB,KAAAtC,OAAAiC,eAAAF,EAAAI,EAAAd,GAAAU,EAAAI,GAAAhJ,EAAAgJ,GAAAJ,OAAAA,EAAApI,QAAAR,EAAAyI,GAAAA,EAAAU,IAAAnJ,EAAA4I,GAAAA,EAYjC,SAASQ,IACd,IAAIC,EAAM,IAAIjB,EAASnB,WAAW,IAqBlC,OAnBImB,EAASnB,YAAcC,eACzBmC,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,GAGZA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,EASF,SAASC,EAAM1B,GACpB,IAAIyB,EAAM,IAAIjB,EAASnB,WAAW,IAiBlC,OAhBAoC,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IACLyB,EAUF,SAASE,EAAKF,EAAKzB,GAiBxB,OAhBAyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IACLyB,EAwBF,SAASI,EAAWC,EAAKC,EAAKyD,EAAK+D,EAAKvH,EAAKC,EAAKwD,EAAK+D,EAAK9D,EAAKC,EAAKC,EAAK6D,EAAKC,EAAKC,EAAKC,EAAKC,GACpG,IAAIpI,EAAM,IAAIjB,EAASnB,WAAW,IAiBlC,OAhBAoC,EAAI,GAAKK,EACTL,EAAI,GAAKM,EACTN,EAAI,GAAK+D,EACT/D,EAAI,GAAK8H,EACT9H,EAAI,GAAKO,EACTP,EAAI,GAAKQ,EACTR,EAAI,GAAKgE,EACThE,EAAI,GAAK+H,EACT/H,EAAI,GAAKiE,EACTjE,EAAI,GAAKkE,EACTlE,EAAI,IAAMmE,EACVnE,EAAI,IAAMgI,EACVhI,EAAI,IAAMiI,EACVjI,EAAI,IAAMkI,EACVlI,EAAI,IAAMmI,EACVnI,EAAI,IAAMoI,EACHpI,EAyBF,SAASF,EAAIE,EAAKK,EAAKC,EAAKyD,EAAK+D,EAAKvH,EAAKC,EAAKwD,EAAK+D,EAAK9D,EAAKC,EAAKC,EAAK6D,EAAKC,EAAKC,EAAKC,EAAKC,GAiBlG,OAhBApI,EAAI,GAAKK,EACTL,EAAI,GAAKM,EACTN,EAAI,GAAK+D,EACT/D,EAAI,GAAK8H,EACT9H,EAAI,GAAKO,EACTP,EAAI,GAAKQ,EACTR,EAAI,GAAKgE,EACThE,EAAI,GAAK+H,EACT/H,EAAI,GAAKiE,EACTjE,EAAI,GAAKkE,EACTlE,EAAI,IAAMmE,EACVnE,EAAI,IAAMgI,EACVhI,EAAI,IAAMiI,EACVjI,EAAI,IAAMkI,EACVlI,EAAI,IAAMmI,EACVnI,EAAI,IAAMoI,EACHpI,EASF,SAASG,EAASH,GAiBvB,OAhBAA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,EAUF,SAASS,EAAUT,EAAKzB,GAE7B,GAAIyB,IAAQzB,EAAG,CACb,IAAI6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACRgI,EAAMhI,EAAE,GACR+F,EAAM/F,EAAE,GACRiI,EAAMjI,EAAE,GACRkI,EAAMlI,EAAE,IACZyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,IACXyB,EAAI,GAAKoE,EACTpE,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,IACXyB,EAAI,GAAKqE,EACTrE,EAAI,GAAKsE,EACTtE,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMuG,EACVvG,EAAI,IAAMwG,EACVxG,EAAI,IAAMyG,OAEVzG,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,IACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,IACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,GACZyB,EAAI,IAAMzB,EAAE,GACZyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IAGd,OAAOyB,EAUF,SAASW,EAAOX,EAAKzB,GAC1B,IAAIgG,EAAMhG,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACRgI,EAAMhI,EAAE,GACRiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,GACR+F,EAAM/F,EAAE,GACRiI,EAAMjI,EAAE,GACRmG,EAAMnG,EAAE,GACRoG,EAAMpG,EAAE,GACRqG,EAAMrG,EAAE,IACRkI,EAAMlI,EAAE,IACRmI,EAAMnI,EAAE,IACRoI,EAAMpI,EAAE,IACRqI,EAAMrI,EAAE,IACRsI,EAAMtI,EAAE,IACRyG,EAAMT,EAAME,EAAML,EAAMI,EACxBK,EAAMN,EAAMD,EAAMD,EAAMG,EACxBS,EAAMV,EAAMiC,EAAMD,EAAM/B,EACxBsC,EAAM1C,EAAME,EAAMD,EAAMI,EACxBsC,EAAM3C,EAAMoC,EAAMD,EAAM9B,EACxBuC,EAAM3C,EAAMmC,EAAMD,EAAMjC,EACxB2C,EAAMvC,EAAMiC,EAAMhC,EAAM+B,EACxBQ,EAAMxC,EAAMkC,EAAMhC,EAAM8B,EACxBS,EAAMzC,EAAMmC,EAAMJ,EAAMC,EACxBU,EAAMzC,EAAMiC,EAAMhC,EAAM+B,EACxBzB,EAAMP,EAAMkC,EAAMJ,EAAME,EACxB7B,EAAMF,EAAMiC,EAAMJ,EAAMG,EAExB7F,EAAMiE,EAAMF,EAAMD,EAAMK,EAAMD,EAAMmC,EAAMN,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,EAE5E,OAAKlG,GAILA,EAAM,EAAMA,EACZf,EAAI,IAAMyE,EAAMK,EAAMR,EAAMY,EAAMsB,EAAMY,GAAOrG,EAC/Cf,EAAI,IAAMqE,EAAMa,EAAMd,EAAMU,EAAMyB,EAAMa,GAAOrG,EAC/Cf,EAAI,IAAM2G,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,GAAO/F,EAC/Cf,EAAI,IAAM4E,EAAMmC,EAAMpC,EAAMqC,EAAMP,EAAMK,GAAO/F,EAC/Cf,EAAI,IAAMsE,EAAM6C,EAAM3C,EAAMM,EAAM0B,EAAMU,GAAOnG,EAC/Cf,EAAI,IAAMuE,EAAMO,EAAMT,EAAM8C,EAAMZ,EAAMW,GAAOnG,EAC/Cf,EAAI,IAAM4G,EAAM3B,EAAMyB,EAAMM,EAAMH,EAAMhC,GAAO9D,EAC/Cf,EAAI,IAAM0E,EAAMsC,EAAMpC,EAAMK,EAAMwB,EAAM5B,GAAO9D,EAC/Cf,EAAI,IAAMwE,EAAMU,EAAMT,EAAM0C,EAAMX,EAAMS,GAAOlG,EAC/Cf,EAAI,IAAMoE,EAAM+C,EAAM5C,EAAMW,EAAMqB,EAAMU,GAAOlG,EAC/Cf,EAAI,KAAO0G,EAAMK,EAAMJ,EAAM1B,EAAM4B,EAAM7B,GAAOjE,EAChDf,EAAI,KAAO2E,EAAMM,EAAMP,EAAMqC,EAAMN,EAAMzB,GAAOjE,EAChDf,EAAI,KAAOyE,EAAMyC,EAAM1C,EAAM4C,EAAM9C,EAAM2C,GAAOlG,EAChDf,EAAI,KAAOuE,EAAM6C,EAAMhD,EAAM8C,EAAM7C,EAAM4C,GAAOlG,EAChDf,EAAI,KAAO2G,EAAM9B,EAAM6B,EAAMI,EAAMF,EAAM5B,GAAOjE,EAChDf,EAAI,KAAO0E,EAAMoC,EAAMnC,EAAME,EAAMD,EAAMI,GAAOjE,EACzCf,GApBE,KA8BJ,SAASgB,EAAQhB,EAAKzB,GAC3B,IAAIgG,EAAMhG,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACRgI,EAAMhI,EAAE,GACRiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,GACR+F,EAAM/F,EAAE,GACRiI,EAAMjI,EAAE,GACRmG,EAAMnG,EAAE,GACRoG,EAAMpG,EAAE,GACRqG,EAAMrG,EAAE,IACRkI,EAAMlI,EAAE,IACRmI,EAAMnI,EAAE,IACRoI,EAAMpI,EAAE,IACRqI,EAAMrI,EAAE,IACRsI,EAAMtI,EAAE,IAiBZ,OAhBAyB,EAAI,GAAKyE,GAAOG,EAAMiC,EAAMJ,EAAMG,GAAOjC,GAAOL,EAAMuC,EAAML,EAAMI,GAAOD,GAAOrC,EAAMmC,EAAMD,EAAM5B,GAClG5E,EAAI,KAAOoE,GAAOQ,EAAMiC,EAAMJ,EAAMG,GAAOjC,GAAON,EAAMwC,EAAMN,EAAMK,GAAOD,GAAOtC,EAAMoC,EAAMF,EAAM3B,IACpG5E,EAAI,GAAKoE,GAAOE,EAAMuC,EAAML,EAAMI,GAAOnC,GAAOJ,EAAMwC,EAAMN,EAAMK,GAAOD,GAAOtC,EAAMmC,EAAMD,EAAMjC,GAClGtE,EAAI,KAAOoE,GAAOE,EAAMmC,EAAMD,EAAM5B,GAAOH,GAAOJ,EAAMoC,EAAMF,EAAM3B,GAAOD,GAAON,EAAMmC,EAAMD,EAAMjC,IACpGtE,EAAI,KAAOwE,GAAOI,EAAMiC,EAAMJ,EAAMG,GAAOlC,GAAOJ,EAAMuC,EAAML,EAAMI,GAAOF,GAAOpC,EAAMmC,EAAMD,EAAM5B,IACpG5E,EAAI,GAAKuE,GAAOK,EAAMiC,EAAMJ,EAAMG,GAAOlC,GAAOL,EAAMwC,EAAMN,EAAMK,GAAOF,GAAOrC,EAAMoC,EAAMF,EAAM3B,GAClG5E,EAAI,KAAOuE,GAAOD,EAAMuC,EAAML,EAAMI,GAAOpC,GAAOH,EAAMwC,EAAMN,EAAMK,GAAOF,GAAOrC,EAAMmC,EAAMD,EAAMjC,IACpGtE,EAAI,GAAKuE,GAAOD,EAAMmC,EAAMD,EAAM5B,GAAOJ,GAAOH,EAAMoC,EAAMF,EAAM3B,GAAOF,GAAOL,EAAMmC,EAAMD,EAAMjC,GAClGtE,EAAI,GAAKwE,GAAOG,EAAMkC,EAAMJ,EAAME,GAAOjC,GAAOD,EAAMoC,EAAML,EAAMG,GAAOD,GAAOjC,EAAMgC,EAAMD,EAAM7B,GAClG3E,EAAI,KAAOuE,GAAOI,EAAMkC,EAAMJ,EAAME,GAAOjC,GAAON,EAAMyC,EAAMN,EAAMI,GAAOD,GAAOtC,EAAMqC,EAAMF,EAAM5B,IACpG3E,EAAI,IAAMuE,GAAOE,EAAMoC,EAAML,EAAMG,GAAOnC,GAAOJ,EAAMyC,EAAMN,EAAMI,GAAOD,GAAOtC,EAAMoC,EAAMD,EAAM9B,GACnGzE,EAAI,MAAQuE,GAAOE,EAAMgC,EAAMD,EAAM7B,GAAOH,GAAOJ,EAAMqC,EAAMF,EAAM5B,GAAOD,GAAON,EAAMoC,EAAMD,EAAM9B,IACrGzE,EAAI,MAAQwE,GAAOG,EAAMiC,EAAMhC,EAAM+B,GAAOjC,GAAOD,EAAMmC,EAAMtC,EAAMqC,GAAOD,GAAOjC,EAAMG,EAAMN,EAAMK,IACrG3E,EAAI,IAAMuE,GAAOI,EAAMiC,EAAMhC,EAAM+B,GAAOjC,GAAON,EAAMwC,EAAMvC,EAAMsC,GAAOD,GAAOtC,EAAMQ,EAAMP,EAAMM,GACnG3E,EAAI,MAAQuE,GAAOE,EAAMmC,EAAMtC,EAAMqC,GAAOnC,GAAOJ,EAAMwC,EAAMvC,EAAMsC,GAAOD,GAAOtC,EAAME,EAAMD,EAAMI,IACrGzE,EAAI,IAAMuE,GAAOE,EAAMG,EAAMN,EAAMK,GAAOH,GAAOJ,EAAMQ,EAAMP,EAAMM,GAAOD,GAAON,EAAME,EAAMD,EAAMI,GAC5FzE,EASF,SAASiB,EAAY1C,GAC1B,IAAIgG,EAAMhG,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACRgI,EAAMhI,EAAE,GACRiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,GACR+F,EAAM/F,EAAE,GACRiI,EAAMjI,EAAE,GACRmG,EAAMnG,EAAE,GACRoG,EAAMpG,EAAE,GACRqG,EAAMrG,EAAE,IACRkI,EAAMlI,EAAE,IACRmI,EAAMnI,EAAE,IACRoI,EAAMpI,EAAE,IACRqI,EAAMrI,EAAE,IACRsI,EAAMtI,EAAE,IAcZ,OAbUgG,EAAME,EAAML,EAAMI,IAWlBI,EAAMiC,EAAMJ,EAAMG,IAVlBrC,EAAMD,EAAMD,EAAMG,IASlBG,EAAMkC,EAAMJ,EAAME,IARlBpC,EAAMiC,EAAMD,EAAM/B,IAOlBG,EAAMiC,EAAMhC,EAAM+B,IANlBvC,EAAME,EAAMD,EAAMI,IAKlBC,EAAMmC,EAAMJ,EAAMC,IAJlBtC,EAAMoC,EAAMD,EAAM9B,IAGlBC,EAAMkC,EAAMhC,EAAM8B,IAFlBrC,EAAMmC,EAAMD,EAAMjC,IAClBI,EAAMiC,EAAMhC,EAAM+B,GAkBvB,SAASxF,EAASlB,EAAKzB,EAAGE,GAC/B,IAAI8F,EAAMhG,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACRgI,EAAMhI,EAAE,GACRiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,GACR+F,EAAM/F,EAAE,GACRiI,EAAMjI,EAAE,GACRmG,EAAMnG,EAAE,GACRoG,EAAMpG,EAAE,GACRqG,EAAMrG,EAAE,IACRkI,EAAMlI,EAAE,IACRmI,EAAMnI,EAAE,IACRoI,EAAMpI,EAAE,IACRqI,EAAMrI,EAAE,IACRsI,EAAMtI,EAAE,IAER4C,EAAK1C,EAAE,GACP2C,EAAK3C,EAAE,GACP4C,EAAK5C,EAAE,GACP6C,EAAK7C,EAAE,GA6BX,OA5BAuB,EAAI,GAAKmB,EAAKoD,EAAMnD,EAAKoD,EAAMnD,EAAKqD,EAAMpD,EAAKoF,EAC/C1G,EAAI,GAAKmB,EAAKiD,EAAMhD,EAAKqD,EAAMpD,EAAKsD,EAAMrD,EAAKqF,EAC/C3G,EAAI,GAAKmB,EAAKkD,EAAMjD,EAAKkD,EAAMjD,EAAKuD,EAAMtD,EAAKsF,EAC/C5G,EAAI,GAAKmB,EAAKoF,EAAMnF,EAAKoF,EAAMnF,EAAKoF,EAAMnF,EAAKuF,EAC/C1F,EAAK1C,EAAE,GACP2C,EAAK3C,EAAE,GACP4C,EAAK5C,EAAE,GACP6C,EAAK7C,EAAE,GACPuB,EAAI,GAAKmB,EAAKoD,EAAMnD,EAAKoD,EAAMnD,EAAKqD,EAAMpD,EAAKoF,EAC/C1G,EAAI,GAAKmB,EAAKiD,EAAMhD,EAAKqD,EAAMpD,EAAKsD,EAAMrD,EAAKqF,EAC/C3G,EAAI,GAAKmB,EAAKkD,EAAMjD,EAAKkD,EAAMjD,EAAKuD,EAAMtD,EAAKsF,EAC/C5G,EAAI,GAAKmB,EAAKoF,EAAMnF,EAAKoF,EAAMnF,EAAKoF,EAAMnF,EAAKuF,EAC/C1F,EAAK1C,EAAE,GACP2C,EAAK3C,EAAE,GACP4C,EAAK5C,EAAE,IACP6C,EAAK7C,EAAE,IACPuB,EAAI,GAAKmB,EAAKoD,EAAMnD,EAAKoD,EAAMnD,EAAKqD,EAAMpD,EAAKoF,EAC/C1G,EAAI,GAAKmB,EAAKiD,EAAMhD,EAAKqD,EAAMpD,EAAKsD,EAAMrD,EAAKqF,EAC/C3G,EAAI,IAAMmB,EAAKkD,EAAMjD,EAAKkD,EAAMjD,EAAKuD,EAAMtD,EAAKsF,EAChD5G,EAAI,IAAMmB,EAAKoF,EAAMnF,EAAKoF,EAAMnF,EAAKoF,EAAMnF,EAAKuF,EAChD1F,EAAK1C,EAAE,IACP2C,EAAK3C,EAAE,IACP4C,EAAK5C,EAAE,IACP6C,EAAK7C,EAAE,IACPuB,EAAI,IAAMmB,EAAKoD,EAAMnD,EAAKoD,EAAMnD,EAAKqD,EAAMpD,EAAKoF,EAChD1G,EAAI,IAAMmB,EAAKiD,EAAMhD,EAAKqD,EAAMpD,EAAKsD,EAAMrD,EAAKqF,EAChD3G,EAAI,IAAMmB,EAAKkD,EAAMjD,EAAKkD,EAAMjD,EAAKuD,EAAMtD,EAAKsF,EAChD5G,EAAI,IAAMmB,EAAKoF,EAAMnF,EAAKoF,EAAMnF,EAAKoF,EAAMnF,EAAKuF,EACzC7G,EAWF,SAAS4D,EAAU5D,EAAKzB,EAAGsD,GAChC,IAGI0C,EAAKH,EAAKC,EAAKkC,EACf/B,EAAKC,EAAKH,EAAKkC,EACf9B,EAAKC,EAAKC,EAAK6B,EALf3O,EAAI+J,EAAE,GACN7J,EAAI6J,EAAE,GACNrJ,EAAIqJ,EAAE,GAyCV,OApCItD,IAAMyB,GACRA,EAAI,IAAMzB,EAAE,GAAKzG,EAAIyG,EAAE,GAAKvG,EAAIuG,EAAE,GAAK/F,EAAI+F,EAAE,IAC7CyB,EAAI,IAAMzB,EAAE,GAAKzG,EAAIyG,EAAE,GAAKvG,EAAIuG,EAAE,GAAK/F,EAAI+F,EAAE,IAC7CyB,EAAI,IAAMzB,EAAE,GAAKzG,EAAIyG,EAAE,GAAKvG,EAAIuG,EAAE,IAAM/F,EAAI+F,EAAE,IAC9CyB,EAAI,IAAMzB,EAAE,GAAKzG,EAAIyG,EAAE,GAAKvG,EAAIuG,EAAE,IAAM/F,EAAI+F,EAAE,MAE9CgG,EAAMhG,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACRgI,EAAMhI,EAAE,GACRiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,GACR+F,EAAM/F,EAAE,GACRiI,EAAMjI,EAAE,GACRmG,EAAMnG,EAAE,GACRoG,EAAMpG,EAAE,GACRqG,EAAMrG,EAAE,IACRkI,EAAMlI,EAAE,IACRyB,EAAI,GAAKuE,EACTvE,EAAI,GAAKoE,EACTpE,EAAI,GAAKqE,EACTrE,EAAI,GAAKuG,EACTvG,EAAI,GAAKwE,EACTxE,EAAI,GAAKyE,EACTzE,EAAI,GAAKsE,EACTtE,EAAI,GAAKwG,EACTxG,EAAI,GAAK0E,EACT1E,EAAI,GAAK2E,EACT3E,EAAI,IAAM4E,EACV5E,EAAI,IAAMyG,EACVzG,EAAI,IAAMuE,EAAMzM,EAAI0M,EAAMxM,EAAI0M,EAAMlM,EAAI+F,EAAE,IAC1CyB,EAAI,IAAMoE,EAAMtM,EAAI2M,EAAMzM,EAAI2M,EAAMnM,EAAI+F,EAAE,IAC1CyB,EAAI,IAAMqE,EAAMvM,EAAIwM,EAAMtM,EAAI4M,EAAMpM,EAAI+F,EAAE,IAC1CyB,EAAI,IAAMuG,EAAMzO,EAAI0O,EAAMxO,EAAIyO,EAAMjO,EAAI+F,EAAE,KAGrCyB,EAWF,SAASxD,EAAMwD,EAAKzB,EAAGsD,GAC5B,IAAI/J,EAAI+J,EAAE,GACN7J,EAAI6J,EAAE,GACNrJ,EAAIqJ,EAAE,GAiBV,OAhBA7B,EAAI,GAAKzB,EAAE,GAAKzG,EAChBkI,EAAI,GAAKzB,EAAE,GAAKzG,EAChBkI,EAAI,GAAKzB,EAAE,GAAKzG,EAChBkI,EAAI,GAAKzB,EAAE,GAAKzG,EAChBkI,EAAI,GAAKzB,EAAE,GAAKvG,EAChBgI,EAAI,GAAKzB,EAAE,GAAKvG,EAChBgI,EAAI,GAAKzB,EAAE,GAAKvG,EAChBgI,EAAI,GAAKzB,EAAE,GAAKvG,EAChBgI,EAAI,GAAKzB,EAAE,GAAK/F,EAChBwH,EAAI,GAAKzB,EAAE,GAAK/F,EAChBwH,EAAI,IAAMzB,EAAE,IAAM/F,EAClBwH,EAAI,IAAMzB,EAAE,IAAM/F,EAClBwH,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IACLyB,EAYF,SAASuB,EAAOvB,EAAKzB,EAAGiD,EAAK6G,GAClC,IAII5G,EAAGE,EAAGvC,EACNmF,EAAKH,EAAKC,EAAKkC,EACf/B,EAAKC,EAAKH,EAAKkC,EACf9B,EAAKC,EAAKC,EAAK6B,EACfzB,EAAKH,EAAKI,EACVC,EAAKJ,EAAKK,EACVC,EAAKL,EAAKM,EAVVvN,EAAIuQ,EAAK,GACTrQ,EAAIqQ,EAAK,GACT7P,EAAI6P,EAAK,GACTC,EAAMtK,KAAKY,MAAM9G,EAAGE,EAAGQ,GAS3B,OAAI8P,EAAMvJ,EAASpB,QACV,MAIT7F,GADAwQ,EAAM,EAAIA,EAEVtQ,GAAKsQ,EACL9P,GAAK8P,EACL7G,EAAIzD,KAAK0D,IAAIF,GAEbpC,EAAI,GADJuC,EAAI3D,KAAK4D,IAAIJ,IAEb+C,EAAMhG,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACRgI,EAAMhI,EAAE,GACRiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,GACR+F,EAAM/F,EAAE,GACRiI,EAAMjI,EAAE,GACRmG,EAAMnG,EAAE,GACRoG,EAAMpG,EAAE,GACRqG,EAAMrG,EAAE,IACRkI,EAAMlI,EAAE,IAERyG,EAAMlN,EAAIA,EAAIsH,EAAIuC,EAClBkD,EAAM7M,EAAIF,EAAIsH,EAAI5G,EAAIiJ,EACtBwD,EAAMzM,EAAIV,EAAIsH,EAAIpH,EAAIyJ,EACtByD,EAAMpN,EAAIE,EAAIoH,EAAI5G,EAAIiJ,EACtBqD,EAAM9M,EAAIA,EAAIoH,EAAIuC,EAClBwD,EAAM3M,EAAIR,EAAIoH,EAAItH,EAAI2J,EACtB2D,EAAMtN,EAAIU,EAAI4G,EAAIpH,EAAIyJ,EACtBsD,EAAM/M,EAAIQ,EAAI4G,EAAItH,EAAI2J,EACtB4D,EAAM7M,EAAIA,EAAI4G,EAAIuC,EAElB3B,EAAI,GAAKuE,EAAMS,EAAMR,EAAMK,EAAMH,EAAMO,EACvCjF,EAAI,GAAKoE,EAAMY,EAAMP,EAAMI,EAAMF,EAAMM,EACvCjF,EAAI,GAAKqE,EAAMW,EAAMV,EAAMO,EAAMD,EAAMK,EACvCjF,EAAI,GAAKuG,EAAMvB,EAAMwB,EAAM3B,EAAM4B,EAAMxB,EACvCjF,EAAI,GAAKuE,EAAMW,EAAMV,EAAMM,EAAMJ,EAAMS,EACvCnF,EAAI,GAAKoE,EAAMc,EAAMT,EAAMK,EAAMH,EAAMQ,EACvCnF,EAAI,GAAKqE,EAAMa,EAAMZ,EAAMQ,EAAMF,EAAMO,EACvCnF,EAAI,GAAKuG,EAAMrB,EAAMsB,EAAM1B,EAAM2B,EAAMtB,EACvCnF,EAAI,GAAKuE,EAAMa,EAAMZ,EAAMO,EAAML,EAAMW,EACvCrF,EAAI,GAAKoE,EAAMgB,EAAMX,EAAMM,EAAMJ,EAAMU,EACvCrF,EAAI,IAAMqE,EAAMe,EAAMd,EAAMS,EAAMH,EAAMS,EACxCrF,EAAI,IAAMuG,EAAMnB,EAAMoB,EAAMzB,EAAM0B,EAAMpB,EAEpC9G,IAAMyB,IAERA,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,KAGPyB,GAWF,SAASuI,EAAQvI,EAAKzB,EAAGiD,GAC9B,IAAIC,EAAIzD,KAAK0D,IAAIF,GACbG,EAAI3D,KAAK4D,IAAIJ,GACbgD,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,GACR+F,EAAM/F,EAAE,GACRiI,EAAMjI,EAAE,GACRmG,EAAMnG,EAAE,GACRoG,EAAMpG,EAAE,GACRqG,EAAMrG,EAAE,IACRkI,EAAMlI,EAAE,IAuBZ,OArBIA,IAAMyB,IAERA,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,KAIdyB,EAAI,GAAKwE,EAAM7C,EAAI+C,EAAMjD,EACzBzB,EAAI,GAAKyE,EAAM9C,EAAIgD,EAAMlD,EACzBzB,EAAI,GAAKsE,EAAM3C,EAAIiD,EAAMnD,EACzBzB,EAAI,GAAKwG,EAAM7E,EAAI8E,EAAMhF,EACzBzB,EAAI,GAAK0E,EAAM/C,EAAI6C,EAAM/C,EACzBzB,EAAI,GAAK2E,EAAMhD,EAAI8C,EAAMhD,EACzBzB,EAAI,IAAM4E,EAAMjD,EAAI2C,EAAM7C,EAC1BzB,EAAI,IAAMyG,EAAM9E,EAAI6E,EAAM/E,EACnBzB,EAWF,SAASwI,EAAQxI,EAAKzB,EAAGiD,GAC9B,IAAIC,EAAIzD,KAAK0D,IAAIF,GACbG,EAAI3D,KAAK4D,IAAIJ,GACb+C,EAAMhG,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACRgI,EAAMhI,EAAE,GACRmG,EAAMnG,EAAE,GACRoG,EAAMpG,EAAE,GACRqG,EAAMrG,EAAE,IACRkI,EAAMlI,EAAE,IAuBZ,OArBIA,IAAMyB,IAERA,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,KAIdyB,EAAI,GAAKuE,EAAM5C,EAAI+C,EAAMjD,EACzBzB,EAAI,GAAKoE,EAAMzC,EAAIgD,EAAMlD,EACzBzB,EAAI,GAAKqE,EAAM1C,EAAIiD,EAAMnD,EACzBzB,EAAI,GAAKuG,EAAM5E,EAAI8E,EAAMhF,EACzBzB,EAAI,GAAKuE,EAAM9C,EAAIiD,EAAM/C,EACzB3B,EAAI,GAAKoE,EAAM3C,EAAIkD,EAAMhD,EACzB3B,EAAI,IAAMqE,EAAM5C,EAAImD,EAAMjD,EAC1B3B,EAAI,IAAMuG,EAAM9E,EAAIgF,EAAM9E,EACnB3B,EAWF,SAASyI,EAAQzI,EAAKzB,EAAGiD,GAC9B,IAAIC,EAAIzD,KAAK0D,IAAIF,GACbG,EAAI3D,KAAK4D,IAAIJ,GACb+C,EAAMhG,EAAE,GACR6F,EAAM7F,EAAE,GACR8F,EAAM9F,EAAE,GACRgI,EAAMhI,EAAE,GACRiG,EAAMjG,EAAE,GACRkG,EAAMlG,EAAE,GACR+F,EAAM/F,EAAE,GACRiI,EAAMjI,EAAE,GAuBZ,OArBIA,IAAMyB,IAERA,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,IACZyB,EAAI,IAAMzB,EAAE,KAIdyB,EAAI,GAAKuE,EAAM5C,EAAI6C,EAAM/C,EACzBzB,EAAI,GAAKoE,EAAMzC,EAAI8C,EAAMhD,EACzBzB,EAAI,GAAKqE,EAAM1C,EAAI2C,EAAM7C,EACzBzB,EAAI,GAAKuG,EAAM5E,EAAI6E,EAAM/E,EACzBzB,EAAI,GAAKwE,EAAM7C,EAAI4C,EAAM9C,EACzBzB,EAAI,GAAKyE,EAAM9C,EAAIyC,EAAM3C,EACzBzB,EAAI,GAAKsE,EAAM3C,EAAI0C,EAAM5C,EACzBzB,EAAI,GAAKwG,EAAM7E,EAAI4E,EAAM9E,EAClBzB,EAcF,SAAS6D,EAAgB7D,EAAK6B,GAiBnC,OAhBA7B,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM6B,EAAE,GACZ7B,EAAI,IAAM6B,EAAE,GACZ7B,EAAI,IAAM6B,EAAE,GACZ7B,EAAI,IAAM,EACHA,EAcF,SAASiC,EAAYjC,EAAK6B,GAiB/B,OAhBA7B,EAAI,GAAK6B,EAAE,GACX7B,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK6B,EAAE,GACX7B,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM6B,EAAE,GACZ7B,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,EAeF,SAASgC,EAAahC,EAAKwB,EAAK6G,GACrC,IAII5G,EAAGE,EAAGvC,EAJNtH,EAAIuQ,EAAK,GACTrQ,EAAIqQ,EAAK,GACT7P,EAAI6P,EAAK,GACTC,EAAMtK,KAAKY,MAAM9G,EAAGE,EAAGQ,GAG3B,OAAI8P,EAAMvJ,EAASpB,QACV,MAIT7F,GADAwQ,EAAM,EAAIA,EAEVtQ,GAAKsQ,EACL9P,GAAK8P,EACL7G,EAAIzD,KAAK0D,IAAIF,GAEbpC,EAAI,GADJuC,EAAI3D,KAAK4D,IAAIJ,IAGbxB,EAAI,GAAKlI,EAAIA,EAAIsH,EAAIuC,EACrB3B,EAAI,GAAKhI,EAAIF,EAAIsH,EAAI5G,EAAIiJ,EACzBzB,EAAI,GAAKxH,EAAIV,EAAIsH,EAAIpH,EAAIyJ,EACzBzB,EAAI,GAAK,EACTA,EAAI,GAAKlI,EAAIE,EAAIoH,EAAI5G,EAAIiJ,EACzBzB,EAAI,GAAKhI,EAAIA,EAAIoH,EAAIuC,EACrB3B,EAAI,GAAKxH,EAAIR,EAAIoH,EAAItH,EAAI2J,EACzBzB,EAAI,GAAK,EACTA,EAAI,GAAKlI,EAAIU,EAAI4G,EAAIpH,EAAIyJ,EACzBzB,EAAI,GAAKhI,EAAIQ,EAAI4G,EAAItH,EAAI2J,EACzBzB,EAAI,IAAMxH,EAAIA,EAAI4G,EAAIuC,EACtB3B,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,GAcF,SAAS0I,EAAc1I,EAAKwB,GACjC,IAAIC,EAAIzD,KAAK0D,IAAIF,GACbG,EAAI3D,KAAK4D,IAAIJ,GAkBjB,OAhBAxB,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK2B,EACT3B,EAAI,GAAKyB,EACTzB,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAMyB,EACVzB,EAAI,IAAM2B,EACV3B,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,EAcF,SAAS2I,EAAc3I,EAAKwB,GACjC,IAAIC,EAAIzD,KAAK0D,IAAIF,GACbG,EAAI3D,KAAK4D,IAAIJ,GAkBjB,OAhBAxB,EAAI,GAAK2B,EACT3B,EAAI,GAAK,EACTA,EAAI,IAAMyB,EACVzB,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAKyB,EACTzB,EAAI,GAAK,EACTA,EAAI,IAAM2B,EACV3B,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,EAcF,SAAS4I,EAAc5I,EAAKwB,GACjC,IAAIC,EAAIzD,KAAK0D,IAAIF,GACbG,EAAI3D,KAAK4D,IAAIJ,GAkBjB,OAhBAxB,EAAI,GAAK2B,EACT3B,EAAI,GAAKyB,EACTzB,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAMyB,EACVzB,EAAI,GAAK2B,EACT3B,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,EAkBF,SAAS6I,EAAwB7I,EAAKwF,EAAG3D,GAE9C,IAAI/J,EAAI0N,EAAE,GACNxN,EAAIwN,EAAE,GACNhN,EAAIgN,EAAE,GACNC,EAAID,EAAE,GACNE,EAAK5N,EAAIA,EACT6N,EAAK3N,EAAIA,EACT4N,EAAKpN,EAAIA,EACTqN,EAAK/N,EAAI4N,EACToD,EAAKhR,EAAI6N,EACToD,EAAKjR,EAAI8N,EACTG,EAAK/N,EAAI2N,EACTqD,EAAKhR,EAAI4N,EACTM,EAAK1N,EAAIoN,EACTO,EAAKV,EAAIC,EACTU,EAAKX,EAAIE,EACTU,EAAKZ,EAAIG,EAiBb,OAhBA5F,EAAI,GAAK,GAAK+F,EAAKG,GACnBlG,EAAI,GAAK8I,EAAKzC,EACdrG,EAAI,GAAK+I,EAAK3C,EACdpG,EAAI,GAAK,EACTA,EAAI,GAAK8I,EAAKzC,EACdrG,EAAI,GAAK,GAAK6F,EAAKK,GACnBlG,EAAI,GAAKgJ,EAAK7C,EACdnG,EAAI,GAAK,EACTA,EAAI,GAAK+I,EAAK3C,EACdpG,EAAI,GAAKgJ,EAAK7C,EACdnG,EAAI,IAAM,GAAK6F,EAAKE,GACpB/F,EAAI,IAAM,EACVA,EAAI,IAAM6B,EAAE,GACZ7B,EAAI,IAAM6B,EAAE,GACZ7B,EAAI,IAAM6B,EAAE,GACZ7B,EAAI,IAAM,EACHA,EAUF,SAASiJ,EAAUjJ,EAAKzB,GAC7B,IAAI2K,EAAc,IAAInK,EAASnB,WAAW,GACtCuL,GAAM5K,EAAE,GACR6K,GAAM7K,EAAE,GACR8K,GAAM9K,EAAE,GACR+K,EAAK/K,EAAE,GACPgL,EAAKhL,EAAE,GACPiL,EAAKjL,EAAE,GACPkL,EAAKlL,EAAE,GACPmL,EAAKnL,EAAE,GACPoL,EAAYR,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAanD,OAXIK,EAAY,GACdT,EAAY,GAA+C,GAAzCK,EAAKD,EAAKI,EAAKP,EAAKK,EAAKH,EAAKI,EAAKL,GAAUO,EAC/DT,EAAY,GAA+C,GAAzCM,EAAKF,EAAKI,EAAKN,EAAKK,EAAKN,EAAKI,EAAKF,GAAUM,EAC/DT,EAAY,GAA+C,GAAzCO,EAAKH,EAAKI,EAAKL,EAAKE,EAAKH,EAAKI,EAAKL,GAAUQ,IAE/DT,EAAY,GAA+C,GAAzCK,EAAKD,EAAKI,EAAKP,EAAKK,EAAKH,EAAKI,EAAKL,GACrDF,EAAY,GAA+C,GAAzCM,EAAKF,EAAKI,EAAKN,EAAKK,EAAKN,EAAKI,EAAKF,GACrDH,EAAY,GAA+C,GAAzCO,EAAKH,EAAKI,EAAKL,EAAKE,EAAKH,EAAKI,EAAKL,IAGvDN,EAAwB7I,EAAKzB,EAAG2K,GACzBlJ,EAYF,SAAS4J,EAAe5J,EAAK6J,GAIlC,OAHA7J,EAAI,GAAK6J,EAAI,IACb7J,EAAI,GAAK6J,EAAI,IACb7J,EAAI,GAAK6J,EAAI,IACN7J,EAaF,SAAS8J,EAAW9J,EAAK6J,GAC9B,IAAIrJ,EAAMqJ,EAAI,GACV7F,EAAM6F,EAAI,GACV9B,EAAM8B,EAAI,GACV3F,EAAM2F,EAAI,GACV1F,EAAM0F,EAAI,GACV7B,EAAM6B,EAAI,GACV3B,EAAM2B,EAAI,GACV1B,EAAM0B,EAAI,GACVzB,EAAMyB,EAAI,IAId,OAHA7J,EAAI,GAAKhC,KAAKY,MAAM4B,EAAKwD,EAAK+D,GAC9B/H,EAAI,GAAKhC,KAAKY,MAAMsF,EAAKC,EAAK6D,GAC9BhI,EAAI,GAAKhC,KAAKY,MAAMsJ,EAAKC,EAAKC,GACvBpI,EAYF,SAAS+J,EAAY/J,EAAK6J,GAC/B,IAAIG,EAAU,IAAIjL,EAASnB,WAAW,GACtCkM,EAAWE,EAASH,GACpB,IAAII,EAAM,EAAID,EAAQ,GAClBE,EAAM,EAAIF,EAAQ,GAClBG,EAAM,EAAIH,EAAQ,GAClBI,EAAOP,EAAI,GAAKI,EAChBI,EAAOR,EAAI,GAAKK,EAChBI,EAAOT,EAAI,GAAKM,EAChBI,EAAOV,EAAI,GAAKI,EAChBO,EAAOX,EAAI,GAAKK,EAChBO,EAAOZ,EAAI,GAAKM,EAChBO,EAAOb,EAAI,GAAKI,EAChBU,EAAOd,EAAI,GAAKK,EAChBU,EAAOf,EAAI,IAAMM,EACjBU,EAAQT,EAAOI,EAAOI,EACtBE,EAAI,EA4BR,OA1BID,EAAQ,GACVC,EAA6B,EAAzB9M,KAAKc,KAAK+L,EAAQ,GACtB7K,EAAI,GAAK,IAAO8K,EAChB9K,EAAI,IAAMyK,EAAOE,GAAQG,EACzB9K,EAAI,IAAM0K,EAAOJ,GAAQQ,EACzB9K,EAAI,IAAMqK,EAAOE,GAAQO,GAChBV,EAAOI,GAAQJ,EAAOQ,GAC/BE,EAA0C,EAAtC9M,KAAKc,KAAK,EAAMsL,EAAOI,EAAOI,GAClC5K,EAAI,IAAMyK,EAAOE,GAAQG,EACzB9K,EAAI,GAAK,IAAO8K,EAChB9K,EAAI,IAAMqK,EAAOE,GAAQO,EACzB9K,EAAI,IAAM0K,EAAOJ,GAAQQ,GAChBN,EAAOI,GAChBE,EAA0C,EAAtC9M,KAAKc,KAAK,EAAM0L,EAAOJ,EAAOQ,GAClC5K,EAAI,IAAM0K,EAAOJ,GAAQQ,EACzB9K,EAAI,IAAMqK,EAAOE,GAAQO,EACzB9K,EAAI,GAAK,IAAO8K,EAChB9K,EAAI,IAAMyK,EAAOE,GAAQG,IAEzBA,EAA0C,EAAtC9M,KAAKc,KAAK,EAAM8L,EAAOR,EAAOI,GAClCxK,EAAI,IAAMqK,EAAOE,GAAQO,EACzB9K,EAAI,IAAM0K,EAAOJ,GAAQQ,EACzB9K,EAAI,IAAMyK,EAAOE,GAAQG,EACzB9K,EAAI,GAAK,IAAO8K,GAGX9K,EAoBF,SAAS+K,EAA6B/K,EAAKwF,EAAG3D,EAAGJ,GAEtD,IAAI3J,EAAI0N,EAAE,GACNxN,EAAIwN,EAAE,GACNhN,EAAIgN,EAAE,GACNC,EAAID,EAAE,GACNE,EAAK5N,EAAIA,EACT6N,EAAK3N,EAAIA,EACT4N,EAAKpN,EAAIA,EACTqN,EAAK/N,EAAI4N,EACToD,EAAKhR,EAAI6N,EACToD,EAAKjR,EAAI8N,EACTG,EAAK/N,EAAI2N,EACTqD,EAAKhR,EAAI4N,EACTM,EAAK1N,EAAIoN,EACTO,EAAKV,EAAIC,EACTU,EAAKX,EAAIE,EACTU,EAAKZ,EAAIG,EACToF,EAAKvJ,EAAE,GACPwJ,EAAKxJ,EAAE,GACPyJ,EAAKzJ,EAAE,GAiBX,OAhBAzB,EAAI,IAAM,GAAK+F,EAAKG,IAAO8E,EAC3BhL,EAAI,IAAM8I,EAAKzC,GAAM2E,EACrBhL,EAAI,IAAM+I,EAAK3C,GAAM4E,EACrBhL,EAAI,GAAK,EACTA,EAAI,IAAM8I,EAAKzC,GAAM4E,EACrBjL,EAAI,IAAM,GAAK6F,EAAKK,IAAO+E,EAC3BjL,EAAI,IAAMgJ,EAAK7C,GAAM8E,EACrBjL,EAAI,GAAK,EACTA,EAAI,IAAM+I,EAAK3C,GAAM8E,EACrBlL,EAAI,IAAMgJ,EAAK7C,GAAM+E,EACrBlL,EAAI,KAAO,GAAK6F,EAAKE,IAAOmF,EAC5BlL,EAAI,IAAM,EACVA,EAAI,IAAM6B,EAAE,GACZ7B,EAAI,IAAM6B,EAAE,GACZ7B,EAAI,IAAM6B,EAAE,GACZ7B,EAAI,IAAM,EACHA,EAuBF,SAASmL,EAAmCnL,EAAKwF,EAAG3D,EAAGJ,EAAG2J,GAE/D,IAAItT,EAAI0N,EAAE,GACNxN,EAAIwN,EAAE,GACNhN,EAAIgN,EAAE,GACNC,EAAID,EAAE,GACNE,EAAK5N,EAAIA,EACT6N,EAAK3N,EAAIA,EACT4N,EAAKpN,EAAIA,EACTqN,EAAK/N,EAAI4N,EACToD,EAAKhR,EAAI6N,EACToD,EAAKjR,EAAI8N,EACTG,EAAK/N,EAAI2N,EACTqD,EAAKhR,EAAI4N,EACTM,EAAK1N,EAAIoN,EACTO,EAAKV,EAAIC,EACTU,EAAKX,EAAIE,EACTU,EAAKZ,EAAIG,EACToF,EAAKvJ,EAAE,GACPwJ,EAAKxJ,EAAE,GACPyJ,EAAKzJ,EAAE,GACP4J,EAAKD,EAAE,GACPE,EAAKF,EAAE,GACPG,EAAKH,EAAE,GACPI,GAAQ,GAAKzF,EAAKG,IAAO8E,EACzBS,GAAQ3C,EAAKzC,GAAM2E,EACnBU,GAAQ3C,EAAK3C,GAAM4E,EACnBW,GAAQ7C,EAAKzC,GAAM4E,EACnBW,GAAQ,GAAK/F,EAAKK,IAAO+E,EACzBY,GAAQ7C,EAAK7C,GAAM8E,EACnBa,GAAQ/C,EAAK3C,GAAM8E,EACnBa,GAAQ/C,EAAK7C,GAAM+E,EACnBc,GAAS,GAAKnG,EAAKE,IAAOmF,EAiB9B,OAhBAlL,EAAI,GAAKwL,EACTxL,EAAI,GAAKyL,EACTzL,EAAI,GAAK0L,EACT1L,EAAI,GAAK,EACTA,EAAI,GAAK2L,EACT3L,EAAI,GAAK4L,EACT5L,EAAI,GAAK6L,EACT7L,EAAI,GAAK,EACTA,EAAI,GAAK8L,EACT9L,EAAI,GAAK+L,EACT/L,EAAI,IAAMgM,EACVhM,EAAI,IAAM,EACVA,EAAI,IAAM6B,EAAE,GAAKwJ,GAAMG,EAAOH,EAAKM,EAAOL,EAAKQ,EAAOP,GACtDvL,EAAI,IAAM6B,EAAE,GAAKyJ,GAAMG,EAAOJ,EAAKO,EAAON,EAAKS,EAAOR,GACtDvL,EAAI,IAAM6B,EAAE,GAAK0J,GAAMG,EAAOL,EAAKQ,EAAOP,EAAKU,EAAQT,GACvDvL,EAAI,IAAM,EACHA,EAWF,SAASuF,EAASvF,EAAKwF,GAC5B,IAAI1N,EAAI0N,EAAE,GACNxN,EAAIwN,EAAE,GACNhN,EAAIgN,EAAE,GACNC,EAAID,EAAE,GACNE,EAAK5N,EAAIA,EACT6N,EAAK3N,EAAIA,EACT4N,EAAKpN,EAAIA,EACTqN,EAAK/N,EAAI4N,EACTI,EAAK9N,EAAI0N,EACTK,EAAK/N,EAAI2N,EACTK,EAAKxN,EAAIkN,EACTO,EAAKzN,EAAImN,EACTO,EAAK1N,EAAIoN,EACTO,EAAKV,EAAIC,EACTU,EAAKX,EAAIE,EACTU,EAAKZ,EAAIG,EAiBb,OAhBA5F,EAAI,GAAK,EAAI+F,EAAKG,EAClBlG,EAAI,GAAK8F,EAAKO,EACdrG,EAAI,GAAKgG,EAAKI,EACdpG,EAAI,GAAK,EACTA,EAAI,GAAK8F,EAAKO,EACdrG,EAAI,GAAK,EAAI6F,EAAKK,EAClBlG,EAAI,GAAKiG,EAAKE,EACdnG,EAAI,GAAK,EACTA,EAAI,GAAKgG,EAAKI,EACdpG,EAAI,GAAKiG,EAAKE,EACdnG,EAAI,IAAM,EAAI6F,EAAKE,EACnB/F,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,EAeF,SAASiM,EAAQjM,EAAKkM,EAAMC,EAAOC,EAAQC,EAAKC,EAAMC,GAC3D,IAAIC,EAAK,GAAKL,EAAQD,GAClBO,EAAK,GAAKJ,EAAMD,GAChBM,EAAK,GAAKJ,EAAOC,GAiBrB,OAhBAvM,EAAI,GAAY,EAAPsM,EAAWE,EACpBxM,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAY,EAAPsM,EAAWG,EACpBzM,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAMmM,EAAQD,GAAQM,EAC1BxM,EAAI,IAAMqM,EAAMD,GAAUK,EAC1BzM,EAAI,KAAOuM,EAAMD,GAAQI,EACzB1M,EAAI,KAAO,EACXA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAMuM,EAAMD,EAAO,EAAII,EAC3B1M,EAAI,IAAM,EACHA,EAgBF,SAAS2M,EAAc3M,EAAK4M,EAAMC,EAAQP,EAAMC,GACrD,IACIG,EADAI,EAAI,EAAM9O,KAAK+O,IAAIH,EAAO,GA0B9B,OAxBA5M,EAAI,GAAK8M,EAAID,EACb7M,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK8M,EACT9M,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,KAAO,EACXA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EAEC,MAAPuM,GAAeA,IAAQS,EAAAA,GACzBN,EAAK,GAAKJ,EAAOC,GACjBvM,EAAI,KAAOuM,EAAMD,GAAQI,EACzB1M,EAAI,IAAM,EAAIuM,EAAMD,EAAOI,IAE3B1M,EAAI,KAAO,EACXA,EAAI,KAAO,EAAIsM,GAGVtM,EAOF,IAAIiN,EAAW/V,QAAA+V,YAAGN,EAelB,SAASO,EAAclN,EAAK4M,EAAMC,EAAQP,EAAMC,GACrD,IACIG,EADAI,EAAI,EAAM9O,KAAK+O,IAAIH,EAAO,GA0B9B,OAxBA5M,EAAI,GAAK8M,EAAID,EACb7M,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK8M,EACT9M,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,KAAO,EACXA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EAEC,MAAPuM,GAAeA,IAAQS,EAAAA,GACzBN,EAAK,GAAKJ,EAAOC,GACjBvM,EAAI,IAAMuM,EAAMG,EAChB1M,EAAI,IAAMuM,EAAMD,EAAOI,IAEvB1M,EAAI,KAAO,EACXA,EAAI,KAAOsM,GAGNtM,EAcF,SAASmN,EAA2BnN,EAAKoN,EAAKd,EAAMC,GACzD,IAAIc,EAAQrP,KAAK+O,IAAIK,EAAIE,UAAYtP,KAAKK,GAAK,KAC3CkP,EAAUvP,KAAK+O,IAAIK,EAAII,YAAcxP,KAAKK,GAAK,KAC/CoP,EAAUzP,KAAK+O,IAAIK,EAAIM,YAAc1P,KAAKK,GAAK,KAC/CsP,EAAW3P,KAAK+O,IAAIK,EAAIQ,aAAe5P,KAAKK,GAAK,KACjDwP,EAAS,GAAOJ,EAAUE,GAC1BG,EAAS,GAAOT,EAAQE,GAiB5B,OAhBAvN,EAAI,GAAK6N,EACT7N,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK8N,EACT9N,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,KAAQyN,EAAUE,GAAYE,EAAS,GAC3C7N,EAAI,IAAMqN,EAAQE,GAAWO,EAAS,GACtC9N,EAAI,IAAMuM,GAAOD,EAAOC,GACxBvM,EAAI,KAAO,EACXA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAMuM,EAAMD,GAAQA,EAAOC,GAC/BvM,EAAI,IAAM,EACHA,EAiBF,SAAS+N,EAAQ/N,EAAKkM,EAAMC,EAAOC,EAAQC,EAAKC,EAAMC,GAC3D,IAAIyB,EAAK,GAAK9B,EAAOC,GACjB8B,EAAK,GAAK7B,EAASC,GACnBK,EAAK,GAAKJ,EAAOC,GAiBrB,OAhBAvM,EAAI,IAAM,EAAIgO,EACdhO,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EAAIiO,EACdjO,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EAAI0M,EACd1M,EAAI,IAAM,EACVA,EAAI,KAAOkM,EAAOC,GAAS6B,EAC3BhO,EAAI,KAAOqM,EAAMD,GAAU6B,EAC3BjO,EAAI,KAAOuM,EAAMD,GAAQI,EACzB1M,EAAI,IAAM,EACHA,EAOF,IAAIkO,EAAKhX,QAAAgX,MAAGH,EAgBZ,SAASI,EAAQnO,EAAKkM,EAAMC,EAAOC,EAAQC,EAAKC,EAAMC,GAC3D,IAAIyB,EAAK,GAAK9B,EAAOC,GACjB8B,EAAK,GAAK7B,EAASC,GACnBK,EAAK,GAAKJ,EAAOC,GAiBrB,OAhBAvM,EAAI,IAAM,EAAIgO,EACdhO,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EAAIiO,EACdjO,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM0M,EACV1M,EAAI,IAAM,EACVA,EAAI,KAAOkM,EAAOC,GAAS6B,EAC3BhO,EAAI,KAAOqM,EAAMD,GAAU6B,EAC3BjO,EAAI,IAAMsM,EAAOI,EACjB1M,EAAI,IAAM,EACHA,EAaF,SAASoO,EAAOpO,EAAKqO,EAAKC,EAAQC,GACvC,IAAIC,EAAIC,EAAI/I,EAAIgJ,EAAIC,EAAIhJ,EAAIiJ,EAAIC,EAAIjJ,EAAI0C,EACpCwG,EAAOT,EAAI,GACXU,EAAOV,EAAI,GACXW,EAAOX,EAAI,GACXY,EAAMV,EAAG,GACTW,EAAMX,EAAG,GACTY,EAAMZ,EAAG,GACTa,EAAUd,EAAO,GACjBe,EAAUf,EAAO,GACjBgB,EAAUhB,EAAO,GAErB,OAAItQ,KAAKU,IAAIoQ,EAAOM,GAAWrQ,EAASpB,SAAWK,KAAKU,IAAIqQ,EAAOM,GAAWtQ,EAASpB,SAAWK,KAAKU,IAAIsQ,EAAOM,GAAWvQ,EAASpB,QAC7HwC,EAASH,IAGlB4O,EAAKE,EAAOM,EACZP,EAAKE,EAAOM,EACZzJ,EAAKoJ,EAAOM,EAKZd,EAAKU,GADLtJ,GAHA0C,EAAM,EAAItK,KAAKY,MAAMgQ,EAAIC,EAAIjJ,IAIbuJ,GAFhBN,GAAMvG,GAGNmG,EAAKU,GAJLP,GAAMtG,GAIU2G,EAAMrJ,EACtBF,EAAKuJ,EAAMJ,EAAKK,EAAMN,GACtBtG,EAAMtK,KAAKY,MAAM4P,EAAIC,EAAI/I,KAQvB8I,GADAlG,EAAM,EAAIA,EAEVmG,GAAMnG,EACN5C,GAAM4C,IAPNkG,EAAK,EACLC,EAAK,EACL/I,EAAK,GAQPgJ,EAAKG,EAAKnJ,EAAKE,EAAK6I,EACpBE,EAAK/I,EAAK4I,EAAKI,EAAKlJ,EACpBC,EAAKiJ,EAAKH,EAAKI,EAAKL,GACpBlG,EAAMtK,KAAKY,MAAM8P,EAAIC,EAAIhJ,KAQvB+I,GADApG,EAAM,EAAIA,EAEVqG,GAAMrG,EACN3C,GAAM2C,IAPNoG,EAAK,EACLC,EAAK,EACLhJ,EAAK,GAQP3F,EAAI,GAAKwO,EACTxO,EAAI,GAAK0O,EACT1O,EAAI,GAAK4O,EACT5O,EAAI,GAAK,EACTA,EAAI,GAAKyO,EACTzO,EAAI,GAAK2O,EACT3O,EAAI,GAAK6O,EACT7O,EAAI,GAAK,EACTA,EAAI,GAAK0F,EACT1F,EAAI,GAAK2F,EACT3F,EAAI,IAAM4F,EACV5F,EAAI,IAAM,EACVA,EAAI,MAAQwO,EAAKM,EAAOL,EAAKM,EAAOrJ,EAAKsJ,GACzChP,EAAI,MAAQ0O,EAAKI,EAAOH,EAAKI,EAAOpJ,EAAKqJ,GACzChP,EAAI,MAAQ4O,EAAKE,EAAOD,EAAKE,EAAOnJ,EAAKoJ,GACzChP,EAAI,IAAM,EACHA,GAYF,SAASuP,EAASvP,EAAKqO,EAAKmB,EAAQjB,GACzC,IAAIO,EAAOT,EAAI,GACXU,EAAOV,EAAI,GACXW,EAAOX,EAAI,GACXY,EAAMV,EAAG,GACTW,EAAMX,EAAG,GACTY,EAAMZ,EAAG,GACTK,EAAKE,EAAOU,EAAO,GACnBX,EAAKE,EAAOS,EAAO,GACnB5J,EAAKoJ,EAAOQ,EAAO,GACnBlH,EAAMsG,EAAKA,EAAKC,EAAKA,EAAKjJ,EAAKA,EAE/B0C,EAAM,IAERsG,GADAtG,EAAM,EAAItK,KAAKc,KAAKwJ,GAEpBuG,GAAMvG,EACN1C,GAAM0C,GAGR,IAAIkG,EAAKU,EAAMtJ,EAAKuJ,EAAMN,EACtBJ,EAAKU,EAAMP,EAAKK,EAAMrJ,EACtBF,EAAKuJ,EAAMJ,EAAKK,EAAMN,EA0B1B,OAzBAtG,EAAMkG,EAAKA,EAAKC,EAAKA,EAAK/I,EAAKA,GAErB,IAER8I,GADAlG,EAAM,EAAItK,KAAKc,KAAKwJ,GAEpBmG,GAAMnG,EACN5C,GAAM4C,GAGRtI,EAAI,GAAKwO,EACTxO,EAAI,GAAKyO,EACTzO,EAAI,GAAK0F,EACT1F,EAAI,GAAK,EACTA,EAAI,GAAK6O,EAAKnJ,EAAKE,EAAK6I,EACxBzO,EAAI,GAAK4F,EAAK4I,EAAKI,EAAKlJ,EACxB1F,EAAI,GAAK4O,EAAKH,EAAKI,EAAKL,EACxBxO,EAAI,GAAK,EACTA,EAAI,GAAK4O,EACT5O,EAAI,GAAK6O,EACT7O,EAAI,IAAM4F,EACV5F,EAAI,IAAM,EACVA,EAAI,IAAM8O,EACV9O,EAAI,IAAM+O,EACV/O,EAAI,IAAMgP,EACVhP,EAAI,IAAM,EACHA,EASF,SAASkC,EAAI3D,GAClB,MAAO,QAAUA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,IAAM,KAAOA,EAAE,IAAM,KAAOA,EAAE,IAAM,KAAOA,EAAE,IAAM,KAAOA,EAAE,IAAM,KAAOA,EAAE,IAAM,IAS3O,SAAS4D,EAAK5D,GACnB,OAAOP,KAAKY,MAAML,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,IAAKA,EAAE,IAAKA,EAAE,IAAKA,EAAE,IAAKA,EAAE,IAAKA,EAAE,KAW9G,SAASiE,EAAIxC,EAAKzB,EAAGE,GAiB1B,OAhBAuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,IAAMzB,EAAE,IAAME,EAAE,IACpBuB,EAAI,IAAMzB,EAAE,IAAME,EAAE,IACpBuB,EAAI,IAAMzB,EAAE,IAAME,EAAE,IACpBuB,EAAI,IAAMzB,EAAE,IAAME,EAAE,IACpBuB,EAAI,IAAMzB,EAAE,IAAME,EAAE,IACpBuB,EAAI,IAAMzB,EAAE,IAAME,EAAE,IACbuB,EAWF,SAASyC,EAASzC,EAAKzB,EAAGE,GAiB/B,OAhBAuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,IAAMzB,EAAE,IAAME,EAAE,IACpBuB,EAAI,IAAMzB,EAAE,IAAME,EAAE,IACpBuB,EAAI,IAAMzB,EAAE,IAAME,EAAE,IACpBuB,EAAI,IAAMzB,EAAE,IAAME,EAAE,IACpBuB,EAAI,IAAMzB,EAAE,IAAME,EAAE,IACpBuB,EAAI,IAAMzB,EAAE,IAAME,EAAE,IACbuB,EAWF,SAAS2C,EAAe3C,EAAKzB,EAAGE,GAiBrC,OAhBAuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,IAAMzB,EAAE,IAAME,EAClBuB,EAAI,IAAMzB,EAAE,IAAME,EAClBuB,EAAI,IAAMzB,EAAE,IAAME,EAClBuB,EAAI,IAAMzB,EAAE,IAAME,EAClBuB,EAAI,IAAMzB,EAAE,IAAME,EAClBuB,EAAI,IAAMzB,EAAE,IAAME,EACXuB,EAYF,SAAS4C,EAAqB5C,EAAKzB,EAAGE,EAAGjC,GAiB9C,OAhBAwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,IAAMzB,EAAE,IAAME,EAAE,IAAMjC,EAC1BwD,EAAI,IAAMzB,EAAE,IAAME,EAAE,IAAMjC,EAC1BwD,EAAI,IAAMzB,EAAE,IAAME,EAAE,IAAMjC,EAC1BwD,EAAI,IAAMzB,EAAE,IAAME,EAAE,IAAMjC,EAC1BwD,EAAI,IAAMzB,EAAE,IAAME,EAAE,IAAMjC,EAC1BwD,EAAI,IAAMzB,EAAE,IAAME,EAAE,IAAMjC,EACnBwD,EAUF,SAAS0C,EAAYnE,EAAGE,GAC7B,OAAOF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,MAAQE,EAAE,KAAOF,EAAE,MAAQE,EAAE,KAAOF,EAAE,MAAQE,EAAE,KAAOF,EAAE,MAAQE,EAAE,KAAOF,EAAE,MAAQE,EAAE,KAAOF,EAAE,MAAQE,EAAE,IAUvR,SAASD,EAAOD,EAAGE,GACxB,IAAImC,EAAKrC,EAAE,GACPmC,EAAKnC,EAAE,GACPsC,EAAKtC,EAAE,GACPuC,EAAKvC,EAAE,GACPiF,EAAKjF,EAAE,GACPkF,EAAKlF,EAAE,GACPiJ,EAAKjJ,EAAE,GACPkJ,EAAKlJ,EAAE,GACPmJ,EAAKnJ,EAAE,GACPkR,EAAKlR,EAAE,GACPiG,EAAMjG,EAAE,IACRkG,EAAMlG,EAAE,IACR+F,EAAM/F,EAAE,IACRiI,EAAMjI,EAAE,IACRmR,EAAMnR,EAAE,IACRoR,EAAMpR,EAAE,IACR4C,EAAK1C,EAAE,GACP2C,EAAK3C,EAAE,GACP4C,EAAK5C,EAAE,GACP6C,EAAK7C,EAAE,GACPiF,EAAKjF,EAAE,GACPkF,EAAKlF,EAAE,GACPkJ,EAAKlJ,EAAE,GACPmJ,EAAKnJ,EAAE,GACPoJ,EAAKpJ,EAAE,GACPmR,EAAKnR,EAAE,GACPyG,EAAMzG,EAAE,IACRqG,EAAMrG,EAAE,IACR0G,EAAM1G,EAAE,IACRoR,EAAMpR,EAAE,IACRqR,EAAMrR,EAAE,IACRsR,EAAMtR,EAAE,IACZ,OAAOT,KAAKU,IAAIkC,EAAKO,IAAOpC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIkC,GAAK5C,KAAKU,IAAIyC,KAAQnD,KAAKU,IAAIgC,EAAKU,IAAOrC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIgC,GAAK1C,KAAKU,IAAI0C,KAAQpD,KAAKU,IAAImC,EAAKQ,IAAOtC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAImC,GAAK7C,KAAKU,IAAI2C,KAAQrD,KAAKU,IAAIoC,EAAKQ,IAAOvC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIoC,GAAK9C,KAAKU,IAAI4C,KAAQtD,KAAKU,IAAI8E,EAAKE,IAAO3E,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAI8E,GAAKxF,KAAKU,IAAIgF,KAAQ1F,KAAKU,IAAI+E,EAAKE,IAAO5E,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAI+E,GAAKzF,KAAKU,IAAIiF,KAAQ3F,KAAKU,IAAI8I,EAAKG,IAAO5I,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAI8I,GAAKxJ,KAAKU,IAAIiJ,KAAQ3J,KAAKU,IAAI+I,EAAKG,IAAO7I,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAI+I,GAAKzJ,KAAKU,IAAIkJ,KAAQ5J,KAAKU,IAAIgJ,EAAKG,IAAO9I,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIgJ,GAAK1J,KAAKU,IAAImJ,KAAQ7J,KAAKU,IAAI+Q,EAAKG,IAAO7Q,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAI+Q,GAAKzR,KAAKU,IAAIkR,KAAQ5R,KAAKU,IAAI8F,EAAMU,IAAQnG,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAI8F,GAAMxG,KAAKU,IAAIwG,KAASlH,KAAKU,IAAI+F,EAAMK,IAAQ/F,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAI+F,GAAMzG,KAAKU,IAAIoG,KAAS9G,KAAKU,IAAI4F,EAAMa,IAAQpG,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAI4F,GAAMtG,KAAKU,IAAIyG,KAASnH,KAAKU,IAAI8H,EAAMqJ,IAAQ9Q,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAI8H,GAAMxI,KAAKU,IAAImR,KAAS7R,KAAKU,IAAIgR,EAAMI,IAAQ/Q,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIgR,GAAM1R,KAAKU,IAAIoR,KAAS9R,KAAKU,IAAIiR,EAAMI,IAAQhR,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIiR,GAAM3R,KAAKU,IAAIqR,IAOj2C,IAAIlN,EAAG3L,QAAA2L,IAAG3B,EAMN4B,EAAG5L,QAAA4L,IAAGL;;ACnmCd,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,IAAA,EAAA,QAAA,MAAA,EAAA,QAAA,OAAA,EAAA,QAAA,KAAA,EAAA,QAAA,MAAA,EAAA,QAAA,KAAA,EAAA,QAAA,OAAA,EAAA,QAAA,MAAA,EAAA,QAAA,UAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,OAAA,EAAA,QAAA,IAAA,EAAA,QAAA,OAAA,EAAA,QAAA,YAAA,EAAA,QAAA,MAAA,EAAA,QAAA,aAAA,EAAA,QAAA,WAAA,EAAA,QAAA,QAAA,EAAA,QAAA,QAAA,EAAA,QAAA,SAAA,EAAA,QAAA,OAAA,EAAA,QAAA,KAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,OAAA,EAAA,QAAA,UAAA,EAAA,QAAA,OAAA,EAAA,QAAA,QAAA,EAAA,QAAA,QAAA,EAAA,QAAA,QAAA,EAAA,QAAA,MAAA,EAAA,QAAA,MAAA,EAAA,QAAA,YAAA,EAAA,QAAA,IAAA,EAAA,QAAA,OAAA,QAAA,aAAA,EAAA,QAAA,gBAAA,EAAA,QAAA,cAAA,EAAA,QAAA,IAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,cAAA,EAAA,QAAA,cAAA,EAAA,QAAA,cAAA,EAAA,QAAA,KAAA,EAlxBH,IAAA1D,EAAAC,EAAAvF,QAAA,gBAAwC,SAAAwF,EAAAtI,GAAAuI,GAAAA,mBAAAA,QAAAC,OAAAA,KAAAA,IAAAA,EAAAD,IAAAA,QAAAE,EAAAF,IAAAA,QAAAD,OAAAA,EAAAA,SAAAtI,GAAAA,OAAAA,EAAAyI,EAAAD,IAAAxI,GAAA,SAAAqI,EAAArI,EAAAwI,GAAAA,IAAAA,GAAAxI,GAAAA,EAAAgD,WAAAhD,OAAAA,EAAAA,GAAAA,OAAAA,GAAAA,iBAAAA,GAAAA,mBAAAA,EAAAQ,MAAAA,CAAAA,QAAAR,GAAAyI,IAAAA,EAAAH,EAAAE,GAAAC,GAAAA,GAAAA,EAAAC,IAAA1I,GAAAyI,OAAAA,EAAAE,IAAA3I,GAAA4I,IAAAA,EAAAC,CAAAA,UAAAjB,MAAAA,EAAAf,OAAAiC,gBAAAjC,OAAAkC,yBAAAC,IAAAA,IAAAA,KAAAhJ,EAAAgJ,GAAAA,YAAAA,GAAAC,GAAAA,eAAAC,KAAAlJ,EAAAgJ,GAAAd,CAAAA,IAAAA,EAAAN,EAAAf,OAAAkC,yBAAA/I,EAAAgJ,GAAAd,KAAAA,IAAAA,EAAAS,KAAAT,EAAAiB,KAAAtC,OAAAiC,eAAAF,EAAAI,EAAAd,GAAAU,EAAAI,GAAAhJ,EAAAgJ,GAAAJ,OAAAA,EAAApI,QAAAR,EAAAyI,GAAAA,EAAAU,IAAAnJ,EAAA4I,GAAAA,EAYjC,SAASQ,IACd,IAAIC,EAAM,IAAIjB,EAASnB,WAAW,GAQlC,OANImB,EAASnB,YAAcC,eACzBmC,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAGJA,EASF,SAASC,EAAM1B,GACpB,IAAIyB,EAAM,IAAIjB,EAASnB,WAAW,GAIlC,OAHAoC,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACJyB,EASF,SAAS7F,EAAOoE,GACrB,IAAIzG,EAAIyG,EAAE,GACNvG,EAAIuG,EAAE,GACN/F,EAAI+F,EAAE,GACV,OAAOP,KAAKY,MAAM9G,EAAGE,EAAGQ,GAWnB,SAAS4H,EAAWtI,EAAGE,EAAGQ,GAC/B,IAAIwH,EAAM,IAAIjB,EAASnB,WAAW,GAIlC,OAHAoC,EAAI,GAAKlI,EACTkI,EAAI,GAAKhI,EACTgI,EAAI,GAAKxH,EACFwH,EAUF,SAASE,EAAKF,EAAKzB,GAIxB,OAHAyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACJyB,EAYF,SAASF,EAAIE,EAAKlI,EAAGE,EAAGQ,GAI7B,OAHAwH,EAAI,GAAKlI,EACTkI,EAAI,GAAKhI,EACTgI,EAAI,GAAKxH,EACFwH,EAWF,SAASwC,EAAIxC,EAAKzB,EAAGE,GAI1B,OAHAuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GACXuB,EAWF,SAASyC,EAASzC,EAAKzB,EAAGE,GAI/B,OAHAuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GACXuB,EAWF,SAASkB,EAASlB,EAAKzB,EAAGE,GAI/B,OAHAuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GACXuB,EAWF,SAASgQ,EAAOhQ,EAAKzB,EAAGE,GAI7B,OAHAuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GACXuB,EAUF,SAASiQ,EAAKjQ,EAAKzB,GAIxB,OAHAyB,EAAI,GAAKhC,KAAKiS,KAAK1R,EAAE,IACrByB,EAAI,GAAKhC,KAAKiS,KAAK1R,EAAE,IACrByB,EAAI,GAAKhC,KAAKiS,KAAK1R,EAAE,IACdyB,EAUF,SAASkQ,EAAMlQ,EAAKzB,GAIzB,OAHAyB,EAAI,GAAKhC,KAAKkS,MAAM3R,EAAE,IACtByB,EAAI,GAAKhC,KAAKkS,MAAM3R,EAAE,IACtByB,EAAI,GAAKhC,KAAKkS,MAAM3R,EAAE,IACfyB,EAWF,SAASmQ,EAAInQ,EAAKzB,EAAGE,GAI1B,OAHAuB,EAAI,GAAKhC,KAAKmS,IAAI5R,EAAE,GAAIE,EAAE,IAC1BuB,EAAI,GAAKhC,KAAKmS,IAAI5R,EAAE,GAAIE,EAAE,IAC1BuB,EAAI,GAAKhC,KAAKmS,IAAI5R,EAAE,GAAIE,EAAE,IACnBuB,EAWF,SAASrB,EAAIqB,EAAKzB,EAAGE,GAI1B,OAHAuB,EAAI,GAAKhC,KAAKW,IAAIJ,EAAE,GAAIE,EAAE,IAC1BuB,EAAI,GAAKhC,KAAKW,IAAIJ,EAAE,GAAIE,EAAE,IAC1BuB,EAAI,GAAKhC,KAAKW,IAAIJ,EAAE,GAAIE,EAAE,IACnBuB,EAUF,SAASoQ,EAAMpQ,EAAKzB,GAIzB,OAHAyB,EAAI,GAAKhC,KAAKoS,MAAM7R,EAAE,IACtByB,EAAI,GAAKhC,KAAKoS,MAAM7R,EAAE,IACtByB,EAAI,GAAKhC,KAAKoS,MAAM7R,EAAE,IACfyB,EAWF,SAASxD,EAAMwD,EAAKzB,EAAGE,GAI5B,OAHAuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EACTuB,EAYF,SAASqQ,EAAYrQ,EAAKzB,EAAGE,EAAGjC,GAIrC,OAHAwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EAChBwD,EAUF,SAASsQ,EAAS/R,EAAGE,GAC1B,IAAI3G,EAAI2G,EAAE,GAAKF,EAAE,GACbvG,EAAIyG,EAAE,GAAKF,EAAE,GACb/F,EAAIiG,EAAE,GAAKF,EAAE,GACjB,OAAOP,KAAKY,MAAM9G,EAAGE,EAAGQ,GAUnB,SAAS+X,EAAgBhS,EAAGE,GACjC,IAAI3G,EAAI2G,EAAE,GAAKF,EAAE,GACbvG,EAAIyG,EAAE,GAAKF,EAAE,GACb/F,EAAIiG,EAAE,GAAKF,EAAE,GACjB,OAAOzG,EAAIA,EAAIE,EAAIA,EAAIQ,EAAIA,EAStB,SAASgY,EAAcjS,GAC5B,IAAIzG,EAAIyG,EAAE,GACNvG,EAAIuG,EAAE,GACN/F,EAAI+F,EAAE,GACV,OAAOzG,EAAIA,EAAIE,EAAIA,EAAIQ,EAAIA,EAUtB,SAASiY,EAAOzQ,EAAKzB,GAI1B,OAHAyB,EAAI,IAAMzB,EAAE,GACZyB,EAAI,IAAMzB,EAAE,GACZyB,EAAI,IAAMzB,EAAE,GACLyB,EAUF,SAAS0Q,EAAQ1Q,EAAKzB,GAI3B,OAHAyB,EAAI,GAAK,EAAMzB,EAAE,GACjByB,EAAI,GAAK,EAAMzB,EAAE,GACjByB,EAAI,GAAK,EAAMzB,EAAE,GACVyB,EAUF,SAAS2Q,EAAU3Q,EAAKzB,GAC7B,IAAIzG,EAAIyG,EAAE,GACNvG,EAAIuG,EAAE,GACN/F,EAAI+F,EAAE,GACN+J,EAAMxQ,EAAIA,EAAIE,EAAIA,EAAIQ,EAAIA,EAU9B,OARI8P,EAAM,IAERA,EAAM,EAAItK,KAAKc,KAAKwJ,IAGtBtI,EAAI,GAAKzB,EAAE,GAAK+J,EAChBtI,EAAI,GAAKzB,EAAE,GAAK+J,EAChBtI,EAAI,GAAKzB,EAAE,GAAK+J,EACTtI,EAUF,SAAS4Q,EAAIrS,EAAGE,GACrB,OAAOF,EAAE,GAAKE,EAAE,GAAKF,EAAE,GAAKE,EAAE,GAAKF,EAAE,GAAKE,EAAE,GAWvC,SAASoS,EAAM7Q,EAAKzB,EAAGE,GAC5B,IAAI8K,EAAKhL,EAAE,GACPiL,EAAKjL,EAAE,GACPkL,EAAKlL,EAAE,GACP4K,EAAK1K,EAAE,GACP2K,EAAK3K,EAAE,GACP4K,EAAK5K,EAAE,GAIX,OAHAuB,EAAI,GAAKwJ,EAAKH,EAAKI,EAAKL,EACxBpJ,EAAI,GAAKyJ,EAAKN,EAAKI,EAAKF,EACxBrJ,EAAI,GAAKuJ,EAAKH,EAAKI,EAAKL,EACjBnJ,EAYF,SAAS8Q,EAAK9Q,EAAKzB,EAAGE,EAAGW,GAC9B,IAAImK,EAAKhL,EAAE,GACPiL,EAAKjL,EAAE,GACPkL,EAAKlL,EAAE,GAIX,OAHAyB,EAAI,GAAKuJ,EAAKnK,GAAKX,EAAE,GAAK8K,GAC1BvJ,EAAI,GAAKwJ,EAAKpK,GAAKX,EAAE,GAAK+K,GAC1BxJ,EAAI,GAAKyJ,EAAKrK,GAAKX,EAAE,GAAKgL,GACnBzJ,EAcF,SAAS+Q,EAAQ/Q,EAAKzB,EAAGE,EAAGkD,EAAGoB,EAAG3D,GACvC,IAAI4R,EAAe5R,EAAIA,EACnB6R,EAAUD,GAAgB,EAAI5R,EAAI,GAAK,EACvC8R,EAAUF,GAAgB5R,EAAI,GAAKA,EACnC+R,EAAUH,GAAgB5R,EAAI,GAC9BgS,EAAUJ,GAAgB,EAAI,EAAI5R,GAItC,OAHAY,EAAI,GAAKzB,EAAE,GAAK0S,EAAUxS,EAAE,GAAKyS,EAAUvP,EAAE,GAAKwP,EAAUpO,EAAE,GAAKqO,EACnEpR,EAAI,GAAKzB,EAAE,GAAK0S,EAAUxS,EAAE,GAAKyS,EAAUvP,EAAE,GAAKwP,EAAUpO,EAAE,GAAKqO,EACnEpR,EAAI,GAAKzB,EAAE,GAAK0S,EAAUxS,EAAE,GAAKyS,EAAUvP,EAAE,GAAKwP,EAAUpO,EAAE,GAAKqO,EAC5DpR,EAcF,SAASqR,EAAOrR,EAAKzB,EAAGE,EAAGkD,EAAGoB,EAAG3D,GACtC,IAAIkS,EAAgB,EAAIlS,EACpBmS,EAAwBD,EAAgBA,EACxCN,EAAe5R,EAAIA,EACnB6R,EAAUM,EAAwBD,EAClCJ,EAAU,EAAI9R,EAAImS,EAClBJ,EAAU,EAAIH,EAAeM,EAC7BF,EAAUJ,EAAe5R,EAI7B,OAHAY,EAAI,GAAKzB,EAAE,GAAK0S,EAAUxS,EAAE,GAAKyS,EAAUvP,EAAE,GAAKwP,EAAUpO,EAAE,GAAKqO,EACnEpR,EAAI,GAAKzB,EAAE,GAAK0S,EAAUxS,EAAE,GAAKyS,EAAUvP,EAAE,GAAKwP,EAAUpO,EAAE,GAAKqO,EACnEpR,EAAI,GAAKzB,EAAE,GAAK0S,EAAUxS,EAAE,GAAKyS,EAAUvP,EAAE,GAAKwP,EAAUpO,EAAE,GAAKqO,EAC5DpR,EAUF,SAAS/B,EAAO+B,EAAKxD,GAC1BA,EAAQA,GAAS,EACjB,IAAI2C,EAAwB,EAApBJ,EAAShB,SAAiBC,KAAKK,GACnC7F,EAAwB,EAApBuG,EAAShB,SAAiB,EAC9ByT,EAASxT,KAAKc,KAAK,EAAMtG,EAAIA,GAAKgE,EAItC,OAHAwD,EAAI,GAAKhC,KAAK4D,IAAIzC,GAAKqS,EACvBxR,EAAI,GAAKhC,KAAK0D,IAAIvC,GAAKqS,EACvBxR,EAAI,GAAKxH,EAAIgE,EACNwD,EAYF,SAASyR,EAAczR,EAAKzB,EAAGmT,GACpC,IAAI5Z,EAAIyG,EAAE,GACNvG,EAAIuG,EAAE,GACN/F,EAAI+F,EAAE,GACNkH,EAAIiM,EAAE,GAAK5Z,EAAI4Z,EAAE,GAAK1Z,EAAI0Z,EAAE,IAAMlZ,EAAIkZ,EAAE,IAK5C,OAJAjM,EAAIA,GAAK,EACTzF,EAAI,IAAM0R,EAAE,GAAK5Z,EAAI4Z,EAAE,GAAK1Z,EAAI0Z,EAAE,GAAKlZ,EAAIkZ,EAAE,KAAOjM,EACpDzF,EAAI,IAAM0R,EAAE,GAAK5Z,EAAI4Z,EAAE,GAAK1Z,EAAI0Z,EAAE,GAAKlZ,EAAIkZ,EAAE,KAAOjM,EACpDzF,EAAI,IAAM0R,EAAE,GAAK5Z,EAAI4Z,EAAE,GAAK1Z,EAAI0Z,EAAE,IAAMlZ,EAAIkZ,EAAE,KAAOjM,EAC9CzF,EAWF,SAAS2R,EAAc3R,EAAKzB,EAAGmT,GACpC,IAAI5Z,EAAIyG,EAAE,GACNvG,EAAIuG,EAAE,GACN/F,EAAI+F,EAAE,GAIV,OAHAyB,EAAI,GAAKlI,EAAI4Z,EAAE,GAAK1Z,EAAI0Z,EAAE,GAAKlZ,EAAIkZ,EAAE,GACrC1R,EAAI,GAAKlI,EAAI4Z,EAAE,GAAK1Z,EAAI0Z,EAAE,GAAKlZ,EAAIkZ,EAAE,GACrC1R,EAAI,GAAKlI,EAAI4Z,EAAE,GAAK1Z,EAAI0Z,EAAE,GAAKlZ,EAAIkZ,EAAE,GAC9B1R,EAYF,SAAS4R,EAAc5R,EAAKzB,EAAGiH,GAEpC,IAAIqM,EAAKrM,EAAE,GACPsM,EAAKtM,EAAE,GACPuM,EAAKvM,EAAE,GACPwM,EAAKxM,EAAE,GACP1N,EAAIyG,EAAE,GACNvG,EAAIuG,EAAE,GACN/F,EAAI+F,EAAE,GAGN0T,EAAMH,EAAKtZ,EAAIuZ,EAAK/Z,EACpBka,EAAMH,EAAKja,EAAI+Z,EAAKrZ,EACpB2Z,EAAMN,EAAK7Z,EAAI8Z,EAAKha,EAEpBsa,EAAON,EAAKK,EAAMJ,EAAKG,EACvBG,EAAON,EAAKE,EAAMJ,EAAKM,EACvBG,EAAOT,EAAKK,EAAMJ,EAAKG,EAEvBM,EAAU,EAALP,EAYT,OAXAC,GAAOM,EACPL,GAAOK,EACPJ,GAAOI,EAEPH,GAAQ,EACRC,GAAQ,EACRC,GAAQ,EAERtS,EAAI,GAAKlI,EAAIma,EAAMG,EACnBpS,EAAI,GAAKhI,EAAIka,EAAMG,EACnBrS,EAAI,GAAKxH,EAAI2Z,EAAMG,EACZtS,EAWF,SAASuI,EAAQvI,EAAKzB,EAAGE,EAAG+C,GACjC,IAAIgR,EAAI,GACJrT,EAAI,GAaR,OAXAqT,EAAE,GAAKjU,EAAE,GAAKE,EAAE,GAChB+T,EAAE,GAAKjU,EAAE,GAAKE,EAAE,GAChB+T,EAAE,GAAKjU,EAAE,GAAKE,EAAE,GAEhBU,EAAE,GAAKqT,EAAE,GACTrT,EAAE,GAAKqT,EAAE,GAAKxU,KAAK4D,IAAIJ,GAAOgR,EAAE,GAAKxU,KAAK0D,IAAIF,GAC9CrC,EAAE,GAAKqT,EAAE,GAAKxU,KAAK0D,IAAIF,GAAOgR,EAAE,GAAKxU,KAAK4D,IAAIJ,GAE9CxB,EAAI,GAAKb,EAAE,GAAKV,EAAE,GAClBuB,EAAI,GAAKb,EAAE,GAAKV,EAAE,GAClBuB,EAAI,GAAKb,EAAE,GAAKV,EAAE,GACXuB,EAWF,SAASwI,EAAQxI,EAAKzB,EAAGE,EAAG+C,GACjC,IAAIgR,EAAI,GACJrT,EAAI,GAaR,OAXAqT,EAAE,GAAKjU,EAAE,GAAKE,EAAE,GAChB+T,EAAE,GAAKjU,EAAE,GAAKE,EAAE,GAChB+T,EAAE,GAAKjU,EAAE,GAAKE,EAAE,GAEhBU,EAAE,GAAKqT,EAAE,GAAKxU,KAAK0D,IAAIF,GAAOgR,EAAE,GAAKxU,KAAK4D,IAAIJ,GAC9CrC,EAAE,GAAKqT,EAAE,GACTrT,EAAE,GAAKqT,EAAE,GAAKxU,KAAK4D,IAAIJ,GAAOgR,EAAE,GAAKxU,KAAK0D,IAAIF,GAE9CxB,EAAI,GAAKb,EAAE,GAAKV,EAAE,GAClBuB,EAAI,GAAKb,EAAE,GAAKV,EAAE,GAClBuB,EAAI,GAAKb,EAAE,GAAKV,EAAE,GACXuB,EAWF,SAASyI,EAAQzI,EAAKzB,EAAGE,EAAG+C,GACjC,IAAIgR,EAAI,GACJrT,EAAI,GAaR,OAXAqT,EAAE,GAAKjU,EAAE,GAAKE,EAAE,GAChB+T,EAAE,GAAKjU,EAAE,GAAKE,EAAE,GAChB+T,EAAE,GAAKjU,EAAE,GAAKE,EAAE,GAEhBU,EAAE,GAAKqT,EAAE,GAAKxU,KAAK4D,IAAIJ,GAAOgR,EAAE,GAAKxU,KAAK0D,IAAIF,GAC9CrC,EAAE,GAAKqT,EAAE,GAAKxU,KAAK0D,IAAIF,GAAOgR,EAAE,GAAKxU,KAAK4D,IAAIJ,GAC9CrC,EAAE,GAAKqT,EAAE,GAETxS,EAAI,GAAKb,EAAE,GAAKV,EAAE,GAClBuB,EAAI,GAAKb,EAAE,GAAKV,EAAE,GAClBuB,EAAI,GAAKb,EAAE,GAAKV,EAAE,GACXuB,EASF,SAASyS,EAAMlU,EAAGE,GACvB,IAAI8K,EAAKhL,EAAE,GACPiL,EAAKjL,EAAE,GACPkL,EAAKlL,EAAE,GACP4K,EAAK1K,EAAE,GACP2K,EAAK3K,EAAE,GACP4K,EAAK5K,EAAE,GAGPiU,EAFO1U,KAAKc,KAAKyK,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GACnCzL,KAAKc,KAAKqK,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GAE1CsJ,EAASD,GAAO9B,EAAIrS,EAAGE,GAAKiU,EAChC,OAAO1U,KAAK4U,KAAK5U,KAAKmS,IAAInS,KAAKW,IAAIgU,GAAS,GAAI,IAS3C,SAASE,EAAK7S,GAInB,OAHAA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EASF,SAASkC,EAAI3D,GAClB,MAAO,QAAUA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,IAU/C,SAASmE,EAAYnE,EAAGE,GAC7B,OAAOF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,GAU/C,SAASD,EAAOD,EAAGE,GACxB,IAAImC,EAAKrC,EAAE,GACPmC,EAAKnC,EAAE,GACPsC,EAAKtC,EAAE,GACP4C,EAAK1C,EAAE,GACP2C,EAAK3C,EAAE,GACP4C,EAAK5C,EAAE,GACX,OAAOT,KAAKU,IAAIkC,EAAKO,IAAOpC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIkC,GAAK5C,KAAKU,IAAIyC,KAAQnD,KAAKU,IAAIgC,EAAKU,IAAOrC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIgC,GAAK1C,KAAKU,IAAI0C,KAAQpD,KAAKU,IAAImC,EAAKQ,IAAOtC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAImC,GAAK7C,KAAKU,IAAI2C,IAOzP,IAAIyB,EAAG5L,QAAA4L,IAAGL,EAMNI,EAAG3L,QAAA2L,IAAG3B,EAMN4R,EAAG5b,QAAA4b,IAAG9C,EAMN+C,EAAI7b,QAAA6b,KAAGzC,EAMP0C,EAAO9b,QAAA8b,QAAGzC,EAMVjI,EAAGpR,QAAAoR,IAAGnO,EAMN8Y,EAAM/b,QAAA+b,OAAGzC,EAcT9S,EAAOxG,QAAAwG,QAAG,WACnB,IAAIwV,EAAMnT,IACV,OAAO,SAAUxB,EAAG4U,EAAQC,EAAQC,EAAOC,EAAIC,GAC7C,IAAI1U,EAAG2U,EAgBP,IAdKL,IACHA,EAAS,GAGNC,IACHA,EAAS,GAITI,EADEH,EACErV,KAAKmS,IAAIkD,EAAQF,EAASC,EAAQ7U,EAAEpE,QAEpCoE,EAAEpE,OAGH0E,EAAIuU,EAAQvU,EAAI2U,EAAG3U,GAAKsU,EAC3BD,EAAI,GAAK3U,EAAEM,GACXqU,EAAI,GAAK3U,EAAEM,EAAI,GACfqU,EAAI,GAAK3U,EAAEM,EAAI,GACfyU,EAAGJ,EAAKA,EAAKK,GACbhV,EAAEM,GAAKqU,EAAI,GACX3U,EAAEM,EAAI,GAAKqU,EAAI,GACf3U,EAAEM,EAAI,GAAKqU,EAAI,GAGjB,OAAO3U,GA7BU;;AC7FlB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,IAAA,EAAA,QAAA,KAAA,EAAA,QAAA,MAAA,EAAA,QAAA,KAAA,EAAA,QAAA,OAAA,EAAA,QAAA,MAAA,EAAA,QAAA,UAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,OAAA,EAAA,QAAA,IAAA,EAAA,QAAA,OAAA,EAAA,QAAA,YAAA,EAAA,QAAA,MAAA,EAAA,QAAA,aAAA,EAAA,QAAA,WAAA,EAAA,QAAA,QAAA,EAAA,QAAA,SAAA,EAAA,QAAA,OAAA,EAAA,QAAA,KAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,OAAA,EAAA,QAAA,UAAA,EAAA,QAAA,OAAA,EAAA,QAAA,MAAA,EAAA,QAAA,MAAA,EAAA,QAAA,YAAA,EAAA,QAAA,IAAA,EAAA,QAAA,OAAA,QAAA,aAAA,EAAA,QAAA,gBAAA,EAAA,QAAA,cAAA,EAAA,QAAA,IAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,cAAA,EAAA,QAAA,cAAA,EAAA,QAAA,KAAA,EAtpBH,IAAAQ,EAAAC,EAAAvF,QAAA,gBAAwC,SAAAwF,EAAAtI,GAAAuI,GAAAA,mBAAAA,QAAAC,OAAAA,KAAAA,IAAAA,EAAAD,IAAAA,QAAAE,EAAAF,IAAAA,QAAAD,OAAAA,EAAAA,SAAAtI,GAAAA,OAAAA,EAAAyI,EAAAD,IAAAxI,GAAA,SAAAqI,EAAArI,EAAAwI,GAAAA,IAAAA,GAAAxI,GAAAA,EAAAgD,WAAAhD,OAAAA,EAAAA,GAAAA,OAAAA,GAAAA,iBAAAA,GAAAA,mBAAAA,EAAAQ,MAAAA,CAAAA,QAAAR,GAAAyI,IAAAA,EAAAH,EAAAE,GAAAC,GAAAA,GAAAA,EAAAC,IAAA1I,GAAAyI,OAAAA,EAAAE,IAAA3I,GAAA4I,IAAAA,EAAAC,CAAAA,UAAAjB,MAAAA,EAAAf,OAAAiC,gBAAAjC,OAAAkC,yBAAAC,IAAAA,IAAAA,KAAAhJ,EAAAgJ,GAAAA,YAAAA,GAAAC,GAAAA,eAAAC,KAAAlJ,EAAAgJ,GAAAd,CAAAA,IAAAA,EAAAN,EAAAf,OAAAkC,yBAAA/I,EAAAgJ,GAAAd,KAAAA,IAAAA,EAAAS,KAAAT,EAAAiB,KAAAtC,OAAAiC,eAAAF,EAAAI,EAAAd,GAAAU,EAAAI,GAAAhJ,EAAAgJ,GAAAJ,OAAAA,EAAApI,QAAAR,EAAAyI,GAAAA,EAAAU,IAAAnJ,EAAA4I,GAAAA,EAYjC,SAASQ,IACd,IAAIC,EAAM,IAAIjB,EAASnB,WAAW,GASlC,OAPImB,EAASnB,YAAcC,eACzBmC,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAGJA,EASF,SAASC,EAAM1B,GACpB,IAAIyB,EAAM,IAAIjB,EAASnB,WAAW,GAKlC,OAJAoC,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACJyB,EAYF,SAASI,EAAWtI,EAAGE,EAAGQ,EAAGiN,GAClC,IAAIzF,EAAM,IAAIjB,EAASnB,WAAW,GAKlC,OAJAoC,EAAI,GAAKlI,EACTkI,EAAI,GAAKhI,EACTgI,EAAI,GAAKxH,EACTwH,EAAI,GAAKyF,EACFzF,EAUF,SAASE,EAAKF,EAAKzB,GAKxB,OAJAyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACJyB,EAaF,SAASF,EAAIE,EAAKlI,EAAGE,EAAGQ,EAAGiN,GAKhC,OAJAzF,EAAI,GAAKlI,EACTkI,EAAI,GAAKhI,EACTgI,EAAI,GAAKxH,EACTwH,EAAI,GAAKyF,EACFzF,EAWF,SAASwC,EAAIxC,EAAKzB,EAAGE,GAK1B,OAJAuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GACXuB,EAWF,SAASyC,EAASzC,EAAKzB,EAAGE,GAK/B,OAJAuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GACXuB,EAWF,SAASkB,EAASlB,EAAKzB,EAAGE,GAK/B,OAJAuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GACXuB,EAWF,SAASgQ,EAAOhQ,EAAKzB,EAAGE,GAK7B,OAJAuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GACXuB,EAUF,SAASiQ,EAAKjQ,EAAKzB,GAKxB,OAJAyB,EAAI,GAAKhC,KAAKiS,KAAK1R,EAAE,IACrByB,EAAI,GAAKhC,KAAKiS,KAAK1R,EAAE,IACrByB,EAAI,GAAKhC,KAAKiS,KAAK1R,EAAE,IACrByB,EAAI,GAAKhC,KAAKiS,KAAK1R,EAAE,IACdyB,EAUF,SAASkQ,EAAMlQ,EAAKzB,GAKzB,OAJAyB,EAAI,GAAKhC,KAAKkS,MAAM3R,EAAE,IACtByB,EAAI,GAAKhC,KAAKkS,MAAM3R,EAAE,IACtByB,EAAI,GAAKhC,KAAKkS,MAAM3R,EAAE,IACtByB,EAAI,GAAKhC,KAAKkS,MAAM3R,EAAE,IACfyB,EAWF,SAASmQ,EAAInQ,EAAKzB,EAAGE,GAK1B,OAJAuB,EAAI,GAAKhC,KAAKmS,IAAI5R,EAAE,GAAIE,EAAE,IAC1BuB,EAAI,GAAKhC,KAAKmS,IAAI5R,EAAE,GAAIE,EAAE,IAC1BuB,EAAI,GAAKhC,KAAKmS,IAAI5R,EAAE,GAAIE,EAAE,IAC1BuB,EAAI,GAAKhC,KAAKmS,IAAI5R,EAAE,GAAIE,EAAE,IACnBuB,EAWF,SAASrB,EAAIqB,EAAKzB,EAAGE,GAK1B,OAJAuB,EAAI,GAAKhC,KAAKW,IAAIJ,EAAE,GAAIE,EAAE,IAC1BuB,EAAI,GAAKhC,KAAKW,IAAIJ,EAAE,GAAIE,EAAE,IAC1BuB,EAAI,GAAKhC,KAAKW,IAAIJ,EAAE,GAAIE,EAAE,IAC1BuB,EAAI,GAAKhC,KAAKW,IAAIJ,EAAE,GAAIE,EAAE,IACnBuB,EAUF,SAASoQ,EAAMpQ,EAAKzB,GAKzB,OAJAyB,EAAI,GAAKhC,KAAKoS,MAAM7R,EAAE,IACtByB,EAAI,GAAKhC,KAAKoS,MAAM7R,EAAE,IACtByB,EAAI,GAAKhC,KAAKoS,MAAM7R,EAAE,IACtByB,EAAI,GAAKhC,KAAKoS,MAAM7R,EAAE,IACfyB,EAWF,SAASxD,EAAMwD,EAAKzB,EAAGE,GAK5B,OAJAuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EACTuB,EAYF,SAASqQ,EAAYrQ,EAAKzB,EAAGE,EAAGjC,GAKrC,OAJAwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EAChBwD,EAUF,SAASsQ,EAAS/R,EAAGE,GAC1B,IAAI3G,EAAI2G,EAAE,GAAKF,EAAE,GACbvG,EAAIyG,EAAE,GAAKF,EAAE,GACb/F,EAAIiG,EAAE,GAAKF,EAAE,GACbkH,EAAIhH,EAAE,GAAKF,EAAE,GACjB,OAAOP,KAAKY,MAAM9G,EAAGE,EAAGQ,EAAGiN,GAUtB,SAAS8K,EAAgBhS,EAAGE,GACjC,IAAI3G,EAAI2G,EAAE,GAAKF,EAAE,GACbvG,EAAIyG,EAAE,GAAKF,EAAE,GACb/F,EAAIiG,EAAE,GAAKF,EAAE,GACbkH,EAAIhH,EAAE,GAAKF,EAAE,GACjB,OAAOzG,EAAIA,EAAIE,EAAIA,EAAIQ,EAAIA,EAAIiN,EAAIA,EAS9B,SAAStL,EAAOoE,GACrB,IAAIzG,EAAIyG,EAAE,GACNvG,EAAIuG,EAAE,GACN/F,EAAI+F,EAAE,GACNkH,EAAIlH,EAAE,GACV,OAAOP,KAAKY,MAAM9G,EAAGE,EAAGQ,EAAGiN,GAStB,SAAS+K,EAAcjS,GAC5B,IAAIzG,EAAIyG,EAAE,GACNvG,EAAIuG,EAAE,GACN/F,EAAI+F,EAAE,GACNkH,EAAIlH,EAAE,GACV,OAAOzG,EAAIA,EAAIE,EAAIA,EAAIQ,EAAIA,EAAIiN,EAAIA,EAU9B,SAASgL,EAAOzQ,EAAKzB,GAK1B,OAJAyB,EAAI,IAAMzB,EAAE,GACZyB,EAAI,IAAMzB,EAAE,GACZyB,EAAI,IAAMzB,EAAE,GACZyB,EAAI,IAAMzB,EAAE,GACLyB,EAUF,SAAS0Q,EAAQ1Q,EAAKzB,GAK3B,OAJAyB,EAAI,GAAK,EAAMzB,EAAE,GACjByB,EAAI,GAAK,EAAMzB,EAAE,GACjByB,EAAI,GAAK,EAAMzB,EAAE,GACjByB,EAAI,GAAK,EAAMzB,EAAE,GACVyB,EAUF,SAAS2Q,EAAU3Q,EAAKzB,GAC7B,IAAIzG,EAAIyG,EAAE,GACNvG,EAAIuG,EAAE,GACN/F,EAAI+F,EAAE,GACNkH,EAAIlH,EAAE,GACN+J,EAAMxQ,EAAIA,EAAIE,EAAIA,EAAIQ,EAAIA,EAAIiN,EAAIA,EAUtC,OARI6C,EAAM,IACRA,EAAM,EAAItK,KAAKc,KAAKwJ,IAGtBtI,EAAI,GAAKlI,EAAIwQ,EACbtI,EAAI,GAAKhI,EAAIsQ,EACbtI,EAAI,GAAKxH,EAAI8P,EACbtI,EAAI,GAAKyF,EAAI6C,EACNtI,EAUF,SAAS4Q,EAAIrS,EAAGE,GACrB,OAAOF,EAAE,GAAKE,EAAE,GAAKF,EAAE,GAAKE,EAAE,GAAKF,EAAE,GAAKE,EAAE,GAAKF,EAAE,GAAKE,EAAE,GAYrD,SAASoS,EAAM7Q,EAAKL,EAAGkC,EAAG4D,GAC/B,IAAIgO,EAAI5R,EAAE,GAAK4D,EAAE,GAAK5D,EAAE,GAAK4D,EAAE,GAC3BiO,EAAI7R,EAAE,GAAK4D,EAAE,GAAK5D,EAAE,GAAK4D,EAAE,GAC3BkO,EAAI9R,EAAE,GAAK4D,EAAE,GAAK5D,EAAE,GAAK4D,EAAE,GAC3BnD,EAAIT,EAAE,GAAK4D,EAAE,GAAK5D,EAAE,GAAK4D,EAAE,GAC3BmO,EAAI/R,EAAE,GAAK4D,EAAE,GAAK5D,EAAE,GAAK4D,EAAE,GAC3BoO,EAAIhS,EAAE,GAAK4D,EAAE,GAAK5D,EAAE,GAAK4D,EAAE,GAC3BqO,EAAInU,EAAE,GACNoU,EAAIpU,EAAE,GACNqU,EAAIrU,EAAE,GACNsU,EAAItU,EAAE,GAKV,OAJAK,EAAI,GAAK+T,EAAIF,EAAIG,EAAIJ,EAAIK,EAAI3R,EAC7BtC,EAAI,IAAO8T,EAAID,EAAKG,EAAIL,EAAIM,EAAIP,EAChC1T,EAAI,GAAK8T,EAAIF,EAAIG,EAAIJ,EAAIM,EAAIR,EAC7BzT,EAAI,IAAO8T,EAAIxR,EAAKyR,EAAIL,EAAIM,EAAIP,EACzBzT,EAYF,SAAS8Q,EAAK9Q,EAAKzB,EAAGE,EAAGW,GAC9B,IAAImK,EAAKhL,EAAE,GACPiL,EAAKjL,EAAE,GACPkL,EAAKlL,EAAE,GACPmL,EAAKnL,EAAE,GAKX,OAJAyB,EAAI,GAAKuJ,EAAKnK,GAAKX,EAAE,GAAK8K,GAC1BvJ,EAAI,GAAKwJ,EAAKpK,GAAKX,EAAE,GAAK+K,GAC1BxJ,EAAI,GAAKyJ,EAAKrK,GAAKX,EAAE,GAAKgL,GAC1BzJ,EAAI,GAAK0J,EAAKtK,GAAKX,EAAE,GAAKiL,GACnB1J,EAUF,SAAS/B,EAAO+B,EAAKxD,GAK1B,IAAIuF,EAAImS,EAAIC,EAAIC,EACZC,EAAIC,EALR9X,EAAQA,GAAS,EAOjB,GAGE6X,GAFAtS,EAAyB,EAApBhD,EAAShB,SAAe,GAEnBgE,GADVmS,EAAyB,EAApBnV,EAAShB,SAAe,GACTmW,QACbG,GAAM,GAEf,GAGEC,GAFAH,EAAyB,EAApBpV,EAAShB,SAAe,GAEnBoW,GADVC,EAAyB,EAApBrV,EAAShB,SAAe,GACTqW,QACbE,GAAM,GAEf,IAAIvR,EAAI/E,KAAKc,MAAM,EAAIuV,GAAMC,GAK7B,OAJAtU,EAAI,GAAKxD,EAAQuF,EACjB/B,EAAI,GAAKxD,EAAQ0X,EACjBlU,EAAI,GAAKxD,EAAQ2X,EAAKpR,EACtB/C,EAAI,GAAKxD,EAAQ4X,EAAKrR,EACf/C,EAWF,SAASyR,EAAczR,EAAKzB,EAAGmT,GACpC,IAAI5Z,EAAIyG,EAAE,GACNvG,EAAIuG,EAAE,GACN/F,EAAI+F,EAAE,GACNkH,EAAIlH,EAAE,GAKV,OAJAyB,EAAI,GAAK0R,EAAE,GAAK5Z,EAAI4Z,EAAE,GAAK1Z,EAAI0Z,EAAE,GAAKlZ,EAAIkZ,EAAE,IAAMjM,EAClDzF,EAAI,GAAK0R,EAAE,GAAK5Z,EAAI4Z,EAAE,GAAK1Z,EAAI0Z,EAAE,GAAKlZ,EAAIkZ,EAAE,IAAMjM,EAClDzF,EAAI,GAAK0R,EAAE,GAAK5Z,EAAI4Z,EAAE,GAAK1Z,EAAI0Z,EAAE,IAAMlZ,EAAIkZ,EAAE,IAAMjM,EACnDzF,EAAI,GAAK0R,EAAE,GAAK5Z,EAAI4Z,EAAE,GAAK1Z,EAAI0Z,EAAE,IAAMlZ,EAAIkZ,EAAE,IAAMjM,EAC5CzF,EAWF,SAAS4R,EAAc5R,EAAKzB,EAAGiH,GACpC,IAAI1N,EAAIyG,EAAE,GACNvG,EAAIuG,EAAE,GACN/F,EAAI+F,EAAE,GACNsT,EAAKrM,EAAE,GACPsM,EAAKtM,EAAE,GACPuM,EAAKvM,EAAE,GACPwM,EAAKxM,EAAE,GAEP+O,EAAKvC,EAAKla,EAAIga,EAAKtZ,EAAIuZ,EAAK/Z,EAC5Bwc,EAAKxC,EAAKha,EAAI+Z,EAAKja,EAAI+Z,EAAKrZ,EAC5Bic,EAAKzC,EAAKxZ,EAAIqZ,EAAK7Z,EAAI8Z,EAAKha,EAC5B4c,GAAM7C,EAAK/Z,EAAIga,EAAK9Z,EAAI+Z,EAAKvZ,EAMjC,OAJAwH,EAAI,GAAKuU,EAAKvC,EAAK0C,GAAM7C,EAAK2C,GAAMzC,EAAK0C,GAAM3C,EAC/C9R,EAAI,GAAKwU,EAAKxC,EAAK0C,GAAM5C,EAAK2C,GAAM5C,EAAK0C,GAAMxC,EAC/C/R,EAAI,GAAKyU,EAAKzC,EAAK0C,GAAM3C,EAAKwC,GAAMzC,EAAK0C,GAAM3C,EAC/C7R,EAAI,GAAKzB,EAAE,GACJyB,EASF,SAAS6S,EAAK7S,GAKnB,OAJAA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EASF,SAASkC,EAAI3D,GAClB,MAAO,QAAUA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,IAU7D,SAASmE,EAAYnE,EAAGE,GAC7B,OAAOF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,GAUhE,SAASD,EAAOD,EAAGE,GACxB,IAAImC,EAAKrC,EAAE,GACPmC,EAAKnC,EAAE,GACPsC,EAAKtC,EAAE,GACPuC,EAAKvC,EAAE,GACP4C,EAAK1C,EAAE,GACP2C,EAAK3C,EAAE,GACP4C,EAAK5C,EAAE,GACP6C,EAAK7C,EAAE,GACX,OAAOT,KAAKU,IAAIkC,EAAKO,IAAOpC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIkC,GAAK5C,KAAKU,IAAIyC,KAAQnD,KAAKU,IAAIgC,EAAKU,IAAOrC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIgC,GAAK1C,KAAKU,IAAI0C,KAAQpD,KAAKU,IAAImC,EAAKQ,IAAOtC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAImC,GAAK7C,KAAKU,IAAI2C,KAAQrD,KAAKU,IAAIoC,EAAKQ,IAAOvC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIoC,GAAK9C,KAAKU,IAAI4C,IAO9U,IAAIwB,EAAG5L,QAAA4L,IAAGL,EAMNI,EAAG3L,QAAA2L,IAAG3B,EAMN4R,EAAG5b,QAAA4b,IAAG9C,EAMN+C,EAAI7b,QAAA6b,KAAGzC,EAMP0C,EAAO9b,QAAA8b,QAAGzC,EAMVjI,EAAGpR,QAAAoR,IAAGnO,EAMN8Y,EAAM/b,QAAA+b,OAAGzC,EAcT9S,EAAOxG,QAAAwG,QAAG,WACnB,IAAIwV,EAAMnT,IACV,OAAO,SAAUxB,EAAG4U,EAAQC,EAAQC,EAAOC,EAAIC,GAC7C,IAAI1U,EAAG2U,EAgBP,IAdKL,IACHA,EAAS,GAGNC,IACHA,EAAS,GAITI,EADEH,EACErV,KAAKmS,IAAIkD,EAAQF,EAASC,EAAQ7U,EAAEpE,QAEpCoE,EAAEpE,OAGH0E,EAAIuU,EAAQvU,EAAI2U,EAAG3U,GAAKsU,EAC3BD,EAAI,GAAK3U,EAAEM,GACXqU,EAAI,GAAK3U,EAAEM,EAAI,GACfqU,EAAI,GAAK3U,EAAEM,EAAI,GACfqU,EAAI,GAAK3U,EAAEM,EAAI,GACfyU,EAAGJ,EAAKA,EAAKK,GACbhV,EAAEM,GAAKqU,EAAI,GACX3U,EAAEM,EAAI,GAAKqU,EAAI,GACf3U,EAAEM,EAAI,GAAKqU,EAAI,GACf3U,EAAEM,EAAI,GAAKqU,EAAI,GAGjB,OAAO3U,GA/BU;;ACgFlB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,EAAA,QAAA,WAAA,EAAA,QAAA,WAAA,EAAA,QAAA,UAAA,EAAA,QAAA,UAAA,EAAA,QAAA,OAAA,EAAA,QAAA,YAAA,QAAA,OAAA,QAAA,SAAA,EAAA,QAAA,IAAA,EAAA,QAAA,UAAA,EAAA,QAAA,SAAA,EAAA,QAAA,gBAAA,EAAA,QAAA,SAAA,EAAA,QAAA,aAAA,EAAA,QAAA,SAAA,EAAA,QAAA,OAAA,EAAA,QAAA,KAAA,QAAA,OAAA,QAAA,SAAA,EAAA,QAAA,GAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,eAAA,EAAA,QAAA,IAAA,EAAA,QAAA,OAAA,EAAA,QAAA,QAAA,EAAA,QAAA,QAAA,EAAA,QAAA,QAAA,EAAA,QAAA,QAAA,QAAA,IAAA,QAAA,MAAA,QAAA,gBAAA,EAAA,QAAA,aAAA,EAAA,QAAA,MAAA,EAAA,QAAA,cAAA,QAAA,OAAA,QAAA,YAAA,EAAA,QAAA,IAAA,EArsBH,IAAAQ,EAAAC,EAAAvF,QAAA,gBACAkb,EAAA3V,EAAAvF,QAAA,cACAmb,EAAA5V,EAAAvF,QAAA,cACAob,EAAA7V,EAAAvF,QAAA,cAAkC,SAAAwF,EAAAtI,GAAAuI,GAAAA,mBAAAA,QAAAC,OAAAA,KAAAA,IAAAA,EAAAD,IAAAA,QAAAE,EAAAF,IAAAA,QAAAD,OAAAA,EAAAA,SAAAtI,GAAAA,OAAAA,EAAAyI,EAAAD,IAAAxI,GAAA,SAAAqI,EAAArI,EAAAwI,GAAAA,IAAAA,GAAAxI,GAAAA,EAAAgD,WAAAhD,OAAAA,EAAAA,GAAAA,OAAAA,GAAAA,iBAAAA,GAAAA,mBAAAA,EAAAQ,MAAAA,CAAAA,QAAAR,GAAAyI,IAAAA,EAAAH,EAAAE,GAAAC,GAAAA,GAAAA,EAAAC,IAAA1I,GAAAyI,OAAAA,EAAAE,IAAA3I,GAAA4I,IAAAA,EAAAC,CAAAA,UAAAjB,MAAAA,EAAAf,OAAAiC,gBAAAjC,OAAAkC,yBAAAC,IAAAA,IAAAA,KAAAhJ,EAAAgJ,GAAAA,YAAAA,GAAAC,GAAAA,eAAAC,KAAAlJ,EAAAgJ,GAAAd,CAAAA,IAAAA,EAAAN,EAAAf,OAAAkC,yBAAA/I,EAAAgJ,GAAAd,KAAAA,IAAAA,EAAAS,KAAAT,EAAAiB,KAAAtC,OAAAiC,eAAAF,EAAAI,EAAAd,GAAAU,EAAAI,GAAAhJ,EAAAgJ,GAAAJ,OAAAA,EAAApI,QAAAR,EAAAyI,GAAAA,EAAAU,IAAAnJ,EAAA4I,GAAAA,EAY3B,SAASQ,IACd,IAAIC,EAAM,IAAIjB,EAASnB,WAAW,GASlC,OAPImB,EAASnB,YAAcC,eACzBmC,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAGXA,EAAI,GAAK,EACFA,EASF,SAASG,EAASH,GAKvB,OAJAA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAYF,SAAS8U,EAAa9U,EAAKqI,EAAM7G,GACtCA,GAAY,GACZ,IAAIC,EAAIzD,KAAK0D,IAAIF,GAKjB,OAJAxB,EAAI,GAAKyB,EAAI4G,EAAK,GAClBrI,EAAI,GAAKyB,EAAI4G,EAAK,GAClBrI,EAAI,GAAKyB,EAAI4G,EAAK,GAClBrI,EAAI,GAAKhC,KAAK4D,IAAIJ,GACXxB,EAgBF,SAAS+U,EAAaC,EAAUxP,GACrC,IAAIhE,EAAwB,EAAlBxD,KAAK4U,KAAKpN,EAAE,IAClB/D,EAAIzD,KAAK0D,IAAIF,EAAM,GAavB,OAXIC,EAAI1C,EAASpB,SACfqX,EAAS,GAAKxP,EAAE,GAAK/D,EACrBuT,EAAS,GAAKxP,EAAE,GAAK/D,EACrBuT,EAAS,GAAKxP,EAAE,GAAK/D,IAGrBuT,EAAS,GAAK,EACdA,EAAS,GAAK,EACdA,EAAS,GAAK,GAGTxT,EAUF,SAASyT,EAAS1W,EAAGE,GAC1B,IAAIyW,EAAatE,EAAIrS,EAAGE,GACxB,OAAOT,KAAK4U,KAAK,EAAIsC,EAAaA,EAAa,GAW1C,SAAShU,EAASlB,EAAKzB,EAAGE,GAC/B,IAAI8K,EAAKhL,EAAE,GACPiL,EAAKjL,EAAE,GACPkL,EAAKlL,EAAE,GACPmL,EAAKnL,EAAE,GACP4K,EAAK1K,EAAE,GACP2K,EAAK3K,EAAE,GACP4K,EAAK5K,EAAE,GACP6K,EAAK7K,EAAE,GAKX,OAJAuB,EAAI,GAAKuJ,EAAKD,EAAKI,EAAKP,EAAKK,EAAKH,EAAKI,EAAKL,EAC5CpJ,EAAI,GAAKwJ,EAAKF,EAAKI,EAAKN,EAAKK,EAAKN,EAAKI,EAAKF,EAC5CrJ,EAAI,GAAKyJ,EAAKH,EAAKI,EAAKL,EAAKE,EAAKH,EAAKI,EAAKL,EAC5CnJ,EAAI,GAAK0J,EAAKJ,EAAKC,EAAKJ,EAAKK,EAAKJ,EAAKK,EAAKJ,EACrCrJ,EAWF,SAASuI,EAAQvI,EAAKzB,EAAGiD,GAC9BA,GAAO,GACP,IAAI+H,EAAKhL,EAAE,GACPiL,EAAKjL,EAAE,GACPkL,EAAKlL,EAAE,GACPmL,EAAKnL,EAAE,GACP4K,EAAKnL,KAAK0D,IAAIF,GACd8H,EAAKtL,KAAK4D,IAAIJ,GAKlB,OAJAxB,EAAI,GAAKuJ,EAAKD,EAAKI,EAAKP,EACxBnJ,EAAI,GAAKwJ,EAAKF,EAAKG,EAAKN,EACxBnJ,EAAI,GAAKyJ,EAAKH,EAAKE,EAAKL,EACxBnJ,EAAI,GAAK0J,EAAKJ,EAAKC,EAAKJ,EACjBnJ,EAWF,SAASwI,EAAQxI,EAAKzB,EAAGiD,GAC9BA,GAAO,GACP,IAAI+H,EAAKhL,EAAE,GACPiL,EAAKjL,EAAE,GACPkL,EAAKlL,EAAE,GACPmL,EAAKnL,EAAE,GACP6K,EAAKpL,KAAK0D,IAAIF,GACd8H,EAAKtL,KAAK4D,IAAIJ,GAKlB,OAJAxB,EAAI,GAAKuJ,EAAKD,EAAKG,EAAKL,EACxBpJ,EAAI,GAAKwJ,EAAKF,EAAKI,EAAKN,EACxBpJ,EAAI,GAAKyJ,EAAKH,EAAKC,EAAKH,EACxBpJ,EAAI,GAAK0J,EAAKJ,EAAKE,EAAKJ,EACjBpJ,EAWF,SAASyI,EAAQzI,EAAKzB,EAAGiD,GAC9BA,GAAO,GACP,IAAI+H,EAAKhL,EAAE,GACPiL,EAAKjL,EAAE,GACPkL,EAAKlL,EAAE,GACPmL,EAAKnL,EAAE,GACP8K,EAAKrL,KAAK0D,IAAIF,GACd8H,EAAKtL,KAAK4D,IAAIJ,GAKlB,OAJAxB,EAAI,GAAKuJ,EAAKD,EAAKE,EAAKH,EACxBrJ,EAAI,GAAKwJ,EAAKF,EAAKC,EAAKF,EACxBrJ,EAAI,GAAKyJ,EAAKH,EAAKI,EAAKL,EACxBrJ,EAAI,GAAK0J,EAAKJ,EAAKG,EAAKJ,EACjBrJ,EAYF,SAASmV,EAAWnV,EAAKzB,GAC9B,IAAIzG,EAAIyG,EAAE,GACNvG,EAAIuG,EAAE,GACN/F,EAAI+F,EAAE,GAKV,OAJAyB,EAAI,GAAKlI,EACTkI,EAAI,GAAKhI,EACTgI,EAAI,GAAKxH,EACTwH,EAAI,GAAKhC,KAAKc,KAAKd,KAAKU,IAAI,EAAM5G,EAAIA,EAAIE,EAAIA,EAAIQ,EAAIA,IAC/CwH,EAUF,SAASoV,EAAIpV,EAAKzB,GACvB,IAAIzG,EAAIyG,EAAE,GACNvG,EAAIuG,EAAE,GACN/F,EAAI+F,EAAE,GACNkH,EAAIlH,EAAE,GACNY,EAAInB,KAAKc,KAAKhH,EAAIA,EAAIE,EAAIA,EAAIQ,EAAIA,GAClC6c,EAAKrX,KAAKoX,IAAI3P,GACdhE,EAAItC,EAAI,EAAIkW,EAAKrX,KAAK0D,IAAIvC,GAAKA,EAAI,EAKvC,OAJAa,EAAI,GAAKlI,EAAI2J,EACbzB,EAAI,GAAKhI,EAAIyJ,EACbzB,EAAI,GAAKxH,EAAIiJ,EACbzB,EAAI,GAAKqV,EAAKrX,KAAK4D,IAAIzC,GAChBa,EAUF,SAASsV,EAAGtV,EAAKzB,GACtB,IAAIzG,EAAIyG,EAAE,GACNvG,EAAIuG,EAAE,GACN/F,EAAI+F,EAAE,GACNkH,EAAIlH,EAAE,GACNY,EAAInB,KAAKc,KAAKhH,EAAIA,EAAIE,EAAIA,EAAIQ,EAAIA,GAClC4G,EAAID,EAAI,EAAInB,KAAKuX,MAAMpW,EAAGsG,GAAKtG,EAAI,EAKvC,OAJAa,EAAI,GAAKlI,EAAIsH,EACbY,EAAI,GAAKhI,EAAIoH,EACbY,EAAI,GAAKxH,EAAI4G,EACbY,EAAI,GAAK,GAAMhC,KAAKwX,IAAI1d,EAAIA,EAAIE,EAAIA,EAAIQ,EAAIA,EAAIiN,EAAIA,GAC7CzF,EAWF,SAASyV,EAAIzV,EAAKzB,EAAGE,GAI1B,OAHA6W,EAAGtV,EAAKzB,GACR/B,EAAMwD,EAAKA,EAAKvB,GAChB2W,EAAIpV,EAAKA,GACFA,EAYF,SAAS0V,EAAM1V,EAAKzB,EAAGE,EAAGW,GAG/B,IAQIuW,EAAOC,EAAOC,EAAOC,EAAQC,EAR7BxM,EAAKhL,EAAE,GACPiL,EAAKjL,EAAE,GACPkL,EAAKlL,EAAE,GACPmL,EAAKnL,EAAE,GACP4K,EAAK1K,EAAE,GACP2K,EAAK3K,EAAE,GACP4K,EAAK5K,EAAE,GACP6K,EAAK7K,EAAE,GAgCX,OA7BAmX,EAAQrM,EAAKJ,EAAKK,EAAKJ,EAAKK,EAAKJ,EAAKK,EAAKJ,GAE/B,IACVsM,GAASA,EACTzM,GAAMA,EACNC,GAAMA,EACNC,GAAMA,EACNC,GAAMA,GAIJ,EAAMsM,EAAQ7W,EAASpB,SAEzBgY,EAAQ3X,KAAK4U,KAAKgD,GAClBC,EAAQ7X,KAAK0D,IAAIiU,GACjBG,EAAS9X,KAAK0D,KAAK,EAAMtC,GAAKuW,GAASE,EACvCE,EAAS/X,KAAK0D,IAAItC,EAAIuW,GAASE,IAI/BC,EAAS,EAAM1W,EACf2W,EAAS3W,GAIXY,EAAI,GAAK8V,EAASvM,EAAKwM,EAAS5M,EAChCnJ,EAAI,GAAK8V,EAAStM,EAAKuM,EAAS3M,EAChCpJ,EAAI,GAAK8V,EAASrM,EAAKsM,EAAS1M,EAChCrJ,EAAI,GAAK8V,EAASpM,EAAKqM,EAASzM,EACzBtJ,EASF,SAAS/B,EAAO+B,GAGrB,IAAIgW,EAAKjX,EAAShB,SACdkY,EAAKlX,EAAShB,SACdmY,EAAKnX,EAAShB,SACdoY,EAAenY,KAAKc,KAAK,EAAIkX,GAC7BI,EAASpY,KAAKc,KAAKkX,GAKvB,OAJAhW,EAAI,GAAKmW,EAAenY,KAAK0D,IAAI,EAAM1D,KAAKK,GAAK4X,GACjDjW,EAAI,GAAKmW,EAAenY,KAAK4D,IAAI,EAAM5D,KAAKK,GAAK4X,GACjDjW,EAAI,GAAKoW,EAASpY,KAAK0D,IAAI,EAAM1D,KAAKK,GAAK6X,GAC3ClW,EAAI,GAAKoW,EAASpY,KAAK4D,IAAI,EAAM5D,KAAKK,GAAK6X,GACpClW,EAUF,SAASW,EAAOX,EAAKzB,GAC1B,IAAIqC,EAAKrC,EAAE,GACPmC,EAAKnC,EAAE,GACPsC,EAAKtC,EAAE,GACPuC,EAAKvC,EAAE,GACPqS,EAAMhQ,EAAKA,EAAKF,EAAKA,EAAKG,EAAKA,EAAKC,EAAKA,EACzCuV,EAASzF,EAAM,EAAMA,EAAM,EAM/B,OAJA5Q,EAAI,IAAMY,EAAKyV,EACfrW,EAAI,IAAMU,EAAK2V,EACfrW,EAAI,IAAMa,EAAKwV,EACfrW,EAAI,GAAKc,EAAKuV,EACPrW,EAWF,SAASsW,EAAUtW,EAAKzB,GAK7B,OAJAyB,EAAI,IAAMzB,EAAE,GACZyB,EAAI,IAAMzB,EAAE,GACZyB,EAAI,IAAMzB,EAAE,GACZyB,EAAI,GAAKzB,EAAE,GACJyB,EAcF,SAASuW,EAASvW,EAAK0R,GAG5B,IACI8E,EADAC,EAAS/E,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAG7B,GAAI+E,EAAS,EAEXD,EAAQxY,KAAKc,KAAK2X,EAAS,GAE3BzW,EAAI,GAAK,GAAMwW,EACfA,EAAQ,GAAMA,EAEdxW,EAAI,IAAM0R,EAAE,GAAKA,EAAE,IAAM8E,EACzBxW,EAAI,IAAM0R,EAAE,GAAKA,EAAE,IAAM8E,EACzBxW,EAAI,IAAM0R,EAAE,GAAKA,EAAE,IAAM8E,MACpB,CAEL,IAAI3X,EAAI,EACJ6S,EAAE,GAAKA,EAAE,KAAI7S,EAAI,GACjB6S,EAAE,GAAKA,EAAM,EAAJ7S,EAAQA,KAAIA,EAAI,GAC7B,IAAI6X,GAAK7X,EAAI,GAAK,EACd8X,GAAK9X,EAAI,GAAK,EAClB2X,EAAQxY,KAAKc,KAAK4S,EAAM,EAAJ7S,EAAQA,GAAK6S,EAAM,EAAJgF,EAAQA,GAAKhF,EAAM,EAAJiF,EAAQA,GAAK,GAC/D3W,EAAInB,GAAK,GAAM2X,EACfA,EAAQ,GAAMA,EACdxW,EAAI,IAAM0R,EAAM,EAAJgF,EAAQC,GAAKjF,EAAM,EAAJiF,EAAQD,IAAMF,EACzCxW,EAAI0W,IAAMhF,EAAM,EAAJgF,EAAQ7X,GAAK6S,EAAM,EAAJ7S,EAAQ6X,IAAMF,EACzCxW,EAAI2W,IAAMjF,EAAM,EAAJiF,EAAQ9X,GAAK6S,EAAM,EAAJ7S,EAAQ8X,IAAMH,EAG3C,OAAOxW,EAaF,SAAS4W,EAAU5W,EAAKlI,EAAGE,EAAGQ,GACnC,IAAIqe,EAAY,GAAM7Y,KAAKK,GAAK,IAChCvG,GAAK+e,EACL7e,GAAK6e,EACLre,GAAKqe,EACL,IAAI7L,EAAKhN,KAAK0D,IAAI5J,GACdgf,EAAK9Y,KAAK4D,IAAI9J,GACdmT,EAAKjN,KAAK0D,IAAI1J,GACd+e,EAAK/Y,KAAK4D,IAAI5J,GACdkT,EAAKlN,KAAK0D,IAAIlJ,GACdwe,EAAKhZ,KAAK4D,IAAIpJ,GAKlB,OAJAwH,EAAI,GAAKgL,EAAK+L,EAAKC,EAAKF,EAAK7L,EAAKC,EAClClL,EAAI,GAAK8W,EAAK7L,EAAK+L,EAAKhM,EAAK+L,EAAK7L,EAClClL,EAAI,GAAK8W,EAAKC,EAAK7L,EAAKF,EAAKC,EAAK+L,EAClChX,EAAI,GAAK8W,EAAKC,EAAKC,EAAKhM,EAAKC,EAAKC,EAC3BlL,EASF,SAASkC,EAAI3D,GAClB,MAAO,QAAUA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,IAU7D,IAAI0B,EAAK/I,QAAA+I,MAAG4U,EAAK5U,MAYbG,EAAUlJ,QAAAkJ,WAAGyU,EAAKzU,WAUlBF,EAAIhJ,QAAAgJ,KAAG2U,EAAK3U,KAaZJ,EAAG5I,QAAA4I,IAAG+U,EAAK/U,IAWX0C,EAAGtL,QAAAsL,IAAGqS,EAAKrS,IAMXK,EAAG3L,QAAA2L,IAAG3B,EAWN1E,EAAKtF,QAAAsF,MAAGqY,EAAKrY,MAUboU,EAAG1Z,QAAA0Z,IAAGiE,EAAKjE,IAYXE,EAAI5Z,QAAA4Z,KAAG+D,EAAK/D,KAQZ3W,EAAMjD,QAAAiD,OAAG0a,EAAK1a,OAMdmO,EAAGpR,QAAAoR,IAAGnO,EASNqW,EAAatZ,QAAAsZ,cAAGqE,EAAKrE,cAMrByC,EAAM/b,QAAA+b,OAAGzC,EAUTG,EAASzZ,QAAAyZ,UAAGkE,EAAKlE,UASjBjO,EAAWxL,QAAAwL,YAAGmS,EAAKnS,YASnBlE,EAAMtH,QAAAsH,OAAGqW,EAAKrW,OAadyY,EAAU/f,QAAA+f,WAAG,WACtB,IAAIC,EAAUtC,EAAK7U,SACfoX,EAAYvC,EAAKxU,WAAW,EAAG,EAAG,GAClCgX,EAAYxC,EAAKxU,WAAW,EAAG,EAAG,GACtC,OAAO,SAAUJ,EAAKzB,EAAGE,GACvB,IAAImS,EAAMgE,EAAKhE,IAAIrS,EAAGE,GAEtB,OAAImS,GAAO,SACTgE,EAAK/D,MAAMqG,EAASC,EAAW5Y,GAC3BqW,EAAKtM,IAAI4O,GAAW,MAAUtC,EAAK/D,MAAMqG,EAASE,EAAW7Y,GACjEqW,EAAKjE,UAAUuG,EAASA,GACxBpC,EAAa9U,EAAKkX,EAASlZ,KAAKK,IACzB2B,GACE4Q,EAAM,SACf5Q,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,IAEP4U,EAAK/D,MAAMqG,EAAS3Y,EAAGE,GACvBuB,EAAI,GAAKkX,EAAQ,GACjBlX,EAAI,GAAKkX,EAAQ,GACjBlX,EAAI,GAAKkX,EAAQ,GACjBlX,EAAI,GAAK,EAAI4Q,EACND,EAAU3Q,EAAKA,KAzBJ,GAyCbqX,EAAMngB,QAAAmgB,OAAG,WAClB,IAAIC,EAAQvX,IACRwX,EAAQxX,IACZ,OAAO,SAAUC,EAAKzB,EAAGE,EAAGkD,EAAGoB,EAAG3D,GAIhC,OAHAsW,EAAM4B,EAAO/Y,EAAGwE,EAAG3D,GACnBsW,EAAM6B,EAAO9Y,EAAGkD,EAAGvC,GACnBsW,EAAM1V,EAAKsX,EAAOC,EAAO,EAAInY,GAAK,EAAIA,IAC/BY,GAPS,GAqBTwX,EAAOtgB,QAAAsgB,QAAG,WACnB,IAAIC,EAAO9C,EAAK5U,SAChB,OAAO,SAAUC,EAAK0X,EAAMvL,EAAOoC,GAUjC,OATAkJ,EAAK,GAAKtL,EAAM,GAChBsL,EAAK,GAAKtL,EAAM,GAChBsL,EAAK,GAAKtL,EAAM,GAChBsL,EAAK,GAAKlJ,EAAG,GACbkJ,EAAK,GAAKlJ,EAAG,GACbkJ,EAAK,GAAKlJ,EAAG,GACbkJ,EAAK,IAAMC,EAAK,GAChBD,EAAK,IAAMC,EAAK,GAChBD,EAAK,IAAMC,EAAK,GACT/G,EAAU3Q,EAAKuW,EAASvW,EAAKyX,KAZnB;;AC2IrB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,IAAA,EAAA,QAAA,MAAA,EAAA,QAAA,UAAA,EAAA,QAAA,KAAA,EAAA,QAAA,OAAA,EAAA,QAAA,SAAA,EAAA,QAAA,OAAA,EAAA,QAAA,YAAA,EAAA,QAAA,SAAA,EAAA,QAAA,aAAA,EAAA,QAAA,wBAAA,EAAA,QAAA,8BAAA,EAAA,QAAA,gBAAA,EAAA,QAAA,WAAA,EAAA,QAAA,QAAA,EAAA,QAAA,aAAA,EAAA,QAAA,eAAA,EAAA,QAAA,SAAA,EAAA,QAAA,OAAA,EAAA,QAAA,OAAA,QAAA,SAAA,EAAA,QAAA,KAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,UAAA,EAAA,QAAA,iBAAA,EAAA,QAAA,mBAAA,EAAA,QAAA,oBAAA,EAAA,QAAA,QAAA,EAAA,QAAA,QAAA,EAAA,QAAA,QAAA,EAAA,QAAA,MAAA,EAAA,QAAA,IAAA,EAAA,QAAA,QAAA,EAAA,QAAA,cAAA,QAAA,OAAA,QAAA,aAAA,EAAA,QAAA,IAAA,EAAA,QAAA,UAAA,EAl0BA,IAAA1Y,EAAAC,EAAAvF,QAAA,gBACAke,EAAA3Y,EAAAvF,QAAA,cACAme,EAAA5Y,EAAAvF,QAAA,cAAkC,SAAAwF,EAAAtI,GAAAuI,GAAAA,mBAAAA,QAAAC,OAAAA,KAAAA,IAAAA,EAAAD,IAAAA,QAAAE,EAAAF,IAAAA,QAAAD,OAAAA,EAAAA,SAAAtI,GAAAA,OAAAA,EAAAyI,EAAAD,IAAAxI,GAAA,SAAAqI,EAAArI,EAAAwI,GAAAA,IAAAA,GAAAxI,GAAAA,EAAAgD,WAAAhD,OAAAA,EAAAA,GAAAA,OAAAA,GAAAA,iBAAAA,GAAAA,mBAAAA,EAAAQ,MAAAA,CAAAA,QAAAR,GAAAyI,IAAAA,EAAAH,EAAAE,GAAAC,GAAAA,GAAAA,EAAAC,IAAA1I,GAAAyI,OAAAA,EAAAE,IAAA3I,GAAA4I,IAAAA,EAAAC,CAAAA,UAAAjB,MAAAA,EAAAf,OAAAiC,gBAAAjC,OAAAkC,yBAAAC,IAAAA,IAAAA,KAAAhJ,EAAAgJ,GAAAA,YAAAA,GAAAC,GAAAA,eAAAC,KAAAlJ,EAAAgJ,GAAAd,CAAAA,IAAAA,EAAAN,EAAAf,OAAAkC,yBAAA/I,EAAAgJ,GAAAd,KAAAA,IAAAA,EAAAS,KAAAT,EAAAiB,KAAAtC,OAAAiC,eAAAF,EAAAI,EAAAd,GAAAU,EAAAI,GAAAhJ,EAAAgJ,GAAAJ,OAAAA,EAAApI,QAAAR,EAAAyI,GAAAA,EAAAU,IAAAnJ,EAAA4I,GAAAA,EAe3B,SAASQ,IACd,IAAI8X,EAAK,IAAI9Y,EAASnB,WAAW,GAajC,OAXImB,EAASnB,YAAcC,eACzBga,EAAG,GAAK,EACRA,EAAG,GAAK,EACRA,EAAG,GAAK,EACRA,EAAG,GAAK,EACRA,EAAG,GAAK,EACRA,EAAG,GAAK,EACRA,EAAG,GAAK,GAGVA,EAAG,GAAK,EACDA,EAUF,SAAS5X,EAAM1B,GACpB,IAAIsZ,EAAK,IAAI9Y,EAASnB,WAAW,GASjC,OARAia,EAAG,GAAKtZ,EAAE,GACVsZ,EAAG,GAAKtZ,EAAE,GACVsZ,EAAG,GAAKtZ,EAAE,GACVsZ,EAAG,GAAKtZ,EAAE,GACVsZ,EAAG,GAAKtZ,EAAE,GACVsZ,EAAG,GAAKtZ,EAAE,GACVsZ,EAAG,GAAKtZ,EAAE,GACVsZ,EAAG,GAAKtZ,EAAE,GACHsZ,EAiBF,SAASzX,EAAWqO,EAAIE,EAAIE,EAAIiJ,EAAIpS,EAAIC,EAAIC,EAAI2M,GACrD,IAAIsF,EAAK,IAAI9Y,EAASnB,WAAW,GASjC,OARAia,EAAG,GAAKpJ,EACRoJ,EAAG,GAAKlJ,EACRkJ,EAAG,GAAKhJ,EACRgJ,EAAG,GAAKC,EACRD,EAAG,GAAKnS,EACRmS,EAAG,GAAKlS,EACRkS,EAAG,GAAKjS,EACRiS,EAAG,GAAKtF,EACDsF,EAgBF,SAASE,EAA8BtJ,EAAIE,EAAIE,EAAIiJ,EAAIpS,EAAIC,EAAIC,GACpE,IAAIiS,EAAK,IAAI9Y,EAASnB,WAAW,GACjCia,EAAG,GAAKpJ,EACRoJ,EAAG,GAAKlJ,EACRkJ,EAAG,GAAKhJ,EACRgJ,EAAG,GAAKC,EACR,IAAIvO,EAAU,GAAL7D,EACL8D,EAAU,GAAL7D,EACL8D,EAAU,GAAL7D,EAKT,OAJAiS,EAAG,GAAKtO,EAAKuO,EAAKtO,EAAKqF,EAAKpF,EAAKkF,EACjCkJ,EAAG,GAAKrO,EAAKsO,EAAKrO,EAAKgF,EAAKlF,EAAKsF,EACjCgJ,EAAG,GAAKpO,EAAKqO,EAAKvO,EAAKoF,EAAKnF,EAAKiF,EACjCoJ,EAAG,IAAMtO,EAAKkF,EAAKjF,EAAKmF,EAAKlF,EAAKoF,EAC3BgJ,EAYF,SAAShP,EAAwB7I,EAAKwF,EAAGpG,GAC9C,IAAImK,EAAY,GAAPnK,EAAE,GACPoK,EAAY,GAAPpK,EAAE,GACPqK,EAAY,GAAPrK,EAAE,GACP+J,EAAK3D,EAAE,GACP4D,EAAK5D,EAAE,GACP6D,EAAK7D,EAAE,GACP8D,EAAK9D,EAAE,GASX,OARAxF,EAAI,GAAKmJ,EACTnJ,EAAI,GAAKoJ,EACTpJ,EAAI,GAAKqJ,EACTrJ,EAAI,GAAKsJ,EACTtJ,EAAI,GAAKuJ,EAAKD,EAAKE,EAAKH,EAAKI,EAAKL,EAClCpJ,EAAI,GAAKwJ,EAAKF,EAAKG,EAAKN,EAAKI,EAAKF,EAClCrJ,EAAI,GAAKyJ,EAAKH,EAAKC,EAAKH,EAAKI,EAAKL,EAClCnJ,EAAI,IAAMuJ,EAAKJ,EAAKK,EAAKJ,EAAKK,EAAKJ,EAC5BrJ,EAWF,SAAS6D,EAAgB7D,EAAKZ,GASnC,OARAY,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAY,GAAPZ,EAAE,GACXY,EAAI,GAAY,GAAPZ,EAAE,GACXY,EAAI,GAAY,GAAPZ,EAAE,GACXY,EAAI,GAAK,EACFA,EAWF,SAASgC,EAAahC,EAAKwF,GAShC,OARAxF,EAAI,GAAKwF,EAAE,GACXxF,EAAI,GAAKwF,EAAE,GACXxF,EAAI,GAAKwF,EAAE,GACXxF,EAAI,GAAKwF,EAAE,GACXxF,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAWF,SAAS8D,EAAS9D,EAAKzB,GAE5B,IAAIyZ,EAAQL,EAAK5X,SACjB6X,EAAK7N,YAAYiO,EAAOzZ,GACxB,IAAIa,EAAI,IAAIL,EAASnB,WAAW,GAGhC,OAFAga,EAAKhO,eAAexK,EAAGb,GACvBsK,EAAwB7I,EAAKgY,EAAO5Y,GAC7BY,EAWF,SAASE,EAAKF,EAAKzB,GASxB,OARAyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACJyB,EASF,SAASG,EAASH,GASvB,OARAA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EAkBF,SAASF,EAAIE,EAAKyO,EAAIE,EAAIE,EAAIiJ,EAAIpS,EAAIC,EAAIC,EAAI2M,GASnD,OARAvS,EAAI,GAAKyO,EACTzO,EAAI,GAAK2O,EACT3O,EAAI,GAAK6O,EACT7O,EAAI,GAAK8X,EACT9X,EAAI,GAAK0F,EACT1F,EAAI,GAAK2F,EACT3F,EAAI,GAAK4F,EACT5F,EAAI,GAAKuS,EACFvS,EASF,IAAIiY,EAAO/gB,QAAA+gB,QAAGN,EAAKzX,KAQnB,SAASgY,EAAQlY,EAAKzB,GAK3B,OAJAyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACJyB,EAWF,IAAImY,EAAOjhB,QAAAihB,QAAGR,EAAKzX,KAUnB,SAASkY,EAAQpY,EAAKwF,GAK3B,OAJAxF,EAAI,GAAKwF,EAAE,GACXxF,EAAI,GAAKwF,EAAE,GACXxF,EAAI,GAAKwF,EAAE,GACXxF,EAAI,GAAKwF,EAAE,GACJxF,EASF,SAAS4J,EAAe5J,EAAKzB,GAClC,IAAIgL,EAAKhL,EAAE,GACPiL,EAAKjL,EAAE,GACPkL,EAAKlL,EAAE,GACPmL,EAAKnL,EAAE,GACP4K,GAAM5K,EAAE,GACR6K,GAAM7K,EAAE,GACR8K,GAAM9K,EAAE,GACR+K,EAAK/K,EAAE,GAIX,OAHAyB,EAAI,GAA+C,GAAzCuJ,EAAKD,EAAKI,EAAKP,EAAKK,EAAKH,EAAKI,EAAKL,GAC7CpJ,EAAI,GAA+C,GAAzCwJ,EAAKF,EAAKI,EAAKN,EAAKK,EAAKN,EAAKI,EAAKF,GAC7CrJ,EAAI,GAA+C,GAAzCyJ,EAAKH,EAAKI,EAAKL,EAAKE,EAAKH,EAAKI,EAAKL,GACtCnJ,EAWF,SAAS4D,EAAU5D,EAAKzB,EAAGsD,GAChC,IAAIwW,EAAM9Z,EAAE,GACR+Z,EAAM/Z,EAAE,GACRga,EAAMha,EAAE,GACRia,EAAMja,EAAE,GACRka,EAAa,GAAP5W,EAAE,GACR6W,EAAa,GAAP7W,EAAE,GACR8W,EAAa,GAAP9W,EAAE,GACR+W,EAAMra,EAAE,GACRsa,EAAMta,EAAE,GACRua,EAAMva,EAAE,GACRwa,EAAMxa,EAAE,GASZ,OARAyB,EAAI,GAAKqY,EACTrY,EAAI,GAAKsY,EACTtY,EAAI,GAAKuY,EACTvY,EAAI,GAAKwY,EACTxY,EAAI,GAAKwY,EAAMC,EAAMH,EAAMK,EAAMJ,EAAMG,EAAME,EAC7C5Y,EAAI,GAAKwY,EAAME,EAAMH,EAAME,EAAMJ,EAAMM,EAAME,EAC7C7Y,EAAI,GAAKwY,EAAMG,EAAMN,EAAMK,EAAMJ,EAAMG,EAAMK,EAC7C9Y,EAAI,IAAMqY,EAAMI,EAAMH,EAAMI,EAAMH,EAAMI,EAAMI,EACvC/Y,EAWF,SAASuI,EAAQvI,EAAKzB,EAAGiD,GAC9B,IAAI2H,GAAM5K,EAAE,GACR6K,GAAM7K,EAAE,GACR8K,GAAM9K,EAAE,GACR+K,EAAK/K,EAAE,GACPgL,EAAKhL,EAAE,GACPiL,EAAKjL,EAAE,GACPkL,EAAKlL,EAAE,GACPmL,EAAKnL,EAAE,GACP8Z,EAAM9O,EAAKD,EAAKI,EAAKP,EAAKK,EAAKH,EAAKI,EAAKL,EACzCkP,EAAM9O,EAAKF,EAAKI,EAAKN,EAAKK,EAAKN,EAAKI,EAAKF,EACzCkP,EAAM9O,EAAKH,EAAKI,EAAKL,EAAKE,EAAKH,EAAKI,EAAKL,EACzCqP,EAAM9O,EAAKJ,EAAKC,EAAKJ,EAAKK,EAAKJ,EAAKK,EAAKJ,EAU7C,OATAsO,EAAKpP,QAAQvI,EAAKzB,EAAGiD,GACrB2H,EAAKnJ,EAAI,GACToJ,EAAKpJ,EAAI,GACTqJ,EAAKrJ,EAAI,GACTsJ,EAAKtJ,EAAI,GACTA,EAAI,GAAKqY,EAAM/O,EAAKkP,EAAMrP,EAAKmP,EAAMjP,EAAKkP,EAAMnP,EAChDpJ,EAAI,GAAKsY,EAAMhP,EAAKkP,EAAMpP,EAAKmP,EAAMpP,EAAKkP,EAAMhP,EAChDrJ,EAAI,GAAKuY,EAAMjP,EAAKkP,EAAMnP,EAAKgP,EAAMjP,EAAKkP,EAAMnP,EAChDnJ,EAAI,GAAKwY,EAAMlP,EAAK+O,EAAMlP,EAAKmP,EAAMlP,EAAKmP,EAAMlP,EACzCrJ,EAWF,SAASwI,EAAQxI,EAAKzB,EAAGiD,GAC9B,IAAI2H,GAAM5K,EAAE,GACR6K,GAAM7K,EAAE,GACR8K,GAAM9K,EAAE,GACR+K,EAAK/K,EAAE,GACPgL,EAAKhL,EAAE,GACPiL,EAAKjL,EAAE,GACPkL,EAAKlL,EAAE,GACPmL,EAAKnL,EAAE,GACP8Z,EAAM9O,EAAKD,EAAKI,EAAKP,EAAKK,EAAKH,EAAKI,EAAKL,EACzCkP,EAAM9O,EAAKF,EAAKI,EAAKN,EAAKK,EAAKN,EAAKI,EAAKF,EACzCkP,EAAM9O,EAAKH,EAAKI,EAAKL,EAAKE,EAAKH,EAAKI,EAAKL,EACzCqP,EAAM9O,EAAKJ,EAAKC,EAAKJ,EAAKK,EAAKJ,EAAKK,EAAKJ,EAU7C,OATAsO,EAAKnP,QAAQxI,EAAKzB,EAAGiD,GACrB2H,EAAKnJ,EAAI,GACToJ,EAAKpJ,EAAI,GACTqJ,EAAKrJ,EAAI,GACTsJ,EAAKtJ,EAAI,GACTA,EAAI,GAAKqY,EAAM/O,EAAKkP,EAAMrP,EAAKmP,EAAMjP,EAAKkP,EAAMnP,EAChDpJ,EAAI,GAAKsY,EAAMhP,EAAKkP,EAAMpP,EAAKmP,EAAMpP,EAAKkP,EAAMhP,EAChDrJ,EAAI,GAAKuY,EAAMjP,EAAKkP,EAAMnP,EAAKgP,EAAMjP,EAAKkP,EAAMnP,EAChDnJ,EAAI,GAAKwY,EAAMlP,EAAK+O,EAAMlP,EAAKmP,EAAMlP,EAAKmP,EAAMlP,EACzCrJ,EAWF,SAASyI,EAAQzI,EAAKzB,EAAGiD,GAC9B,IAAI2H,GAAM5K,EAAE,GACR6K,GAAM7K,EAAE,GACR8K,GAAM9K,EAAE,GACR+K,EAAK/K,EAAE,GACPgL,EAAKhL,EAAE,GACPiL,EAAKjL,EAAE,GACPkL,EAAKlL,EAAE,GACPmL,EAAKnL,EAAE,GACP8Z,EAAM9O,EAAKD,EAAKI,EAAKP,EAAKK,EAAKH,EAAKI,EAAKL,EACzCkP,EAAM9O,EAAKF,EAAKI,EAAKN,EAAKK,EAAKN,EAAKI,EAAKF,EACzCkP,EAAM9O,EAAKH,EAAKI,EAAKL,EAAKE,EAAKH,EAAKI,EAAKL,EACzCqP,EAAM9O,EAAKJ,EAAKC,EAAKJ,EAAKK,EAAKJ,EAAKK,EAAKJ,EAU7C,OATAsO,EAAKlP,QAAQzI,EAAKzB,EAAGiD,GACrB2H,EAAKnJ,EAAI,GACToJ,EAAKpJ,EAAI,GACTqJ,EAAKrJ,EAAI,GACTsJ,EAAKtJ,EAAI,GACTA,EAAI,GAAKqY,EAAM/O,EAAKkP,EAAMrP,EAAKmP,EAAMjP,EAAKkP,EAAMnP,EAChDpJ,EAAI,GAAKsY,EAAMhP,EAAKkP,EAAMpP,EAAKmP,EAAMpP,EAAKkP,EAAMhP,EAChDrJ,EAAI,GAAKuY,EAAMjP,EAAKkP,EAAMnP,EAAKgP,EAAMjP,EAAKkP,EAAMnP,EAChDnJ,EAAI,GAAKwY,EAAMlP,EAAK+O,EAAMlP,EAAKmP,EAAMlP,EAAKmP,EAAMlP,EACzCrJ,EAWF,SAASgZ,EAAmBhZ,EAAKzB,EAAGiH,GACzC,IAAIqM,EAAKrM,EAAE,GACPsM,EAAKtM,EAAE,GACPuM,EAAKvM,EAAE,GACPwM,EAAKxM,EAAE,GACP+D,EAAKhL,EAAE,GACPiL,EAAKjL,EAAE,GACPkL,EAAKlL,EAAE,GACPmL,EAAKnL,EAAE,GAaX,OAZAyB,EAAI,GAAKuJ,EAAKyI,EAAKtI,EAAKmI,EAAKrI,EAAKuI,EAAKtI,EAAKqI,EAC5C9R,EAAI,GAAKwJ,EAAKwI,EAAKtI,EAAKoI,EAAKrI,EAAKoI,EAAKtI,EAAKwI,EAC5C/R,EAAI,GAAKyJ,EAAKuI,EAAKtI,EAAKqI,EAAKxI,EAAKuI,EAAKtI,EAAKqI,EAC5C7R,EAAI,GAAK0J,EAAKsI,EAAKzI,EAAKsI,EAAKrI,EAAKsI,EAAKrI,EAAKsI,EAC5CxI,EAAKhL,EAAE,GACPiL,EAAKjL,EAAE,GACPkL,EAAKlL,EAAE,GACPmL,EAAKnL,EAAE,GACPyB,EAAI,GAAKuJ,EAAKyI,EAAKtI,EAAKmI,EAAKrI,EAAKuI,EAAKtI,EAAKqI,EAC5C9R,EAAI,GAAKwJ,EAAKwI,EAAKtI,EAAKoI,EAAKrI,EAAKoI,EAAKtI,EAAKwI,EAC5C/R,EAAI,GAAKyJ,EAAKuI,EAAKtI,EAAKqI,EAAKxI,EAAKuI,EAAKtI,EAAKqI,EAC5C7R,EAAI,GAAK0J,EAAKsI,EAAKzI,EAAKsI,EAAKrI,EAAKsI,EAAKrI,EAAKsI,EACrC/R,EAWF,SAASiZ,EAAoBjZ,EAAKwF,EAAGjH,GAC1C,IAAIsT,EAAKrM,EAAE,GACPsM,EAAKtM,EAAE,GACPuM,EAAKvM,EAAE,GACPwM,EAAKxM,EAAE,GACP2D,EAAK5K,EAAE,GACP6K,EAAK7K,EAAE,GACP8K,EAAK9K,EAAE,GACP+K,EAAK/K,EAAE,GAaX,OAZAyB,EAAI,GAAK6R,EAAKvI,EAAK0I,EAAK7I,EAAK2I,EAAKzI,EAAK0I,EAAK3I,EAC5CpJ,EAAI,GAAK8R,EAAKxI,EAAK0I,EAAK5I,EAAK2I,EAAK5I,EAAK0I,EAAKxI,EAC5CrJ,EAAI,GAAK+R,EAAKzI,EAAK0I,EAAK3I,EAAKwI,EAAKzI,EAAK0I,EAAK3I,EAC5CnJ,EAAI,GAAKgS,EAAK1I,EAAKuI,EAAK1I,EAAK2I,EAAK1I,EAAK2I,EAAK1I,EAC5CF,EAAK5K,EAAE,GACP6K,EAAK7K,EAAE,GACP8K,EAAK9K,EAAE,GACP+K,EAAK/K,EAAE,GACPyB,EAAI,GAAK6R,EAAKvI,EAAK0I,EAAK7I,EAAK2I,EAAKzI,EAAK0I,EAAK3I,EAC5CpJ,EAAI,GAAK8R,EAAKxI,EAAK0I,EAAK5I,EAAK2I,EAAK5I,EAAK0I,EAAKxI,EAC5CrJ,EAAI,GAAK+R,EAAKzI,EAAK0I,EAAK3I,EAAKwI,EAAKzI,EAAK0I,EAAK3I,EAC5CnJ,EAAI,GAAKgS,EAAK1I,EAAKuI,EAAK1I,EAAK2I,EAAK1I,EAAK2I,EAAK1I,EACrCrJ,EAYF,SAASkZ,EAAiBlZ,EAAKzB,EAAG8J,EAAM7G,GAE7C,GAAIxD,KAAKU,IAAI8C,GAAOzC,EAASpB,QAC3B,OAAOuC,EAAKF,EAAKzB,GAGnB,IAAI4a,EAAanb,KAAKY,MAAMyJ,EAAK,GAAIA,EAAK,GAAIA,EAAK,IACnD7G,GAAY,GACZ,IAAIC,EAAIzD,KAAK0D,IAAIF,GACb2H,EAAK1H,EAAI4G,EAAK,GAAK8Q,EACnB/P,EAAK3H,EAAI4G,EAAK,GAAK8Q,EACnB9P,EAAK5H,EAAI4G,EAAK,GAAK8Q,EACnB7P,EAAKtL,KAAK4D,IAAIJ,GACd6W,EAAM9Z,EAAE,GACR+Z,EAAM/Z,EAAE,GACRga,EAAMha,EAAE,GACRia,EAAMja,EAAE,GACZyB,EAAI,GAAKqY,EAAM/O,EAAKkP,EAAMrP,EAAKmP,EAAMjP,EAAKkP,EAAMnP,EAChDpJ,EAAI,GAAKsY,EAAMhP,EAAKkP,EAAMpP,EAAKmP,EAAMpP,EAAKkP,EAAMhP,EAChDrJ,EAAI,GAAKuY,EAAMjP,EAAKkP,EAAMnP,EAAKgP,EAAMjP,EAAKkP,EAAMnP,EAChDnJ,EAAI,GAAKwY,EAAMlP,EAAK+O,EAAMlP,EAAKmP,EAAMlP,EAAKmP,EAAMlP,EAChD,IAAIE,EAAKhL,EAAE,GACPiL,EAAKjL,EAAE,GACPkL,EAAKlL,EAAE,GACPmL,EAAKnL,EAAE,GAKX,OAJAyB,EAAI,GAAKuJ,EAAKD,EAAKI,EAAKP,EAAKK,EAAKH,EAAKI,EAAKL,EAC5CpJ,EAAI,GAAKwJ,EAAKF,EAAKI,EAAKN,EAAKK,EAAKN,EAAKI,EAAKF,EAC5CrJ,EAAI,GAAKyJ,EAAKH,EAAKI,EAAKL,EAAKE,EAAKH,EAAKI,EAAKL,EAC5CnJ,EAAI,GAAK0J,EAAKJ,EAAKC,EAAKJ,EAAKK,EAAKJ,EAAKK,EAAKJ,EACrCrJ,EAYF,SAASwC,EAAIxC,EAAKzB,EAAGE,GAS1B,OARAuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GACXuB,EAWF,SAASkB,EAASlB,EAAKzB,EAAGE,GAC/B,IAAI2a,EAAM7a,EAAE,GACR8a,EAAM9a,EAAE,GACR+a,EAAM/a,EAAE,GACRgb,EAAMhb,EAAE,GACRka,EAAMha,EAAE,GACRia,EAAMja,EAAE,GACRka,EAAMla,EAAE,GACR+a,EAAM/a,EAAE,GACR4Z,EAAM9Z,EAAE,GACR+Z,EAAM/Z,EAAE,GACRga,EAAMha,EAAE,GACRia,EAAMja,EAAE,GACRkb,EAAMhb,EAAE,GACRib,EAAMjb,EAAE,GACRkb,EAAMlb,EAAE,GACRmb,EAAMnb,EAAE,GASZ,OARAuB,EAAI,GAAKoZ,EAAMQ,EAAML,EAAME,EAAMJ,EAAMM,EAAML,EAAMI,EACnD1Z,EAAI,GAAKqZ,EAAMO,EAAML,EAAMG,EAAMJ,EAAMG,EAAML,EAAMO,EACnD3Z,EAAI,GAAKsZ,EAAMM,EAAML,EAAMI,EAAMP,EAAMM,EAAML,EAAMI,EACnDzZ,EAAI,GAAKuZ,EAAMK,EAAMR,EAAMK,EAAMJ,EAAMK,EAAMJ,EAAMK,EACnD3Z,EAAI,GAAKoZ,EAAMI,EAAMD,EAAMd,EAAMY,EAAMV,EAAMW,EAAMZ,EAAML,EAAMuB,EAAMpB,EAAMiB,EAAMnB,EAAMqB,EAAMpB,EAAMmB,EACnG1Z,EAAI,GAAKqZ,EAAMG,EAAMD,EAAMb,EAAMY,EAAMb,EAAMW,EAAMT,EAAML,EAAMsB,EAAMpB,EAAMkB,EAAMnB,EAAMkB,EAAMpB,EAAMsB,EACnG3Z,EAAI,GAAKsZ,EAAME,EAAMD,EAAMZ,EAAMS,EAAMV,EAAMW,EAAMZ,EAAMF,EAAMqB,EAAMpB,EAAMmB,EAAMtB,EAAMqB,EAAMpB,EAAMmB,EACnGzZ,EAAI,GAAKuZ,EAAMC,EAAMJ,EAAMX,EAAMY,EAAMX,EAAMY,EAAMX,EAAMH,EAAMoB,EAAMvB,EAAMoB,EAAMnB,EAAMoB,EAAMnB,EAAMoB,EAC5F3Z,EAOF,IAAI6C,EAAG3L,QAAA2L,IAAG3B,EAWV,SAAS1E,EAAMwD,EAAKzB,EAAGE,GAS5B,OARAuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EACTuB,EAWF,IAAI4Q,EAAG1Z,QAAA0Z,IAAG+G,EAAK/G,IAYf,SAASE,EAAK9Q,EAAKzB,EAAGE,EAAGW,GAC9B,IAAIya,EAAK,EAAIza,EAUb,OATIwR,EAAIrS,EAAGE,GAAK,IAAGW,GAAKA,GACxBY,EAAI,GAAKzB,EAAE,GAAKsb,EAAKpb,EAAE,GAAKW,EAC5BY,EAAI,GAAKzB,EAAE,GAAKsb,EAAKpb,EAAE,GAAKW,EAC5BY,EAAI,GAAKzB,EAAE,GAAKsb,EAAKpb,EAAE,GAAKW,EAC5BY,EAAI,GAAKzB,EAAE,GAAKsb,EAAKpb,EAAE,GAAKW,EAC5BY,EAAI,GAAKzB,EAAE,GAAKsb,EAAKpb,EAAE,GAAKW,EAC5BY,EAAI,GAAKzB,EAAE,GAAKsb,EAAKpb,EAAE,GAAKW,EAC5BY,EAAI,GAAKzB,EAAE,GAAKsb,EAAKpb,EAAE,GAAKW,EAC5BY,EAAI,GAAKzB,EAAE,GAAKsb,EAAKpb,EAAE,GAAKW,EACrBY,EAUF,SAASW,EAAOX,EAAKzB,GAC1B,IAAIub,EAAQtJ,EAAcjS,GAS1B,OARAyB,EAAI,IAAMzB,EAAE,GAAKub,EACjB9Z,EAAI,IAAMzB,EAAE,GAAKub,EACjB9Z,EAAI,IAAMzB,EAAE,GAAKub,EACjB9Z,EAAI,GAAKzB,EAAE,GAAKub,EAChB9Z,EAAI,IAAMzB,EAAE,GAAKub,EACjB9Z,EAAI,IAAMzB,EAAE,GAAKub,EACjB9Z,EAAI,IAAMzB,EAAE,GAAKub,EACjB9Z,EAAI,GAAKzB,EAAE,GAAKub,EACT9Z,EAWF,SAASsW,EAAUtW,EAAKzB,GAS7B,OARAyB,EAAI,IAAMzB,EAAE,GACZyB,EAAI,IAAMzB,EAAE,GACZyB,EAAI,IAAMzB,EAAE,GACZyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,IAAMzB,EAAE,GACZyB,EAAI,IAAMzB,EAAE,GACZyB,EAAI,IAAMzB,EAAE,GACZyB,EAAI,GAAKzB,EAAE,GACJyB,EAUF,IAAI7F,EAAMjD,QAAAiD,OAAGwd,EAAKxd,OAMdmO,EAAGpR,QAAAoR,IAAGnO,EASNqW,EAAatZ,QAAAsZ,cAAGmH,EAAKnH,cAMrByC,EAAM/b,QAAA+b,OAAGzC,EAUb,SAASG,EAAU3Q,EAAKzB,GAC7B,IAAIoL,EAAY6G,EAAcjS,GAE9B,GAAIoL,EAAY,EAAG,CACjBA,EAAY3L,KAAKc,KAAK6K,GACtB,IAAI/I,EAAKrC,EAAE,GAAKoL,EACZjJ,EAAKnC,EAAE,GAAKoL,EACZ9I,EAAKtC,EAAE,GAAKoL,EACZ7I,EAAKvC,EAAE,GAAKoL,EACZxI,EAAK5C,EAAE,GACP6C,EAAK7C,EAAE,GACP8C,EAAK9C,EAAE,GACP+C,EAAK/C,EAAE,GACPwb,EAAUnZ,EAAKO,EAAKT,EAAKU,EAAKP,EAAKQ,EAAKP,EAAKQ,EACjDtB,EAAI,GAAKY,EACTZ,EAAI,GAAKU,EACTV,EAAI,GAAKa,EACTb,EAAI,GAAKc,EACTd,EAAI,IAAMmB,EAAKP,EAAKmZ,GAAWpQ,EAC/B3J,EAAI,IAAMoB,EAAKV,EAAKqZ,GAAWpQ,EAC/B3J,EAAI,IAAMqB,EAAKR,EAAKkZ,GAAWpQ,EAC/B3J,EAAI,IAAMsB,EAAKR,EAAKiZ,GAAWpQ,EAGjC,OAAO3J,EASF,SAASkC,EAAI3D,GAClB,MAAO,SAAWA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,KAAOA,EAAE,GAAK,IAUtH,SAASmE,EAAYnE,EAAGE,GAC7B,OAAOF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,GAUpI,SAASD,EAAOD,EAAGE,GACxB,IAAImC,EAAKrC,EAAE,GACPmC,EAAKnC,EAAE,GACPsC,EAAKtC,EAAE,GACPuC,EAAKvC,EAAE,GACPiF,EAAKjF,EAAE,GACPkF,EAAKlF,EAAE,GACPiJ,EAAKjJ,EAAE,GACPkJ,EAAKlJ,EAAE,GACP4C,EAAK1C,EAAE,GACP2C,EAAK3C,EAAE,GACP4C,EAAK5C,EAAE,GACP6C,EAAK7C,EAAE,GACPiF,EAAKjF,EAAE,GACPkF,EAAKlF,EAAE,GACPkJ,EAAKlJ,EAAE,GACPmJ,EAAKnJ,EAAE,GACX,OAAOT,KAAKU,IAAIkC,EAAKO,IAAOpC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIkC,GAAK5C,KAAKU,IAAIyC,KAAQnD,KAAKU,IAAIgC,EAAKU,IAAOrC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIgC,GAAK1C,KAAKU,IAAI0C,KAAQpD,KAAKU,IAAImC,EAAKQ,IAAOtC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAImC,GAAK7C,KAAKU,IAAI2C,KAAQrD,KAAKU,IAAIoC,EAAKQ,IAAOvC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIoC,GAAK9C,KAAKU,IAAI4C,KAAQtD,KAAKU,IAAI8E,EAAKE,IAAO3E,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAI8E,GAAKxF,KAAKU,IAAIgF,KAAQ1F,KAAKU,IAAI+E,EAAKE,IAAO5E,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAI+E,GAAKzF,KAAKU,IAAIiF,KAAQ3F,KAAKU,IAAI8I,EAAKG,IAAO5I,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAI8I,GAAKxJ,KAAKU,IAAIiJ,KAAQ3J,KAAKU,IAAI+I,EAAKG,IAAO7I,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAI+I,GAAKzJ,KAAKU,IAAIkJ;;AClNtqB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,IAAA,EAAA,QAAA,MAAA,EAAA,QAAA,KAAA,EAAA,QAAA,MAAA,EAAA,QAAA,KAAA,EAAA,QAAA,OAAA,EAAA,QAAA,MAAA,EAAA,QAAA,UAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,OAAA,EAAA,QAAA,IAAA,EAAA,QAAA,OAAA,EAAA,QAAA,YAAA,EAAA,QAAA,MAAA,EAAA,QAAA,aAAA,EAAA,QAAA,WAAA,EAAA,QAAA,QAAA,EAAA,QAAA,SAAA,EAAA,QAAA,OAAA,EAAA,QAAA,KAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,OAAA,EAAA,QAAA,UAAA,EAAA,QAAA,OAAA,EAAA,QAAA,OAAA,EAAA,QAAA,MAAA,EAAA,QAAA,MAAA,EAAA,QAAA,YAAA,EAAA,QAAA,IAAA,EAAA,QAAA,OAAA,QAAA,aAAA,EAAA,QAAA,gBAAA,EAAA,QAAA,cAAA,EAAA,QAAA,IAAA,EAAA,QAAA,SAAA,EAAA,QAAA,SAAA,EAAA,QAAA,cAAA,EAAA,QAAA,eAAA,EAAA,QAAA,cAAA,EAAA,QAAA,cAAA,EAAA,QAAA,KAAA,EA/mBH,IAAA7I,EAAAC,EAAAvF,QAAA,gBAAwC,SAAAwF,EAAAtI,GAAAuI,GAAAA,mBAAAA,QAAAC,OAAAA,KAAAA,IAAAA,EAAAD,IAAAA,QAAAE,EAAAF,IAAAA,QAAAD,OAAAA,EAAAA,SAAAtI,GAAAA,OAAAA,EAAAyI,EAAAD,IAAAxI,GAAA,SAAAqI,EAAArI,EAAAwI,GAAAA,IAAAA,GAAAxI,GAAAA,EAAAgD,WAAAhD,OAAAA,EAAAA,GAAAA,OAAAA,GAAAA,iBAAAA,GAAAA,mBAAAA,EAAAQ,MAAAA,CAAAA,QAAAR,GAAAyI,IAAAA,EAAAH,EAAAE,GAAAC,GAAAA,GAAAA,EAAAC,IAAA1I,GAAAyI,OAAAA,EAAAE,IAAA3I,GAAA4I,IAAAA,EAAAC,CAAAA,UAAAjB,MAAAA,EAAAf,OAAAiC,gBAAAjC,OAAAkC,yBAAAC,IAAAA,IAAAA,KAAAhJ,EAAAgJ,GAAAA,YAAAA,GAAAC,GAAAA,eAAAC,KAAAlJ,EAAAgJ,GAAAd,CAAAA,IAAAA,EAAAN,EAAAf,OAAAkC,yBAAA/I,EAAAgJ,GAAAd,KAAAA,IAAAA,EAAAS,KAAAT,EAAAiB,KAAAtC,OAAAiC,eAAAF,EAAAI,EAAAd,GAAAU,EAAAI,GAAAhJ,EAAAgJ,GAAAJ,OAAAA,EAAApI,QAAAR,EAAAyI,GAAAA,EAAAU,IAAAnJ,EAAA4I,GAAAA,EAYjC,SAASQ,IACd,IAAIC,EAAM,IAAIjB,EAASnB,WAAW,GAOlC,OALImB,EAASnB,YAAcC,eACzBmC,EAAI,GAAK,EACTA,EAAI,GAAK,GAGJA,EASF,SAASC,EAAM1B,GACpB,IAAIyB,EAAM,IAAIjB,EAASnB,WAAW,GAGlC,OAFAoC,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACJyB,EAUF,SAASI,EAAWtI,EAAGE,GAC5B,IAAIgI,EAAM,IAAIjB,EAASnB,WAAW,GAGlC,OAFAoC,EAAI,GAAKlI,EACTkI,EAAI,GAAKhI,EACFgI,EAUF,SAASE,EAAKF,EAAKzB,GAGxB,OAFAyB,EAAI,GAAKzB,EAAE,GACXyB,EAAI,GAAKzB,EAAE,GACJyB,EAWF,SAASF,EAAIE,EAAKlI,EAAGE,GAG1B,OAFAgI,EAAI,GAAKlI,EACTkI,EAAI,GAAKhI,EACFgI,EAWF,SAASwC,EAAIxC,EAAKzB,EAAGE,GAG1B,OAFAuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GACXuB,EAWF,SAASyC,EAASzC,EAAKzB,EAAGE,GAG/B,OAFAuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GACXuB,EAWF,SAASkB,EAASlB,EAAKzB,EAAGE,GAG/B,OAFAuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GACXuB,EAWF,SAASgQ,EAAOhQ,EAAKzB,EAAGE,GAG7B,OAFAuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAClBuB,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GACXuB,EAUF,SAASiQ,EAAKjQ,EAAKzB,GAGxB,OAFAyB,EAAI,GAAKhC,KAAKiS,KAAK1R,EAAE,IACrByB,EAAI,GAAKhC,KAAKiS,KAAK1R,EAAE,IACdyB,EAUF,SAASkQ,EAAMlQ,EAAKzB,GAGzB,OAFAyB,EAAI,GAAKhC,KAAKkS,MAAM3R,EAAE,IACtByB,EAAI,GAAKhC,KAAKkS,MAAM3R,EAAE,IACfyB,EAWF,SAASmQ,EAAInQ,EAAKzB,EAAGE,GAG1B,OAFAuB,EAAI,GAAKhC,KAAKmS,IAAI5R,EAAE,GAAIE,EAAE,IAC1BuB,EAAI,GAAKhC,KAAKmS,IAAI5R,EAAE,GAAIE,EAAE,IACnBuB,EAWF,SAASrB,EAAIqB,EAAKzB,EAAGE,GAG1B,OAFAuB,EAAI,GAAKhC,KAAKW,IAAIJ,EAAE,GAAIE,EAAE,IAC1BuB,EAAI,GAAKhC,KAAKW,IAAIJ,EAAE,GAAIE,EAAE,IACnBuB,EAUF,SAASoQ,EAAMpQ,EAAKzB,GAGzB,OAFAyB,EAAI,GAAKhC,KAAKoS,MAAM7R,EAAE,IACtByB,EAAI,GAAKhC,KAAKoS,MAAM7R,EAAE,IACfyB,EAWF,SAASxD,EAAMwD,EAAKzB,EAAGE,GAG5B,OAFAuB,EAAI,GAAKzB,EAAE,GAAKE,EAChBuB,EAAI,GAAKzB,EAAE,GAAKE,EACTuB,EAYF,SAASqQ,EAAYrQ,EAAKzB,EAAGE,EAAGjC,GAGrC,OAFAwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EACvBwD,EAAI,GAAKzB,EAAE,GAAKE,EAAE,GAAKjC,EAChBwD,EAUF,SAASsQ,EAAS/R,EAAGE,GAC1B,IAAI3G,EAAI2G,EAAE,GAAKF,EAAE,GACbvG,EAAIyG,EAAE,GAAKF,EAAE,GACjB,OAAOP,KAAKY,MAAM9G,EAAGE,GAUhB,SAASuY,EAAgBhS,EAAGE,GACjC,IAAI3G,EAAI2G,EAAE,GAAKF,EAAE,GACbvG,EAAIyG,EAAE,GAAKF,EAAE,GACjB,OAAOzG,EAAIA,EAAIE,EAAIA,EASd,SAASmC,EAAOoE,GACrB,IAAIzG,EAAIyG,EAAE,GACNvG,EAAIuG,EAAE,GACV,OAAOP,KAAKY,MAAM9G,EAAGE,GAShB,SAASwY,EAAcjS,GAC5B,IAAIzG,EAAIyG,EAAE,GACNvG,EAAIuG,EAAE,GACV,OAAOzG,EAAIA,EAAIE,EAAIA,EAUd,SAASyY,EAAOzQ,EAAKzB,GAG1B,OAFAyB,EAAI,IAAMzB,EAAE,GACZyB,EAAI,IAAMzB,EAAE,GACLyB,EAUF,SAAS0Q,EAAQ1Q,EAAKzB,GAG3B,OAFAyB,EAAI,GAAK,EAAMzB,EAAE,GACjByB,EAAI,GAAK,EAAMzB,EAAE,GACVyB,EAUF,SAAS2Q,EAAU3Q,EAAKzB,GAC7B,IAAIzG,EAAIyG,EAAE,GACNvG,EAAIuG,EAAE,GACN+J,EAAMxQ,EAAIA,EAAIE,EAAIA,EAStB,OAPIsQ,EAAM,IAERA,EAAM,EAAItK,KAAKc,KAAKwJ,IAGtBtI,EAAI,GAAKzB,EAAE,GAAK+J,EAChBtI,EAAI,GAAKzB,EAAE,GAAK+J,EACTtI,EAUF,SAAS4Q,EAAIrS,EAAGE,GACrB,OAAOF,EAAE,GAAKE,EAAE,GAAKF,EAAE,GAAKE,EAAE,GAYzB,SAASoS,EAAM7Q,EAAKzB,EAAGE,GAC5B,IAAIjG,EAAI+F,EAAE,GAAKE,EAAE,GAAKF,EAAE,GAAKE,EAAE,GAG/B,OAFAuB,EAAI,GAAKA,EAAI,GAAK,EAClBA,EAAI,GAAKxH,EACFwH,EAYF,SAAS8Q,EAAK9Q,EAAKzB,EAAGE,EAAGW,GAC9B,IAAImK,EAAKhL,EAAE,GACPiL,EAAKjL,EAAE,GAGX,OAFAyB,EAAI,GAAKuJ,EAAKnK,GAAKX,EAAE,GAAK8K,GAC1BvJ,EAAI,GAAKwJ,EAAKpK,GAAKX,EAAE,GAAK+K,GACnBxJ,EAUF,SAAS/B,EAAO+B,EAAKxD,GAC1BA,EAAQA,GAAS,EACjB,IAAI2C,EAAwB,EAApBJ,EAAShB,SAAiBC,KAAKK,GAGvC,OAFA2B,EAAI,GAAKhC,KAAK4D,IAAIzC,GAAK3C,EACvBwD,EAAI,GAAKhC,KAAK0D,IAAIvC,GAAK3C,EAChBwD,EAWF,SAASga,EAAcha,EAAKzB,EAAGmT,GACpC,IAAI5Z,EAAIyG,EAAE,GACNvG,EAAIuG,EAAE,GAGV,OAFAyB,EAAI,GAAK0R,EAAE,GAAK5Z,EAAI4Z,EAAE,GAAK1Z,EAC3BgI,EAAI,GAAK0R,EAAE,GAAK5Z,EAAI4Z,EAAE,GAAK1Z,EACpBgI,EAWF,SAASia,EAAeja,EAAKzB,EAAGmT,GACrC,IAAI5Z,EAAIyG,EAAE,GACNvG,EAAIuG,EAAE,GAGV,OAFAyB,EAAI,GAAK0R,EAAE,GAAK5Z,EAAI4Z,EAAE,GAAK1Z,EAAI0Z,EAAE,GACjC1R,EAAI,GAAK0R,EAAE,GAAK5Z,EAAI4Z,EAAE,GAAK1Z,EAAI0Z,EAAE,GAC1B1R,EAYF,SAAS2R,EAAc3R,EAAKzB,EAAGmT,GACpC,IAAI5Z,EAAIyG,EAAE,GACNvG,EAAIuG,EAAE,GAGV,OAFAyB,EAAI,GAAK0R,EAAE,GAAK5Z,EAAI4Z,EAAE,GAAK1Z,EAAI0Z,EAAE,GACjC1R,EAAI,GAAK0R,EAAE,GAAK5Z,EAAI4Z,EAAE,GAAK1Z,EAAI0Z,EAAE,GAC1B1R,EAaF,SAASyR,EAAczR,EAAKzB,EAAGmT,GACpC,IAAI5Z,EAAIyG,EAAE,GACNvG,EAAIuG,EAAE,GAGV,OAFAyB,EAAI,GAAK0R,EAAE,GAAK5Z,EAAI4Z,EAAE,GAAK1Z,EAAI0Z,EAAE,IACjC1R,EAAI,GAAK0R,EAAE,GAAK5Z,EAAI4Z,EAAE,GAAK1Z,EAAI0Z,EAAE,IAC1B1R,EAWF,SAASuB,EAAOvB,EAAKzB,EAAGE,EAAG+C,GAEhC,IAAI0Y,EAAK3b,EAAE,GAAKE,EAAE,GACd0b,EAAK5b,EAAE,GAAKE,EAAE,GACd2b,EAAOpc,KAAK0D,IAAIF,GAChB6Y,EAAOrc,KAAK4D,IAAIJ,GAIpB,OAFAxB,EAAI,GAAKka,EAAKG,EAAOF,EAAKC,EAAO3b,EAAE,GACnCuB,EAAI,GAAKka,EAAKE,EAAOD,EAAKE,EAAO5b,EAAE,GAC5BuB,EASF,SAASyS,EAAMlU,EAAGE,GACvB,IAAIgQ,EAAKlQ,EAAE,GACPoQ,EAAKpQ,EAAE,GACPmH,EAAKjH,EAAE,GACPkH,EAAKlH,EAAE,GAEXiU,EAAM1U,KAAKc,KAAK2P,EAAKA,EAAKE,EAAKA,GAAM3Q,KAAKc,KAAK4G,EAAKA,EAAKC,EAAKA,GAE9DgN,EAASD,IAAQjE,EAAK/I,EAAKiJ,EAAKhJ,GAAM+M,EAEtC,OAAO1U,KAAK4U,KAAK5U,KAAKmS,IAAInS,KAAKW,IAAIgU,GAAS,GAAI,IAS3C,SAASE,EAAK7S,GAGnB,OAFAA,EAAI,GAAK,EACTA,EAAI,GAAK,EACFA,EASF,SAASkC,EAAI3D,GAClB,MAAO,QAAUA,EAAE,GAAK,KAAOA,EAAE,GAAK,IAUjC,SAASmE,EAAYnE,EAAGE,GAC7B,OAAOF,EAAE,KAAOE,EAAE,IAAMF,EAAE,KAAOE,EAAE,GAU9B,SAASD,EAAOD,EAAGE,GACxB,IAAImC,EAAKrC,EAAE,GACPmC,EAAKnC,EAAE,GACP4C,EAAK1C,EAAE,GACP2C,EAAK3C,EAAE,GACX,OAAOT,KAAKU,IAAIkC,EAAKO,IAAOpC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIkC,GAAK5C,KAAKU,IAAIyC,KAAQnD,KAAKU,IAAIgC,EAAKU,IAAOrC,EAASpB,QAAUK,KAAKW,IAAI,EAAKX,KAAKU,IAAIgC,GAAK1C,KAAKU,IAAI0C,IAOpK,IAAIkH,EAAGpR,QAAAoR,IAAGnO,EAMN2I,EAAG5L,QAAA4L,IAAGL,EAMNI,EAAG3L,QAAA2L,IAAG3B,EAMN4R,EAAG5b,QAAA4b,IAAG9C,EAMN+C,EAAI7b,QAAA6b,KAAGzC,EAMP0C,EAAO9b,QAAA8b,QAAGzC,EAMV0C,EAAM/b,QAAA+b,OAAGzC,EAcT9S,EAAOxG,QAAAwG,QAAG,WACnB,IAAIwV,EAAMnT,IACV,OAAO,SAAUxB,EAAG4U,EAAQC,EAAQC,EAAOC,EAAIC,GAC7C,IAAI1U,EAAG2U,EAgBP,IAdKL,IACHA,EAAS,GAGNC,IACHA,EAAS,GAITI,EADEH,EACErV,KAAKmS,IAAIkD,EAAQF,EAASC,EAAQ7U,EAAEpE,QAEpCoE,EAAEpE,OAGH0E,EAAIuU,EAAQvU,EAAI2U,EAAG3U,GAAKsU,EAC3BD,EAAI,GAAK3U,EAAEM,GACXqU,EAAI,GAAK3U,EAAEM,EAAI,GACfyU,EAAGJ,EAAKA,EAAKK,GACbhV,EAAEM,GAAKqU,EAAI,GACX3U,EAAEM,EAAI,GAAKqU,EAAI,GAGjB,OAAO3U,GA3BU;;ACzkBa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,KAAA,QAAA,KAAA,QAAA,KAAA,QAAA,MAAA,QAAA,KAAA,QAAA,KAAA,QAAA,KAAA,QAAA,MAAA,QAAA,KAAA,QAAA,cAAA,EATlC,IAAAQ,EAAAC,EAAAvF,QAAA,gBAAwCvC,QAAA6H,SAAAA,EACxC,IAAAub,EAAAtb,EAAAvF,QAAA,cAAkCvC,QAAAojB,KAAAA,EAClC,IAAAC,EAAAvb,EAAAvF,QAAA,eAAoCvC,QAAAqjB,MAAAA,EACpC,IAAA5F,EAAA3V,EAAAvF,QAAA,cAAkCvC,QAAAyd,KAAAA,EAClC,IAAAiD,EAAA5Y,EAAAvF,QAAA,cAAkCvC,QAAA0gB,KAAAA,EAClC,IAAAD,EAAA3Y,EAAAvF,QAAA,cAAkCvC,QAAAygB,KAAAA,EAClC,IAAA6C,EAAAxb,EAAAvF,QAAA,eAAoCvC,QAAAsjB,MAAAA,EACpC,IAAAC,EAAAzb,EAAAvF,QAAA,cAAkCvC,QAAAujB,KAAAA,EAClC,IAAA7F,EAAA5V,EAAAvF,QAAA,cAAkCvC,QAAA0d,KAAAA,EAClC,IAAAC,EAAA7V,EAAAvF,QAAA,cAAkC,SAAAwF,EAAAtI,GAAAuI,GAAAA,mBAAAA,QAAAC,OAAAA,KAAAA,IAAAA,EAAAD,IAAAA,QAAAE,EAAAF,IAAAA,QAAAD,OAAAA,EAAAA,SAAAtI,GAAAA,OAAAA,EAAAyI,EAAAD,IAAAxI,GAAA,SAAAqI,EAAArI,EAAAwI,GAAAA,IAAAA,GAAAxI,GAAAA,EAAAgD,WAAAhD,OAAAA,EAAAA,GAAAA,OAAAA,GAAAA,iBAAAA,GAAAA,mBAAAA,EAAAQ,MAAAA,CAAAA,QAAAR,GAAAyI,IAAAA,EAAAH,EAAAE,GAAAC,GAAAA,GAAAA,EAAAC,IAAA1I,GAAAyI,OAAAA,EAAAE,IAAA3I,GAAA4I,IAAAA,EAAAC,CAAAA,UAAAjB,MAAAA,EAAAf,OAAAiC,gBAAAjC,OAAAkC,yBAAAC,IAAAA,IAAAA,KAAAhJ,EAAAgJ,GAAAA,YAAAA,GAAAC,GAAAA,eAAAC,KAAAlJ,EAAAgJ,GAAAd,CAAAA,IAAAA,EAAAN,EAAAf,OAAAkC,yBAAA/I,EAAAgJ,GAAAd,KAAAA,IAAAA,EAAAS,KAAAT,EAAAiB,KAAAtC,OAAAiC,eAAAF,EAAAI,EAAAd,GAAAU,EAAAI,GAAAhJ,EAAAgJ,GAAAJ,OAAAA,EAAApI,QAAAR,EAAAyI,GAAAA,EAAAU,IAAAnJ,EAAA4I,GAAAA,EAAArI,QAAA2d,KAAAA;;ACkEd,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA3EpB,IAAA6F,EAAAjhB,QAAA,aAEA,MAAMkhB,EACJxkB,YAAamG,GACX,KAAKA,QAAUA,EACf,KAAKjC,GAAKiC,EAAQjC,GAGpBugB,WAAYlf,EAAcS,GACxB,MAAM,GAAE9B,GAAO,KACf,KAAKwgB,QAAUxgB,EAAGygB,gBAClBzgB,EAAG0gB,aAAa,KAAKF,QAASnf,EAAasf,UAC3C3gB,EAAG0gB,aAAa,KAAKF,QAAS1e,EAAe6e,UAC7C,KAAKC,oBACL,KAAKC,kBAAoB,CACvBC,OAAQ9gB,EAAG+gB,mBAAmB,KAAKP,QAAS,UAC5Cxd,MAAOhD,EAAG+gB,mBAAmB,KAAKP,QAAS,SAC3Cvd,MAAOjD,EAAG+gB,mBAAmB,KAAKP,QAAS,UAI/CQ,cAAeC,GACb,MAAM,GAAEjhB,GAAO,KACTkhB,EAAelhB,EAAGmhB,eACxBnhB,EAAGohB,WAAWphB,EAAGqhB,aAAcH,GAC/BlhB,EAAGshB,WAAWthB,EAAGqhB,aAAc,IAAI7d,aAAayd,GAAOjhB,EAAGuhB,aAG5DC,qBAAsBP,GACpB,MAAM,GAAEjhB,GAAO,KACTkhB,EAAelhB,EAAGmhB,eACxBnhB,EAAGohB,WAAWphB,EAAGyhB,qBAAsBP,GACvClhB,EAAGshB,WAAWthB,EAAGyhB,qBAAsB,IAAIC,YAAYT,GAAOjhB,EAAGuhB,aAGnEre,YAAahB,EAAUE,EAAUD,EAAOa,EAAOC,GAC7C,MAAM,GAAEjD,GAAO,KACfA,EAAG2hB,WAAW,KAAKnB,SACnB,MAAMM,EAAS,IAAItd,aAAa,IAC1Boe,EAAe,IAAIpe,aAAa,GACtC8Z,EAAI,KAACf,UAAUqF,EAAcxf,EAAS3E,EAAG2E,EAASzE,EAAGyE,EAASjE,GAE9D,MAAM0jB,EAAU,IAAIre,aAAa,IAC3Bse,EAAS,IAAIte,aAAa,IAC1Bue,EAAa,IAAIve,aAAa,IAEpC+Z,EAAI,KAAC/T,gBAAgBuY,EAAY,CAAC7f,EAASzE,EAAGyE,EAASvE,EAAGuE,EAAS/D,IACnEof,EAAI,KAAC3V,YAAYka,EAAQ,CAAC3f,EAAM1E,EAAG0E,EAAMxE,EAAGwE,EAAMhE,IAClDof,EAAI,KAACrS,SAAS2W,EAASD,GAEvBrE,EAAI,KAAC1W,SAASia,EAAQiB,EAAYF,GAClCtE,EAAI,KAAC1W,SAASia,EAAQA,EAAQgB,GAE9B9hB,EAAGgiB,iBAAiB,KAAKnB,kBAAkBC,OAAQ9gB,EAAGiiB,MAAOnB,GAC7D9gB,EAAGgiB,iBAAiB,KAAKnB,kBAAkB7d,MAAOhD,EAAGiiB,MAAOjf,GAC5DhD,EAAGgiB,iBAAiB,KAAKnB,kBAAkB5d,MAAOjD,EAAGiiB,MAAOhf,GAG9DxG,UACE,KAAKuD,GAAGkiB,cAAc,KAAK1B,SAG7BI,oBACE,MAAM,QAAEJ,EAAO,GAAExgB,GAAO,KAExB,GADAA,EAAGmiB,YAAY3B,IACVxgB,EAAGoiB,oBAAoB5B,EAASxgB,EAAGqiB,aACtC,MAAM,IAAIhiB,+BAA+BL,EAAGsiB,kBAAkB9B,MAGhE,GADAxgB,EAAGuiB,gBAAgB/B,IACdxgB,EAAGoiB,oBAAoB5B,EAASxgB,EAAGwiB,iBACtC,MAAM,IAAIniB,kCAAkCL,EAAGsiB,kBAAkB9B,OAGtE,IAAA5jB,EAAAC,QAAAC,QAEcwjB;;AC6EQ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAxJvB,IAAAmC,EAAAtjB,EAAAC,QAAA,gBAA+B,SAAAD,EAAA7C,GAAAA,OAAAA,GAAAA,EAAAgD,WAAAhD,EAAAQ,CAAAA,QAAAR,GAE/B,MAAMomB,UAAiBpC,EAAK,QAC1BC,WAAYlf,EAAcS,GACxB,MAAMye,WAAWlf,EAAcS,GAC/B,MAAM,GAAE9B,GAAO,KACf,KAAK2iB,gBAAkB,CACrBC,aAAc5iB,EAAG6iB,kBAAkB,KAAKrC,QAAS,gBACjDsC,SAAU9iB,EAAG6iB,kBAAkB,KAAKrC,QAAS,aAIjDuC,qBAAsBC,EAAQ9V,EAAQ+V,GACpC,KAAKD,OAASA,EACd,KAAK9V,OAASA,EACd,KAAK+V,OAASA,EAGhBC,WAAYC,GACV,KAAKA,QAAUA,EAGjBC,mBAAyD,IAAvCJ,EAAMnjB,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,GAAAF,UAAG,GAAA,GAAKqN,EAAMrN,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,GAAAF,UAAG,GAAA,EAAGojB,EAAMpjB,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,GAAAF,UAAG,GAAA,GACnD,MAAMwjB,EAAanW,EAAS,EACtBoW,EAAiB,EAAV3f,KAAKK,GAAWif,EACvBM,EAAS,GAEf,IAAI/e,EAAI,EACR,IAAKA,EAAI,EAAGA,EAAIye,EAAS,IAAKze,EAAG,CAC/B,MAAMN,GAAMof,EAAO9e,EACb/G,EAAIkG,KAAK4D,IAAIrD,GAAK8e,EAClB7kB,EAAIwF,KAAK0D,IAAInD,GAAK8e,EAExBO,EAAOC,KAAK/lB,GACZ8lB,EAAOC,KAAKH,GACZE,EAAOC,KAAKrlB,GACZolB,EAAOC,KAAK,IACZD,EAAOC,KAAK,IAEZD,EAAOC,KAAK/lB,GACZ8lB,EAAOC,MAAMH,GACbE,EAAOC,KAAKrlB,GACZolB,EAAOC,KAAK,IACZD,EAAOC,KAAK,IAEd,MAAMC,EAAiB,EAAJjf,EACbkf,EAAWD,EAQjB,IANAF,EAAOC,KAAK,GACZD,EAAOC,KAAKH,GACZE,EAAOC,KAAK,GACZD,EAAOC,KAAK,KACZD,EAAOC,KAAK,IAEPhf,EAAI,EAAGA,EAAIye,EAAS,IAAKze,EAAG,CAC/B,MAAMN,GAAMof,EAAO9e,EACb/G,EAAIkG,KAAK4D,IAAIrD,GAAK8e,EAClB7kB,EAAIwF,KAAK0D,IAAInD,GAAK8e,EAElB5e,EAAIF,EAAIP,KAAKK,GACbsB,GAAK3B,KAAK4D,IAAInD,GAAK,GAAK,EACxBoD,GAAK7D,KAAK0D,IAAIjD,GAAK,GAAK,EAE9Bmf,EAAOC,KAAK/lB,GACZ8lB,EAAOC,KAAKH,GACZE,EAAOC,KAAKrlB,GACZolB,EAAOC,KAAKle,GACZie,EAAOC,KAAKhc,GAGd,MAAMmc,EAAYnf,EAElB+e,EAAOC,KAAK,GACZD,EAAOC,MAAMH,GACbE,EAAOC,KAAK,GACZD,EAAOC,KAAK,KACZD,EAAOC,KAAK,IAEZ,MAAMI,EAAcF,EAAWC,EAAY,EAErCE,EAAeZ,EAAS,EAC9B,IAAK,IAAIze,EAAI,EAAGA,EAAIqf,IAAgBrf,EAAG,CACrC,MAAMN,GAAMof,GAAQO,EAAerf,GAC7B/G,EAAIkG,KAAK4D,IAAIrD,GAAK8e,EAClB7kB,EAAIwF,KAAK0D,IAAInD,GAAK8e,EAElB5e,EAAIF,EAAIP,KAAKK,GACbsB,GAAK3B,KAAK4D,IAAInD,GAAK,GAAK,EAAI,GAC5BoD,GAAK7D,KAAK0D,IAAIjD,GAAK,GAAK,EAE9Bmf,EAAOC,KAAK/lB,GACZ8lB,EAAOC,MAAMH,GACbE,EAAOC,KAAKrlB,GACZolB,EAAOC,KAAKle,GACZie,EAAOC,KAAKhc,GAKd,MAAO,CACL+b,OAAQA,EACRO,UA3EgB,EA4EhBL,WAAAA,EACAC,SAAAA,EACAC,UAAAA,EACAC,YAAAA,EACAG,aATmBvf,GAavBzB,OACE,MAAM,GAAE/C,GAAO,KACTijB,EAAS,KAAKA,QAAU,GACxBD,EAAS,KAAKA,QAAU,GACxB9V,EAAS,KAAKA,QAAU,GACxB,OACJqW,EAAM,UACNO,EAAS,WACTL,EAAU,SACVC,EAAQ,UACRC,EAAS,YACTC,EAAW,aACXG,GACE,KAAKX,iBAAiBJ,EAAQ9V,EAAQ+V,GAC1C,KAAKjC,cAAcuC,GAEnBvjB,EAAGgkB,oBACD,KAAKrB,gBAAgBC,aACrB,EACA5iB,EAAGikB,MACHjkB,EAAGiiB,MACH,EAAIze,aAAa0gB,kBACjB,GAEFlkB,EAAGgkB,oBACD,KAAKrB,gBAAgBG,SACrB,EACA9iB,EAAGikB,MACHjkB,EAAGiiB,MACH,EAAIze,aAAa0gB,kBACjB,EAAI1gB,aAAa0gB,mBAEnBlkB,EAAGmkB,wBAAwB,KAAKxB,gBAAgBC,cAChD5iB,EAAGmkB,wBAAwB,KAAKxB,gBAAgBG,UAChD9iB,EAAGokB,YAAYpkB,EAAGqkB,WAAY,KAAKlB,QAAQxC,UAC3C3gB,EAAGskB,cAActkB,EAAGukB,UACpBvkB,EAAGwkB,WAAWxkB,EAAGykB,eAAgBX,EAAWL,GAC5CzjB,EAAGwkB,WAAWxkB,EAAG0kB,aAAchB,EAAUC,GACzC3jB,EAAGwkB,WAAWxkB,EAAG0kB,aAAcd,EAAaG,IAE/C,IAAAnnB,EAAAC,QAAAC,QAEc4lB;;ACxIY,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAhB3B,MAAMiC,EACJ7oB,YAAamG,EAAS2iB,GACpB,KAAKC,UAAU5iB,EAAQjC,GAAI4kB,GAG7BC,UAAW7kB,EAAIoB,GACb,MAAMC,EAAerB,EAAGsB,aAAatB,EAAGuB,eAGxC,GAFAvB,EAAGwB,aAAaH,EAAcD,GAC9BpB,EAAGyB,cAAcJ,IACZrB,EAAG0B,mBAAmBL,EAAcrB,EAAG2B,gBAC1C,MAAM,IAAItB,uCAAuCL,EAAG4B,iBAAiBP,MAEvE,KAAKsf,SAAWtf,GAEnB,IAAAzE,EAAAC,QAAAC,QAEc6nB;;ACAc,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAhB7B,MAAMG,EACJhpB,YAAamG,EAAS2iB,GACpB,KAAKC,UAAU5iB,EAAQjC,GAAI4kB,GAG7BC,UAAW7kB,EAAIoB,GACb,MAAMU,EAAiB9B,EAAGsB,aAAatB,EAAG+B,iBAG1C,GAFA/B,EAAGwB,aAAaM,EAAgBV,GAChCpB,EAAGyB,cAAcK,IACZ9B,EAAG0B,mBAAmBI,EAAgB9B,EAAG2B,gBAC5C,MAAM,IAAItB,yCAAyCL,EAAG4B,iBAAiBE,MAEzE,KAAK6e,SAAW7e,GAEnB,IAAAlF,EAAAC,QAAAC,QAEcgoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACMI,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAtBnB,IAAAC,EAAA5lB,EAAAC,QAAA,0BACA4lB,EAAA7lB,EAAAC,QAAA,qCACA6lB,EAAA9lB,EAAAC,QAAA,oCACA8lB,EAAA/lB,EAAAC,QAAA,sCACA+lB,EAAAhmB,EAAAC,QAAA,kBACAgmB,EAAAjmB,EAAAC,QAAA,kBAA6C,SAAAD,EAAA7C,GAAAA,OAAAA,GAAAA,EAAAgD,WAAAhD,EAAAQ,CAAAA,QAAAR,GAE7C,MAAM+oB,UAAarjB,EAAU,QAC3Bue,WAAYyC,EAAQsC,GAAwB,IAAbC,EAAM1lB,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,GAAAF,UAAG,GAAA,GACtC,MAAMwB,EAAe,IAAIsjB,EAAY,QAAC,KAAK1iB,QAASujB,EAAe,SAC7D1jB,EAAiB,IAAIgjB,EAAc,QAAC,KAAK7iB,QAASwjB,EAAiB,SACnE5iB,EAAQ,IAAI6f,EAAQ,QAAC,KAAKzgB,SAChCY,EAAM0d,WAAWlf,EAAcS,GAC/Be,EAAMkgB,qBAAqBC,EAAQsC,EAAWC,GAC9C,KAAK3iB,UAAUC,GAGjBqgB,WAAYwC,GACV,KAAK5iB,QAAQogB,WAAWwC,IAE3B,IAAA9oB,EAAAC,QAAAC,QAEcuoB;;ACoDK,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA1EpB,MAAMM,EACJ7pB,YAAamG,GACX,MAAM,GAAEjC,GAAOiC,EACf,KAAKA,QAAUA,EACf,KAAK2jB,aAAe,CAAC,EAAK,EAAK,EAAK,GACpC,KAAKC,cAAgB,GACrB7lB,EAAG8lB,OAAO9lB,EAAG+lB,YACb/lB,EAAG8lB,OAAO9lB,EAAGgmB,WACbhmB,EAAGimB,UAAUjmB,EAAGkmB,KAChBlmB,EAAGmmB,SAASnmB,EAAGomB,MAEf,KAAKC,iBAAmB,KAAKA,iBAAiBpqB,KAAK,MACnD,KAAKqqB,mBAAqB,KAAKA,mBAAmBrqB,KAAK,MAGzDsqB,cAAeC,GACb,KAAKvkB,QAAQjC,GAAGwmB,WAAWA,EAAW,GAAIA,EAAW,GAAIA,EAAW,GAAIA,EAAW,IACnF,KAAKZ,aAAeY,EAGtBC,cAAeC,GACb,MAAM,cAAEb,GAAkB,KAC1Ba,EAAWhkB,SAAS,MACpBgkB,EAAWC,aAAed,EAAc/lB,OACxC+lB,EAAcrC,KAAKkD,GAGrBE,iBAAkBF,GAChB,MAAMG,EAAQH,EAAWC,kBACX5mB,IAAV8mB,GACF,KAAKhB,cAAciB,OAAOD,EAAO,GAIrCE,UAAWC,GACT,KAAKC,SAAWD,EAGlB,aACE,OAAO,KAAKC,SAGd,aACE,OAAO,KAAKhlB,QAAQtC,OAAOuN,OAG7B,YACE,OAAO,KAAKjL,QAAQtC,OAAOsN,MAG7BhO,SACE,KAAKgD,QAAQpB,iBACb,KAAKomB,SAAShoB,SACd,KAAK4mB,cAAcxiB,QAAQ,KAAKijB,oBAChC,KAAKrkB,QAAQjB,mBAGf+B,OACE,KAAKd,QAAQhB,gBACb,MAAQgB,SAAS,GAAEjC,IAAS,KAC5BA,EAAGknB,MAAMlnB,EAAGmnB,iBAAmBnnB,EAAGonB,kBAClC,KAAKvB,cAAcxiB,QAAQ,KAAKgjB,kBAChC,KAAKpkB,QAAQf,iBAGfolB,mBAAoBI,GAClBA,EAAWznB,SAGbonB,iBAAkBK,GAChBA,EAAW3jB,KAAK,KAAKkkB,SAASI,QAAS,KAAKJ,SAASK,UAExD,IAAA1qB,EAAAC,QAAAC,QAEc6oB;;ACKM,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA/ErB,IAAAtF,EAAAjhB,QAAA,aACA2lB,EAAA5lB,EAAAC,QAAA,kBAAsC,SAAAD,EAAA7C,GAAAA,OAAAA,GAAAA,EAAAgD,WAAAhD,EAAAQ,CAAAA,QAAAR,GAEtC,MAAMirB,UAAevlB,EAAU,QAC7BlG,YAAamG,GACX,MAAMA,GACN,KAAKulB,aAAe,IAAIhkB,aAAa,IACrC,KAAKikB,aAAe,IAAIjkB,aAAa,IACrC,KAAKkkB,MAAQhjB,EAAQ,SAACT,SAAS,IAC/B,KAAK0jB,QAAU,CAAC,GAAK,KACrB,KAAKC,iBAAmB,KACxB,KAAKC,QAAU,GAAK,EAGtBC,YAAWC,GAAa,IAAVtqB,EAAGE,EAAGQ,GAAE4pB,EACpB,KAAK7lB,SAAW,CAAEzE,EAAAA,EAAGE,EAAAA,EAAGQ,EAAAA,GAG1B6pB,eAAgBC,GACd,KAAKJ,QAAUI,EAGjBC,aACE,KAAKN,iBAAmB,KAG1B7T,OAAQ7R,GACN,KAAK0lB,iBAAmB1lB,EAG1BimB,eAAgBpV,GACd,KAAK2U,MAAQhjB,EAAQ,SAACT,SAAS8O,GAGjCqV,SAAUnW,EAAMC,GACd,KAAKyV,QAAU,CAAC1V,EAAMC,GAGxB,cACE,MAAMmW,EAAO,CAAC,KAAKnmB,SAASzE,EAAG,KAAKyE,SAASvE,EAAG,KAAKuE,SAAS/D,GAC9D,GAAI,KAAKypB,iBACPrK,EAAI,KAACxJ,OACH,KAAKyT,aACLa,EACA,KAAKT,iBACL,CAAC,EAAG,EAAG,QAEJ,CACL,MAAM,SAAE1lB,EAAQ,SAAEE,EAAQ,MAAED,GAAU,KAChCyf,EAAe,IAAIpe,aAAa,GACtC8Z,EAAI,KAACf,UAAUqF,EAAcxf,EAAS3E,EAAG2E,EAASzE,EAAGyE,EAASjE,GAE9D,MAAM0jB,EAAU,IAAIre,aAAa,IAC3Bse,EAAS,IAAIte,aAAa,IAC1Bue,EAAa,IAAIve,aAAa,IAEpC+Z,EAAI,KAAC/T,gBAAgBuY,EAAY,CAAC7f,EAASzE,EAAGyE,EAASvE,EAAGuE,EAAS/D,IACnEof,EAAI,KAAC3V,YAAYka,EAAQ,CAAC3f,EAAM1E,EAAG0E,EAAMxE,EAAGwE,EAAMhE,IAClDof,EAAI,KAACrS,SAAS2W,EAASD,GAEvBrE,EAAI,KAAC1W,SAAS,KAAK2gB,aAAczF,EAAYF,GAC7CtE,EAAI,KAAC1W,SAAS,KAAK2gB,aAAc,KAAKA,aAAc1F,GACpDvE,EAAI,KAACjX,OAAO,KAAKkhB,aAAc,KAAKA,cAEtC,OAAO,KAAKA,aAGd,cAQE,OAPAjK,EAAI,KAAC3K,YACH,KAAK6U,aACL,KAAKC,MACL,KAAKG,QACL,KAAKF,QAAQ,GACb,KAAKA,QAAQ,IAER,KAAKF,cAEf,IAAA7qB,EAAAC,QAAAC,QAEcyqB;;AClCO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA7CtB,MAAMe,EACJxsB,YAAamG,GACX,KAAKjC,GAAKiC,EAAQjC,GAGpBuoB,SAAUC,GAAmC,IAA5BC,EAAQ5oB,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,GAAAF,UAAG,GAAA,EAAG6oB,EAAI7oB,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,IAAAF,UAAG,GACpC,KAAK8oB,OAASD,EACd,KAAKE,WAAaH,EAClB,KAAKI,UAAUL,GAGjBM,UAAWC,GAAalpB,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,IAAAF,UAAG,GAAiB,IAAd6oB,EAAI7oB,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,IAAAF,UAAG,GACnC,OAAO,IAAImpB,QAAQ,CAACC,EAASC,KAC3B,KAAKP,OAASD,EACd,KAAKE,WAAa,EAClB,MAAMJ,EAAQW,SAASC,cAAc,OACrCZ,EAAMa,OAAS,MACb,KAAKR,UAAUL,GACfS,EAAQT,KAEVA,EAAM5D,IAAMmE,IAIhB,eACE,OAAO,KAAKO,WAGdT,UAAWL,GACT,MAAM,GAAExoB,GAAO,KACTyoB,EAA+B,IAApB,KAAKG,WAAmB5oB,EAAGupB,KAAOvpB,EAAGwpB,IACtD,KAAKF,WAAatpB,EAAGypB,gBACrBzpB,EAAGokB,YAAYpkB,EAAGqkB,WAAY,KAAKiF,YACnC,MAAMI,EAAO,KAAKf,OAAS3oB,EAAG2pB,OAAS3pB,EAAG4pB,cAC1C5pB,EAAG6pB,cAAc7pB,EAAGqkB,WAAYrkB,EAAG8pB,eAAgBJ,GACnD1pB,EAAG6pB,cAAc7pB,EAAGqkB,WAAYrkB,EAAG+pB,eAAgBL,GACnD1pB,EAAG6pB,cAAc7pB,EAAGqkB,WAAYrkB,EAAGgqB,mBAAoBhqB,EAAGiqB,QAC1DjqB,EAAG6pB,cAAc7pB,EAAGqkB,WAAYrkB,EAAGkqB,mBAAoBlqB,EAAGiqB,QAE1DjqB,EAAGmqB,WAAWnqB,EAAGqkB,WAAY,EAAGoE,EAAUA,EAAUzoB,EAAGoqB,cAAe5B,GAEtExoB,EAAGokB,YAAYpkB,EAAGqkB,WAAY,OAEjC,IAAAznB,EAAAC,QAAAC,QAEcwrB;;ACzCa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAJ5B,MAAM+B,EACJprB,OAAQynB,EAAYzkB,KACrB,IAAArF,EAAAC,QAAAC,QAEcutB;;ACuNY,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA3N3B,MAAMC,EACJxuB,YAAausB,EAAMkC,EAAIC,GAAiD,IAAvCC,EAAQ5qB,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,GAAAF,UAAGyqB,GAAAA,EAAaI,OAAOT,OAC9D,KAAKU,OAASlnB,MAAMmnB,QAAQvC,GAAQA,EAAO,CAACA,GAC5C,KAAKwC,KAAOpnB,MAAMmnB,QAAQL,GAAMA,EAAK,CAACA,GACtC,KAAKO,WAAaN,EAClB,KAAKO,YAAcP,EACnB,KAAKQ,WAAaP,EAClB,KAAKQ,QAAS,EAGhBrlB,QAAmC,IAA5B6kB,EAAQ5qB,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,GAAAF,UAAG,GAAA,KAAKmrB,WACrB,OAAO,IAAIV,EAAa,KAAKK,OAAQ,KAAKE,KAAM,KAAKC,WAAYL,GAGnES,UAAqC,IAA5BT,EAAQ5qB,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,GAAAF,UAAG,GAAA,KAAKmrB,WACvB,OAAO,IAAIV,EAAa,KAAKO,KAAM,KAAKF,OAAQ,KAAKG,WAAYL,GAGnEU,QACE,KAAKJ,YAAc,KAAKD,WACxB,KAAKG,QAAS,EAGhB,WACE,OAAO,KAAKA,OAGdhsB,OAAQmsB,GACN,MAAM,OAAET,EAAM,KAAEE,GAAS,KACzB,GAAI,KAAKI,OAAQ,OAAO,KAAKJ,KAC7B,MAAMQ,EAAU,KAAKP,WAAa,KAAKC,YAEvC,OADA,KAAKA,YAAc,KAAKA,YAAcK,EAClC,KAAKL,aAAe,GACtB,KAAKE,QAAS,EACP,KAAKJ,MAEAQ,EACVV,EAAOW,IAAI,CAACC,EAAK1E,IACV,KAAKmE,WAAWK,EAASE,EAAKV,EAAKhE,GAAS0E,EAAK,KAAKT,aAE7D,KAAKH,QAMbL,EAAaI,OAAS,CACpBT,OAAMA,CAAEllB,EAAGX,EAAGkD,EAAGoB,IACRtE,EAAKW,EAAI2D,EAAIpB,EAGtBkkB,GAAI,CACFC,KAAIA,CAAE1mB,EAAGX,EAAGkD,EAAGoB,IACNpB,GAAKvC,GAAK2D,GAAK3D,EAAIX,EAG5BsnB,MAAKA,CAAE3mB,EAAGX,EAAGkD,EAAGoB,IACPpB,GAAKvC,GAAK2D,GAAK3D,EAAIA,EAAIX,EAGhCunB,MAAKA,CAAE5mB,EAAGX,EAAGkD,EAAGoB,IACPpB,GAAKvC,GAAK2D,GAAK3D,EAAIA,EAAIA,EAAIX,EAGpCwnB,MAAKA,CAAE7mB,EAAGX,EAAGkD,EAAGoB,IACPpB,GAAKvC,GAAK2D,GAAK3D,EAAIA,EAAIA,EAAIA,EAAIX,EAGxCynB,KAAIA,CAAE9mB,EAAGX,EAAGkD,EAAGoB,KACLpB,EAAI3D,KAAK4D,IAAIxC,EAAI2D,GAAK/E,KAAKK,GAAK,IAAMsD,EAAIlD,EAGpD0nB,KAAIA,CAAE/mB,EAAGX,EAAGkD,EAAGoB,IACC,IAAN3D,EAAWX,EAAIkD,EAAI3D,KAAKyX,IAAI,EAAG,IAAMrW,EAAI2D,EAAI,IAAMtE,EAG7D2nB,KAAIA,CAAEhnB,EAAGX,EAAGkD,EAAGoB,KACLpB,GAAK3D,KAAKc,KAAK,GAAKM,GAAK2D,GAAK3D,GAAK,GAAKX,EAGlD4nB,QAASjnB,EAAGX,EAAGkD,EAAGoB,GAChB,IAAItB,EAAI,QAAa+Q,EAAI,EAAOjU,EAAIoD,EACpC,GAAU,IAANvC,EAAS,OAAOX,EAAG,GAAiB,IAAZW,GAAK2D,GAAU,OAAOtE,EAAIkD,EACtD,GAD8D6Q,IAAGA,EAAQ,GAAJzP,GACjExE,EAAIP,KAAKU,IAAIiD,GAAI,CAAEpD,EAAIoD,EAAOF,EAAI+Q,EAAI,OAAa/Q,EAAI+Q,GAAK,EAAIxU,KAAKK,IAAML,KAAKsoB,KAAK3kB,EAAIpD,GAC7F,OAASA,EAAIP,KAAKyX,IAAI,EAAG,IAAMrW,GAAK,IAAMpB,KAAK0D,KAAKtC,EAAI2D,EAAItB,IAAM,EAAIzD,KAAKK,IAAMmU,GAAM/T,GAGzFgiB,KAAIA,CAAErhB,EAAGX,EAAGkD,EAAGoB,EAAGtB,UACNrH,IAANqH,IAAiBA,EAAI,SAClBE,GAAKvC,GAAK2D,GAAK3D,IAAMqC,EAAI,GAAKrC,EAAIqC,GAAKhD,IAIlD8nB,IAAK,CACHT,KAAIA,CAAE1mB,EAAGX,EAAGkD,EAAGoB,KACLpB,GAAKvC,GAAK2D,IAAM3D,EAAI,GAAKX,EAGnCsnB,MAAKA,CAAE3mB,EAAGX,EAAGkD,EAAGoB,IACPpB,IAAMvC,EAAIA,EAAI2D,EAAI,GAAK3D,EAAIA,EAAI,GAAKX,EAG7CunB,MAAKA,CAAE5mB,EAAGX,EAAGkD,EAAGoB,KACNpB,IAAMvC,EAAIA,EAAI2D,EAAI,GAAK3D,EAAIA,EAAIA,EAAI,GAAKX,EAGlDwnB,MAAKA,CAAE7mB,EAAGX,EAAGkD,EAAGoB,IACPpB,IAAMvC,EAAIA,EAAI2D,EAAI,GAAK3D,EAAIA,EAAIA,EAAIA,EAAI,GAAKX,EAGrDynB,KAAIA,CAAE9mB,EAAGX,EAAGkD,EAAGoB,IACNpB,EAAI3D,KAAK0D,IAAItC,EAAI2D,GAAK/E,KAAKK,GAAK,IAAMI,EAG/C0nB,KAAIA,CAAE/mB,EAAGX,EAAGkD,EAAGoB,IACL3D,IAAM2D,EAAKtE,EAAIkD,EAAIA,GAAiC,EAA3B3D,KAAKyX,IAAI,GAAI,GAAKrW,EAAI2D,IAAUtE,EAGnE2nB,KAAIA,CAAEhnB,EAAGX,EAAGkD,EAAGoB,IACNpB,EAAI3D,KAAKc,KAAK,GAAKM,EAAIA,EAAI2D,EAAI,GAAK3D,GAAKX,EAGlD4nB,QAASjnB,EAAGX,EAAGkD,EAAGoB,GAChB,IAAItB,EAAI,QAAa+Q,EAAI,EAAOjU,EAAIoD,EACpC,GAAU,IAANvC,EAAS,OAAOX,EAAG,GAAiB,IAAZW,GAAK2D,GAAU,OAAOtE,EAAIkD,EACtD,GAD8D6Q,IAAGA,EAAQ,GAAJzP,GACjExE,EAAIP,KAAKU,IAAIiD,GAAI,CAAEpD,EAAIoD,EAAOF,EAAI+Q,EAAI,OAAa/Q,EAAI+Q,GAAK,EAAIxU,KAAKK,IAAML,KAAKsoB,KAAK3kB,EAAIpD,GAC7F,OAAOA,EAAIP,KAAKyX,IAAI,GAAI,GAAKrW,GAAKpB,KAAK0D,KAAKtC,EAAI2D,EAAItB,IAAM,EAAIzD,KAAKK,IAAMmU,GAAK7Q,EAAIlD,GAGpFgiB,KAAIA,CAAErhB,EAAGX,EAAGkD,EAAGoB,EAAGtB,UACNrH,IAANqH,IAAiBA,EAAI,SAClBE,IAAMvC,EAAIA,EAAI2D,EAAI,GAAK3D,IAAMqC,EAAI,GAAKrC,EAAIqC,GAAK,GAAKhD,IAI/D+nB,OAAQ,CACNV,KAAIA,CAAE1mB,EAAGX,EAAGkD,EAAGoB,KACR3D,GAAK2D,EAAI,GAAK,EAAUpB,EAAI,EAAIvC,EAAIA,EAAIX,GACrCkD,EAAI,KAAQvC,GAAMA,EAAI,GAAK,GAAKX,EAG1CsnB,MAAKA,CAAE3mB,EAAGX,EAAGkD,EAAGoB,KACT3D,GAAK2D,EAAI,GAAK,EAAUpB,EAAI,EAAIvC,EAAIA,EAAIA,EAAIX,EAC1CkD,EAAI,IAAMvC,GAAK,GAAKA,EAAIA,EAAI,GAAKX,EAG1CunB,MAAKA,CAAE5mB,EAAGX,EAAGkD,EAAGoB,KACT3D,GAAK2D,EAAI,GAAK,EAAUpB,EAAI,EAAIvC,EAAIA,EAAIA,EAAIA,EAAIX,GAC7CkD,EAAI,IAAMvC,GAAK,GAAKA,EAAIA,EAAIA,EAAI,GAAKX,EAE/CwnB,MAAKA,CAAE7mB,EAAGX,EAAGkD,EAAGoB,KACT3D,GAAK2D,EAAI,GAAK,EAAUpB,EAAI,EAAIvC,EAAIA,EAAIA,EAAIA,EAAIA,EAAIX,EAClDkD,EAAI,IAAMvC,GAAK,GAAKA,EAAIA,EAAIA,EAAIA,EAAI,GAAKX,EAElDynB,KAAIA,CAAE9mB,EAAGX,EAAGkD,EAAGoB,KACLpB,EAAI,GAAK3D,KAAK4D,IAAI5D,KAAKK,GAAKe,EAAI2D,GAAK,GAAKtE,EAGpD0nB,KAAIA,CAAE/mB,EAAGX,EAAGkD,EAAGoB,IACH,IAAN3D,EAAgBX,EAChBW,IAAM2D,EAAUtE,EAAIkD,GACnBvC,GAAK2D,EAAI,GAAK,EAAUpB,EAAI,EAAI3D,KAAKyX,IAAI,EAAG,IAAMrW,EAAI,IAAMX,EAC1DkD,EAAI,GAA+B,EAAzB3D,KAAKyX,IAAI,GAAI,KAAOrW,IAAUX,EAGjD2nB,KAAIA,CAAEhnB,EAAGX,EAAGkD,EAAGoB,KACR3D,GAAK2D,EAAI,GAAK,GAAWpB,EAAI,GAAK3D,KAAKc,KAAK,EAAIM,EAAIA,GAAK,GAAKX,EAC5DkD,EAAI,GAAK3D,KAAKc,KAAK,GAAKM,GAAK,GAAKA,GAAK,GAAKX,EAGrD4nB,QAASjnB,EAAGX,EAAGkD,EAAGoB,GAChB,IAAItB,EAAI,QAAa+Q,EAAI,EAAOjU,EAAIoD,EACpC,GAAU,IAANvC,EAAS,OAAOX,EAAG,GAAqB,IAAhBW,GAAK2D,EAAI,GAAU,OAAOtE,EAAIkD,EAC1D,GADkE6Q,IAAGA,EAAIzP,GAAK,GAAM,MAChFxE,EAAIP,KAAKU,IAAIiD,GAAI,CAAEpD,EAAIoD,EAAOF,EAAI+Q,EAAI,OAAa/Q,EAAI+Q,GAAK,EAAIxU,KAAKK,IAAML,KAAKsoB,KAAK3kB,EAAIpD,GAC7F,OAAIa,EAAI,EAAkBb,EAAIP,KAAKyX,IAAI,EAAG,IAAMrW,GAAK,IAAMpB,KAAK0D,KAAKtC,EAAI2D,EAAItB,IAAM,EAAIzD,KAAKK,IAAMmU,IAA/E,GAAqF/T,EACjGF,EAAIP,KAAKyX,IAAI,GAAI,IAAMrW,GAAK,IAAMpB,KAAK0D,KAAKtC,EAAI2D,EAAItB,IAAM,EAAIzD,KAAKK,IAAMmU,GAAK,GAAM7Q,EAAIlD,GAGjGgiB,KAAIA,CAAErhB,EAAGX,EAAGkD,EAAGoB,EAAGtB,UACNrH,IAANqH,IAAiBA,EAAI,UACpBrC,GAAK2D,EAAI,GAAK,EAAUpB,EAAI,GAAKvC,EAAIA,IAAuB,GAAhBqC,GAAM,QAAerC,EAAIqC,IAAMhD,EACzEkD,EAAI,IAAMvC,GAAK,GAAKA,IAAuB,GAAhBqC,GAAM,QAAerC,EAAIqC,GAAK,GAAKhD,KAK3E,IAAAxH,EAAAC,QAAAC,QAiCewtB;;AC/LqB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA5BpC,MAAM8B,EACJtwB,YAAauwB,GACX,KAAKC,QAAUD,EACf,KAAKE,aAAe,EAGtB,WACE,OAAO,KAAKA,eAAiB,KAAKD,QAAQxsB,OAG5CqrB,QACE,KAAKoB,aAAe,EACpB,KAAKD,QAAQjpB,QAAQmpB,GAAQA,EAAKrB,SAGpClsB,OAAQmsB,GACN,GAAI,KAAKqB,KAAM,CAEb,OADiB,KAAKH,QAAQ,KAAKA,QAAQxsB,OAAS,GACpCb,OAAOmsB,GAClB,CACL,MAAMsB,EAAc,KAAKJ,QAAQ,KAAKC,cAChChB,EAAMmB,EAAYztB,OAAOmsB,GAE/B,OADIsB,EAAYD,QAAQ,KAAKF,aACtBhB,IAGZ,IAAA3uB,EAAAC,QAAAC,QAEcsvB;;ACDuB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA3BtC,MAAMO,EACJ7wB,YAAauwB,GACX,KAAKC,QAAUD,EACf,KAAKpB,QAAS,EAGhB,WACE,OAAO,KAAKA,OAGdE,QACE,KAAKmB,QAAQjpB,QAAQmpB,GAAQA,EAAKrB,SAClC,KAAKF,QAAS,EAGhBhsB,OAAQmsB,GACN,IAAIwB,GAAU,EACd,MAAMC,EAAO,KAAKP,QAAQhB,IAAIkB,IAC5B,MAAMjB,EAAMiB,EAAKvtB,OAAOmsB,GAExB,OADAwB,EAAUA,GAAWJ,EAAKC,KACnBlB,IAGT,OADIqB,IAAW,KAAK3B,QAAS,GACtB4B,GAEV,IAAAjwB,EAAAC,QAAAC,QAEc6vB;;ACGf,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,EA9BA,IAAAG,EAAA3tB,EAAAC,QAAA,qCACA2tB,EAAA5tB,EAAAC,QAAA,8CACA4tB,EAAA7tB,EAAAC,QAAA,gDAAiF,SAAAD,EAAA7C,GAAAA,OAAAA,GAAAA,EAAAgD,WAAAhD,EAAAQ,CAAAA,QAAAR,GAE1E,SAAS2wB,EAAevG,EAAYwG,GACzC,MAAMC,EAASzG,EAAWxkB,SAASvE,EAC7ByvB,EAAOD,EAAS,EAChBE,EAAOD,EAAO,EACdE,EAAO,IAAIhD,EAAY,QAAC6C,EAAQC,EAAM,KACtCG,EAAW,IAAIjD,EAAY,QAAC8C,EAAMC,EAAM,IAAK/C,EAAY,QAACI,OAAOwB,IAAIL,MACrE2B,EAAQ,IAAIlD,EAAY,QAAC+C,EAAMA,EAAM,KACrCI,EAAW,IAAIrB,EAAqB,QAAC,CACzCkB,EACAC,EACAC,EACAD,EAASrC,QAAQZ,EAAY,QAACI,OAAOc,GAAGK,MACxCyB,EAAKpC,YAEDwC,EAAW,IAAIpD,EAAY,QAAC,EAAG,IAAK,KACpCqD,EAAO,IAAIrD,EAAY,QAAC,EAAG,IAAK,KAChCsD,EAAU,IAAItD,EAAY,QAAC,IAAK4C,EAAU,KAC1CW,EAAW,IAAIzB,EAAqB,QAAC,CACzCuB,EACAD,EACAE,IAEF,OAAO,IAAIjB,EAAuB,QAAC,CACjCc,EACAI;;ACiBsB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA7C1B,IAAAC,EAAA3uB,EAAAC,QAAA,6BACA2uB,EAAA3uB,QAAA,gBAA4C,SAAAD,EAAA7C,GAAAA,OAAAA,GAAAA,EAAAgD,WAAAhD,EAAAQ,CAAAA,QAAAR,GAE5C,MAAM0xB,UAAoB3D,EAAa,QACrCvuB,cACE,QACA,KAAKmyB,YAAa,EAClB,KAAKC,gBAAkB,KACvB,KAAKC,aAAe,KACpB,KAAKC,YAAc,KAGrBC,YAAaC,GACX,KAAKC,cAAgBD,EAGvBE,UAAWF,GACT,KAAKF,YAAcE,EAGrBG,cAAe/H,EAAYzkB,GAEzB,GADcA,EAAQvB,MAAMjB,MAClBpC,gBAAgB,QAAS,CACjC,KAAK4wB,YAAa,EAClB,MAAMS,EAAQ/qB,KAAKC,SAAW,GAC9B,KAAKsqB,iBAAkB,EAAAjB,EAAa,eAACvG,EAAYgI,EAAQ,IAAM,KAC/D,KAAKP,aAAe,CAAEO,MAAAA,EAAOC,OAAQD,GACjC,KAAKH,eAAe,KAAKA,iBAIjCtvB,OAAQynB,EAAYzkB,GAClB,GAAK,KAAKgsB,WACL,CACH,MAAOW,EAAKC,GAAO,KAAKX,gBAAgBjvB,OAAOgD,EAAQmpB,WAGvD,GAFA1E,EAAWxkB,SAASvE,EAAIixB,EAAI,GAC5BlI,EAAWtkB,SAAS3E,EAAIoxB,EAAI,GACxB,KAAKX,gBAAgBzB,OACvB,KAAKwB,YAAa,EACd,KAAKG,aAAa,OAAO,KAAKA,YAAY,KAAKD,mBAPjC,KAAKM,cAAc/H,EAAYzkB,IAWxD,IAAArF,EAAAC,QAAAC,QAEckxB;;ACgJK,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA7LpB,IAAAvL,EAAAtjB,EAAAC,QAAA,aAA4B,SAAAD,EAAA7C,GAAAA,OAAAA,GAAAA,EAAAgD,WAAAhD,EAAAQ,CAAAA,QAAAR,GAE5B,MAAMwyB,UAAcxO,EAAK,QACvBC,WAAYlf,EAAcS,GACxB,MAAMye,WAAWlf,EAAcS,GAC/B,MAAM,GAAE9B,GAAO,KACf,KAAK2iB,gBAAkB,CACrBC,aAAc5iB,EAAG6iB,kBAAkB,KAAKrC,QAAS,gBACjDsC,SAAU9iB,EAAG6iB,kBAAkB,KAAKrC,QAAS,aAIjDuC,qBAAsB7V,EAAQD,EAAO8hB,EAASC,EAAWC,EAAUC,GACjE,KAAKhiB,OAASA,EACd,KAAKD,MAAQA,EACb,KAAK8hB,QAAUA,EACf,KAAKC,UAAYA,EACjB,KAAKC,SAAWA,EAChB,KAAKE,UAAYD,EAGnBhM,WAAYC,GACV,KAAKA,QAAUA,EAGjBiM,oBAAqBliB,EAAQD,EAAO8hB,EAASM,EAAgBC,EAAeC,GAAkC,IAAjBC,EAAW3vB,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,GAAAF,UAAG,GAAA,EACzG,MAAM4vB,EAAaviB,EAAS,EACtBwiB,EAAYziB,EAAQ,EACpB0iB,EAAcZ,EAAU,EAExBa,EAAOC,EACX,EAAGP,EAAgBI,GAAYD,EAAaJ,EAAgBE,EAAkBI,GAE1EG,EAAOD,EACX,EAAGP,EAAgBI,GAAYD,EAAaJ,GAAiBE,EAAkBI,GAE3EI,EAAOF,EACX,GAAIP,EAAgBI,GAAYD,EAAaJ,EAAgBE,EAAkBI,GAE3EK,EAAOH,EACX,GAAIP,EAAgBI,GAAYD,EAAaJ,GAAiBE,EAAkBI,GAGlF,MAAO,CACLM,SAAU,IAAIL,EAAKK,YAAaH,EAAKG,YAAaF,EAAKE,YAAaD,EAAKC,UACzEC,QAAS,IAAIN,EAAKM,WAAYJ,EAAKI,WAAYH,EAAKG,WAAYF,EAAKE,UAGvE,SAASL,EAAwBM,EAAWxnB,EAAIC,EAAIwnB,GAClD,MAAMH,EAAW,CACfP,EAAY/mB,GAAK8mB,EAAa7mB,GAAK+mB,EAAcS,EAAI,EAAK,EAC1DV,EAAY/mB,EAAI8mB,EAAa7mB,GAAK+mB,EAAcS,EAAI,GAAK,IACxDV,EAAY/mB,GAAK8mB,EAAa7mB,GAAK+mB,EAAcS,EAAI,EAAK,GAC1DV,EAAY/mB,EAAI8mB,EAAa7mB,GAAK+mB,EAAcS,EAAI,GAAK,GAE1DV,EAAY/mB,GAAK8mB,EAAa7mB,EAAI+mB,EAAcS,EAAI,EAAK,EACzDV,EAAY/mB,EAAI8mB,EAAa7mB,EAAI+mB,EAAcS,EAAI,GAAK,IACvDV,EAAY/mB,GAAK8mB,EAAa7mB,EAAI+mB,EAAcS,EAAI,EAAK,GACzDV,EAAY/mB,EAAI8mB,EAAa7mB,EAAI+mB,EAAcS,EAAI,GAAK,GAEzDV,EAAY/mB,EAAI8mB,EAAa7mB,EAAI+mB,EAAcS,EAAI,GAAK,GACxDV,EAAY/mB,EAAI8mB,EAAa7mB,GAAK+mB,EAAcS,EAAI,EAAK,GACxDV,EAAY/mB,EAAI8mB,EAAa7mB,GAAK+mB,EAAcS,EAAI,EAAK,GACzDV,EAAY/mB,EAAI8mB,EAAa7mB,EAAI+mB,EAAcS,EAAI,GAAK,GAEzDV,EAAY/mB,GAAK8mB,EAAa7mB,EAAI+mB,EAAcS,EAAI,EAAK,EACzDV,EAAY/mB,GAAK8mB,EAAa7mB,GAAK+mB,EAAcS,EAAI,GAAK,IACzDV,EAAY/mB,GAAK8mB,EAAa7mB,GAAK+mB,EAAcS,EAAI,EAAK,GAC1DV,EAAY/mB,GAAK8mB,EAAa7mB,EAAI+mB,EAAcS,EAAI,GAAK,GAE1DV,EAAY/mB,EAAI8mB,EAAa7mB,GAAK+mB,EAAcS,EAAI,EAAK,EACzDV,EAAY/mB,EAAI8mB,EAAa7mB,EAAI+mB,EAAcS,EAAI,GAAK,GACxDV,EAAY/mB,GAAK8mB,EAAa7mB,GAAK+mB,EAAcS,EAAI,EAAK,EAC1DV,EAAY/mB,GAAK8mB,EAAa7mB,EAAI+mB,EAAcS,EAAI,GAAK,IAExDV,EAAY/mB,EAAI8mB,EAAa7mB,GAAK+mB,EAAcS,EAAI,EAAK,GACzDV,EAAY/mB,EAAI8mB,EAAa7mB,EAAI+mB,EAAcS,EAAI,GAAK,IACxDV,EAAY/mB,GAAK8mB,EAAa7mB,GAAK+mB,EAAcS,EAAI,EAAK,GAC1DV,EAAY/mB,GAAK8mB,EAAa7mB,EAAI+mB,EAAcS,EAAI,GAAK,IAWtDC,EAAeJ,EAASnwB,OAAS,EAEvC,MAAO,CAAEmwB,SAAAA,EAAUC,QAVH,CACd,EAAG,EAAG,EAAG,EAAG,EAAG,EACf,EAAG,EAAG,EAAG,EAAG,EAAG,EACf,EAAG,EAAG,GAAI,GAAI,GAAI,EAClB,GAAI,GAAI,GAAI,GAAI,GAAI,GACpB,GAAI,GAAI,GAAI,GAAI,GAAI,GACpB,GAAI,GAAI,GAAI,GAAI,GAAI,IAGW5E,IAAIgF,GAAOA,EAAMd,EAAeW,EAAYE,KAKjFjN,iBAAkB4L,EAAWC,EAAUC,EAAYqB,EAAYC,EAAWC,GACxE,MAAMhB,EAAac,EAAa,EAC1Bb,EAAYc,EAAY,EACxBb,EAAcc,EAAc,EAE5BR,EAAW,CACfP,GAAYD,GAAaE,EAAa,EAAK,EAC3CD,EAAWD,GAAaE,EAAa,EAAK,GACzCD,GAAYD,GAAaE,EAAa,EAAK,GAC3CD,EAAWD,GAAaE,EAAa,EAAK,EAE3CD,GAAYD,EAAYE,EAAa,EAAK,EAC1CD,EAAWD,EAAYE,EAAa,EAAK,GACxCD,GAAYD,EAAYE,EAAa,EAAK,GAC1CD,EAAWD,EAAYE,EAAa,EAAK,EAE1CD,EAAWD,EAAYE,EAAa,EAAK,EACzCD,EAAWD,GAAaE,EAAa,EAAK,GACzCD,EAAWD,GAAaE,EAAa,EAAK,GAC1CD,EAAWD,EAAYE,EAAa,EAAK,EAE1CD,GAAYD,EAAYE,EAAa,EAAK,EAC1CD,GAAYD,GAAaE,EAAa,EAAK,GAC1CD,GAAYD,GAAaE,EAAa,EAAK,GAC3CD,GAAYD,EAAYE,EAAa,EAAK,EAE3CD,EAAWD,GAAaE,EAAa,EAAK,EAC1CD,EAAWD,EAAYE,EAAa,EAAK,EACzCD,GAAYD,GAAaE,EAAa,EAAK,EAC3CD,GAAYD,EAAYE,EAAa,EAAK,GAEzCD,EAAWD,GAAaE,EAAa,EAAK,GAC1CD,EAAWD,EAAYE,EAAa,EAAK,GACzCD,GAAYD,GAAaE,EAAa,EAAK,GAC3CD,GAAYD,EAAYE,EAAa,EAAK,GAYvCe,EAAU,KAAKtB,oBACnBJ,EAAWC,EAAUC,EACrBO,EAAYC,EAAWC,EACvBM,EAASnwB,OAAS,GAGpB,MAAO,CACLmwB,SAAU,IAAIA,KAAaS,EAAQT,UACnCC,QAAS,CAhBT,EAAG,EAAG,EAAG,EAAG,EAAG,EACf,EAAG,EAAG,EAAG,EAAG,EAAG,EACf,EAAG,EAAG,GAAI,GAAI,GAAI,EAClB,GAAI,GAAI,GAAI,GAAI,GAAI,GACpB,GAAI,GAAI,GAAI,GAAI,GAAI,GACpB,GAAI,GAAI,GAAI,GAAI,GAAI,MAWKQ,EAAQR,UAIrCntB,OACE,MAAM,GAAE/C,GAAO,KACTiN,EAAQ,KAAKA,OAAS,EACtB8hB,EAAU,KAAKA,SAAW,EAC1B7hB,EAAS,KAAKA,QAAU,EACxB8hB,EAAY,KAAKA,WAAa,EAC9BG,EAAY,KAAKA,WAAa,GAC9BF,EAAW,KAAKA,UAAY,IAC5B,SAAEgB,EAAQ,QAAEC,GAAY,KAAK9M,iBAAiB4L,EAAWC,EAAUE,EAAWjiB,EAAQD,EAAO8hB,GACnG,KAAK/N,cAAciP,GACnB,KAAKzO,qBAAqB0O,GAE1BlwB,EAAGgkB,oBACD,KAAKrB,gBAAgBC,aACrB,EACA5iB,EAAGikB,MACHjkB,EAAGiiB,MACH,EAAIze,aAAa0gB,kBACjB,GAEFlkB,EAAGgkB,oBACD,KAAKrB,gBAAgBG,SACrB,EACA9iB,EAAGikB,MACHjkB,EAAGiiB,MACH,EAAIze,aAAa0gB,kBACjB,EAAI1gB,aAAa0gB,mBAEnBlkB,EAAGmkB,wBAAwB,KAAKxB,gBAAgBC,cAChD5iB,EAAGmkB,wBAAwB,KAAKxB,gBAAgBG,UAChD9iB,EAAGokB,YAAYpkB,EAAGqkB,WAAY,KAAKlB,QAAQxC,UAC3C3gB,EAAGskB,cAActkB,EAAGukB,UACpBvkB,EAAG2wB,aAAa3wB,EAAG4wB,UAAWV,EAAQpwB,OAAQE,EAAG6wB,eAAgB,IAEpE,IAAAj0B,EAAAC,QAAAC,QAEcgyB;;ACvKK,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAtBpB,IAAA/J,EAAA5lB,EAAAC,QAAA,0BACA6lB,EAAA9lB,EAAAC,QAAA,oCACA8lB,EAAA/lB,EAAAC,QAAA,sCACA+lB,EAAAhmB,EAAAC,QAAA,kBACAgmB,EAAAjmB,EAAAC,QAAA,kBACA0xB,EAAA3xB,EAAAC,QAAA,uBAA2C,SAAAD,EAAA7C,GAAAA,OAAAA,GAAAA,EAAAgD,WAAAhD,EAAAQ,CAAAA,QAAAR,GAE3C,MAAMwyB,UAAc9sB,EAAU,QAC5Bue,WAAYrT,EAAQD,EAAO8hB,EAASC,EAAWC,EAAUC,GACvD,MAAM7tB,EAAe,IAAIsjB,EAAY,QAAC,KAAK1iB,QAASujB,EAAe,SAC7D1jB,EAAiB,IAAIgjB,EAAc,QAAC,KAAK7iB,QAASwjB,EAAiB,SACnE5iB,EAAQ,IAAIkuB,EAAU,QAAC,KAAK9uB,SAClCY,EAAM0d,WAAWlf,EAAcS,GAC/Be,EAAMkgB,qBAAqB7V,EAAQD,EAAO8hB,EAASC,EAAWC,EAAUC,GACxE,KAAKtsB,UAAUC,GAGjBqgB,WAAYwC,GACV,KAAK5iB,QAAQogB,WAAWwC,IAE3B,IAAA9oB,EAAAC,QAAAC,QAEcgyB;;ACgEa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAtF5B,MAAMkC,EAAW7H,SAASC,cAAc,YAExC4H,EAASC,UAAY,sdAgCrB,MAAMC,UAAsB90B,OAAO+0B,YACjC,gCACE,MAAO,CAAC,UAGVr1B,cACE,QACA,KAAKs1B,YAAc,KAAKC,aAAa,CAAEC,KAAM,SAC7C,KAAKF,YAAYG,YAAYP,EAASQ,QAAQC,WAAU,IACxD,KAAKC,MAAQ,KAAKN,YAAYO,cAAc,MAC5C,KAAKC,QAAU,KAAKR,YAAYO,cAAc,WAGhDE,oBACE,KAAKC,UAGPC,yBAA0BxvB,EAAMyvB,EAAUC,GACxC,OAAQ1vB,GACN,IAAK,SACH,KAAK2vB,QAAUD,EAEnB,KAAKH,UAGP,aACE,OAAO,KAAKK,aAAa,UAG3B,WAAYC,GACV,KAAKC,aAAa,SAAUD,GAG9B,iBACE,OAAQ,KAAKF,SACX,IAAK,QAAS,MAAO,QACrB,IAAK,QAAS,MAAO,QACrB,QAAS,MAAO,WAIpBJ,UACM,KAAKI,SACP,KAAKN,QAAQU,UAAY,KAAKC,WAC9B,KAAKb,MAAMc,UAAUrqB,IAAI,WAEzB,KAAKupB,MAAMc,UAAUC,OAAO,WAKlCr2B,OAAOs2B,eAAeC,OAAO,iBAAkBzB,GAAc,IAAAt0B,EAAAC,QAAAC,QAC9Co0B;;ACvBW,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA/D1B,MAAMF,EAAW7H,SAASC,cAAc,YAExC4H,EAASC,UAAY,s4BAoDrB,MAAM2B,UAAoBx2B,OAAO+0B,YAC/Br1B,cACE,QACA,KAAKs1B,YAAc,KAAKC,aAAa,CAAEC,KAAM,SAC7C,KAAKF,YAAYG,YAAYP,EAASQ,QAAQC,WAAU,KAI5Dr1B,OAAOs2B,eAAeC,OAAO,eAAgBC,GAAY,IAAAh2B,EAAAC,QAAAC,QAC1C81B;;ACKW,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EApE1B,MAAM5B,EAAW7H,SAASC,cAAc,YAGlCyJ,EAAW,qNAMXC,EAAW,0WAMjB9B,EAASC,q3BAmBK4B,mIAKIA,gFAGAA,iFAGAA,kHAMJC,mHAQd,MAAMC,UAAoB32B,OAAO+0B,YAC/Br1B,cACE,QACA,KAAKs1B,YAAc,KAAKC,aAAa,CAAEC,KAAM,SAC7C,KAAKF,YAAYG,YAAYP,EAASQ,QAAQC,WAAU,KAI5Dr1B,OAAOs2B,eAAeC,OAAO,eAAgBI,GAAY,IAAAn2B,EAAAC,QAAAC,QAC1Ci2B;;AClBU,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAlDzB,MAAM/B,EAAW7H,SAASC,cAAc,YAExC4H,EAASC,UAAY,wtBAuCrB,MAAM+B,UAAmB52B,OAAO+0B,YAC9Br1B,cACE,QACA,KAAKs1B,YAAc,KAAKC,aAAa,CAAEC,KAAM,SAC7C,KAAKF,YAAYG,YAAYP,EAASQ,QAAQC,WAAU,KAI5Dr1B,OAAOs2B,eAAeC,OAAO,cAAeK,GAAW,IAAAp2B,EAAAC,QAAAC,QACxCk2B;;;;AC0BE,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA5EjB5zB,QAAA,8BACAA,QAAA,4BACAA,QAAA,4BACAA,QAAA,2BACAA,QAAA,eAEA,MAAM6zB,EACJn3B,cACE,KAAKo3B,eACL,KAAKC,cAAgB,KAAKA,cAAcl3B,KAAK,MAC7C,KAAKm3B,mBAAqB,KAAKA,mBAAmBn3B,KAAK,MACvDG,OAAOC,iBAAiB,SAAU,KAAK82B,eACvC,KAAKA,gBAGPD,eACE,MAAMG,EAAUlK,SAASC,cAAc,OACvCiK,EAAQC,GAAK,UACbnK,SAASoK,KAAKhC,YAAY8B,GAC1B,KAAKG,UAAYH,EAGnBF,gBACE,MAAME,EAAU,KAAKG,UACrBH,EAAQI,MAAMxmB,MAAQ7Q,OAAOs3B,WAC7BL,EAAQI,MAAMvmB,OAAS9Q,OAAOu3B,YAGhCC,UACE,MAAMP,EAAU,KAAKG,UACrBH,EAAQpC,UAAY,GACpB,MAAM4C,EAAU1K,SAASC,cAAc,kBACjC0K,EAAc3K,SAASC,cAAc,gBAC3CiK,EAAQ9B,YAAYuC,GACpBT,EAAQ9B,YAAYsC,GACpB,KAAKE,UAAYF,EACjB,KAAKG,cAAgBF,EACrB,KAAKG,kBAGPC,oBAAqBr0B,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,KAAAF,UAAG,GAEpB,KAAKm0B,cAAcxB,UAAUC,OAAO,UAEpC,KAAKuB,cAAcxB,UAAUrqB,IAAI,UAIrCirB,qBACE,KAAKW,UAAUI,OAAS,GACxB,KAAKD,iBAAgB,GAGvBE,qBAAsBD,GACpB,KAAKJ,UAAUI,OAASA,EACxB,KAAKD,iBAAgB,GACjB,KAAKG,kBAAkBj4B,OAAOk4B,aAAa,KAAKD,kBACpD,KAAKA,iBAAmBj4B,OAAOm4B,WAAW,KAAKnB,mBAAoB,KAGrEa,kBACE,MAAMO,EAAcrL,SAASC,cAAc,gBAC3C,KAAKoK,UAAUjC,YAAYiD,GAG7BC,aACE,KAAKjB,UAAUvC,UAAY,GAC3B,MAAMyD,EAASvL,SAASC,cAAc,eACtC,KAAKoK,UAAUjC,YAAYmD,GAG7Bj4B,UACEL,OAAOM,oBAAoB,SAAU,KAAKy2B,gBAE7C,IAAAv2B,EAAAC,QAAAC,QAEcm2B;;ACrCa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAvC5B,IAAAnF,EAAA3uB,EAAAC,QAAA,6BAAoD,SAAAD,EAAA7C,GAAAA,OAAAA,GAAAA,EAAAgD,WAAAhD,EAAAQ,CAAAA,QAAAR,GAEpD,MAAMq4B,UAAsBtK,EAAa,QACvCvuB,YAAamY,GAAuD,IAA/C2gB,EAAW/0B,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,GAAAF,UAAG,GAAA,EAAGg1B,EAAch1B,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,GAAAF,UAAG8D,GAAAA,KAAKK,GAAK,EAC/D,QACA,KAAK8wB,SAAW7gB,EAChB,KAAK8gB,SAAWH,EAChB,KAAKI,YAAcH,EAGrB51B,OAAQynB,EAAYzkB,GAClB,MAAMxC,EAAQwC,EAAQvB,MAAMjB,MACtBD,EAAWyC,EAAQvB,MAAMlB,SACzBy1B,EAASx1B,EAAMzB,YACfk3B,EAAQjzB,EAAQmpB,UAAY,IAClC,KAAK2J,SAAWpxB,KAAKW,IAAI,EAAG,KAAKywB,SAAuB,IAAXE,EAAOt3B,GAChD6B,EAAShD,aAAa,eACxB,KAAKw4B,aAAe,EAAIE,GAGtB11B,EAAShD,aAAa,gBACxB,KAAKw4B,aAAe,EAAIE,GAGtB11B,EAAShD,aAAa,aACxBkqB,EAAWxkB,SAASvE,GAAK,EAAIu3B,GAG3B11B,EAAShD,aAAa,eACxBkqB,EAAWxkB,SAASvE,GAAK,EAAIu3B,GAG/BxO,EAAWxkB,SAASzE,EAAI,KAAKq3B,SAASr3B,EAAI,KAAKs3B,SAAWpxB,KAAK4D,IAAI,KAAKytB,aACxEtO,EAAWxkB,SAAS/D,EAAI,KAAK22B,SAAS32B,EAAI,KAAK42B,SAAWpxB,KAAK0D,IAAI,KAAK2tB,aAExEtO,EAAW3S,OAAO,CAAC,KAAK+gB,SAASr3B,EAAG,KAAKq3B,SAASn3B,EAAG,KAAKm3B,SAAS32B,KAEtE,IAAAvB,EAAAC,QAAAC,QAEc63B;;ACsEK,aA7GpB,IAAAQ,EAAAh2B,EAAAC,QAAA,sBACAg2B,EAAAj2B,EAAAC,QAAA,uBACAi2B,EAAAl2B,EAAAC,QAAA,iBACAk2B,EAAAn2B,EAAAC,QAAA,kBACAm2B,EAAAp2B,EAAAC,QAAA,mBACAo2B,EAAAr2B,EAAAC,QAAA,0BACA0xB,EAAA3xB,EAAAC,QAAA,wBACAq2B,EAAAt2B,EAAAC,QAAA,SACAs2B,EAAAv2B,EAAAC,QAAA,4BAAmD,SAAAD,EAAA7C,GAAAA,OAAAA,GAAAA,EAAAgD,WAAAhD,EAAAQ,CAAAA,QAAAR,GAEnD,SAASq5B,IACP,MAAM1zB,EAAU2zB,IAEhB,OADA3zB,EAAQ4zB,GAAGpB,aACJqB,EAAc7zB,GAClB8zB,KAAKC,GAAaC,EAAYh0B,EAAS+zB,IACvCD,KAAKpzB,IACJV,EAAQ4zB,GAAGjC,UACXsC,EAASvzB,KAIf,SAASizB,IACP,MAAMC,EAAK,IAAI5C,EAAE,QACXtzB,EAASwpB,SAASgN,eAAe,UACvCx2B,EAAOsN,MAAQ7Q,OAAOs3B,WACtB/zB,EAAOuN,OAAS9Q,OAAOu3B,YAEvB,MAAM1xB,EAAU,IAAIvC,EAAU,QAACC,GAE/B,OADAsC,EAAQ4zB,GAAKA,EACN5zB,EAGT,SAAS6zB,EAAe7zB,GACtB,OAGA,SAAuBA,GACrB,MAAMm0B,EAAe,IAAI9N,EAAO,QAACrmB,GAC3Bo0B,EAAc,IAAI/N,EAAO,QAACrmB,GAChC,OAAO+mB,QAAQsN,IAAI,CACjBF,EAAatN,UAAU,oBAAqB,GAC5CuN,EAAYvN,UAAU,uBAAwB,KAC7CiN,KAAK,KACC,CACLQ,MAAOH,EACPI,KAAMH,KAZLI,CAAax0B,GACjB8zB,KAAKW,IAAa,CAAEA,SAAAA,KAiBzB,SAAST,EAAah0B,EAAS+zB,GAC7B,MAAM,SAAEU,GAAaV,EACfrzB,EAAQg0B,EAAW10B,GACnBu0B,EAAOI,EAAW30B,EAASy0B,EAASF,MACpCD,EAAQM,EAAY50B,EAASy0B,EAASH,OAI5C,OAHA5zB,EAAMqkB,OAAO1kB,iBAAiB,gBAAiB,IAAIqyB,EAAa,QAAC6B,EAAKt0B,WACtES,EAAM8jB,cAAc8P,GACpB5zB,EAAM8jB,cAAc+P,GACb7zB,EAGT,SAASuzB,EAAUvzB,GACjB,MAAMm0B,EAAO,WACXn0B,EAAM1D,SACN0D,EAAMI,OACN3G,OAAO26B,sBAAsBD,IAG/BA,IAGF,SAASH,EAAY10B,GACnB,MAAMU,EAAQ,IAAIgjB,EAAK,QAAC1jB,GACxBU,EAAM4jB,cAAc,CAAC,IAAM,IAAM,GAAK,IACtC,MAAMS,EAAS,IAAIO,EAAM,QAACtlB,GAG1B,OAFAU,EAAMokB,UAAUC,GAChBA,EAAOc,YAAY,CAAC,EAAG,EAAG,IACnBnlB,EAGT,SAASk0B,EAAa50B,EAASkhB,GAC7B,MAAMoT,EAAQ,IAAIzH,EAAK,QAAC7sB,GAIxB,OAHAs0B,EAAMhW,WAAW,GAAK,GAAI,EAAG,EAAG,GAAK,IACrCgW,EAAMrT,WAAWC,GACjBoT,EAAMr0B,SAASvE,GAAK,IACb44B,EAGT,SAASK,EAAY30B,EAASkhB,GAC5B,MAAM,GAAE0S,GAAO5zB,EACTu0B,EAAO,IAAInR,EAAI,QAACpjB,GAChB+0B,EAAa,IAAIhJ,EAAW,QAclC,OAbAgJ,EAAW3I,YAAY,KACrBwH,EAAG3B,iBAAgB,KAErB8C,EAAWxI,UAAUzG,IAAe,IAAd,MAAE2G,GAAO3G,EACzB2G,EACFmH,EAAGzB,qBAAqB,SAExByB,EAAGzB,qBAAqB,WAG5BoC,EAAKl0B,iBAAiB,cAAe00B,GACrCR,EAAKjW,WAAW,GAAK,GAAK,IAC1BiW,EAAKtT,WAAWC,GACTqT,EAGTp6B,OAAOitB,OAASsM","file":"src.a58b8fef.js","sourceRoot":"..","sourcesContent":["class Keyboard {\n  constructor () {\n    this.__keysMap = {}\n    this.__reset = this.__reset.bind(this)\n    this.__onKeyUp = this.__onKeyUp.bind(this)\n    this.__onKeyDown = this.__onKeyDown.bind(this)\n    window.addEventListener('blur', this.__reset)\n    window.addEventListener('keydown', this.__onKeyDown)\n    window.addEventListener('keyup', this.__onKeyUp)\n  }\n\n  __onKeyDown (e) {\n    this.__keysMap[e.key] = true\n  }\n\n  __onKeyUp (e) {\n    this.__keysMap[e.key] = false\n  }\n\n  __reset () {\n    this.__keysMap = {}\n  }\n\n  isKeyPressed (key) {\n    return this.__keysMap[key] || false\n  }\n\n  destroy () {\n    window.removeEventListener('blur', this.__resetKeys)\n    window.removeEventListener('keydown', this.__onKeyDown)\n    window.removeEventListener('keyup', this.__onKeyUp)\n  }\n}\n\nexport default Keyboard\n","const BUTTONS = ['left', 'wheel', 'right', 'back', 'forward']\n\nclass Mouse {\n  constructor () {\n    this.__onMouseDown = this.__onMouseDown.bind(this)\n    this.__onMouseUp = this.__onMouseUp.bind(this)\n    this.__onMouseMove = this.__onMouseMove.bind(this)\n    this.__onWheel = this.__onWheel.bind(this)\n    this.__reset = this.__reset.bind(this)\n\n    this.__reset()\n\n    window.addEventListener('mousedown', this.__onMouseDown)\n    window.addEventListener('mouseup', this.__onMouseUp)\n    window.addEventListener('mousemove', this.__onMouseMove)\n    window.addEventListener('wheel', this.__onWheel)\n    window.addEventListener('blur', this.__reset)\n  }\n\n  isButtonPressed (button) {\n    return this.__buttonsMap[button] || false\n  }\n\n  getPosition () {\n    return { x: this.__x, y: this.__y }\n  }\n\n  getMovement () {\n    return {\n      x: this.__dx,\n      y: this.__dy\n    }\n  }\n\n  getScroll () {\n    return {\n      x: this.__dWheelX,\n      y: this.__dWheelY,\n      z: this.__dWheelZ,\n      unit: this.__wheelUnit\n    }\n  }\n\n  isDragging () {\n    return this.__dragging\n  }\n\n  __onMouseDown (e) {\n    this.__buttonsMap = { [BUTTONS[e.button]]: true }\n    this.__onMouseMove(e)\n  }\n\n  __onMouseUp (e) {\n    this.__buttonsMap = { [BUTTONS[e.button]]: false }\n    this.__onMouseMove(e)\n  }\n\n  __onMouseMove (e) {\n    this.__x = e.clientX\n    this.__y = e.clientY\n    this.__dx = e.movementX\n    this.__dy = e.movementY\n    this.__dragging = this.__buttonsMap['left'] || false\n  }\n\n  __onWheel (e) {\n    this.__dWheelX = e.deltaX\n    this.__dWheelY = e.deltaY\n    this.__dWheelZ = e.deltaZ\n    this.__wheelUnit = e.deltaMode\n  }\n\n  update () {\n    this.__dx = 0\n    this.__dy = 0\n    this.__dWheelX = 0\n    this.__dWheelY = 0\n    this.__dWheelZ = 0\n    this.__wheelUnit = 0\n  }\n\n  __reset () {\n    this.__x = 0\n    this.__y = 0\n    this.__dx = 0\n    this.__dy = 0\n    this.__dWheelX = 0\n    this.__dWheelY = 0\n    this.__dWheelZ = 0\n    this.__wheelUnit = 0\n    this.__dragging = false\n    this.__buttonsMap = {}\n  }\n\n  destroy () {\n    window.removeEventListener('mousedown', this.__onMouseDown)\n    window.removeEventListener('mouseup', this.__onMouseUp)\n    window.removeEventListener('mousemove', this.__onMouseMove)\n    window.removeEventListener('blur', this.__reset)\n  }\n}\n\nexport default Mouse\n","import Keyboard from '../Keyboard'\nimport Mouse from '../Mouse'\n\nconst DEFAULT_INPUT_OPTIONS = { keyboard: true, mouse: true }\n\nclass AppContext {\n  constructor (canvas, options = {}) {\n    this.canvas = canvas\n    let gl = canvas.getContext('webgl')\n    if (!gl) {\n      console.warn('WebGL not supported. Trying to use experimental webgl')\n      gl = canvas.getContext('experimental-webgl')\n    }\n    if (!gl) {\n      window.alert('Your browser does not support WebGL and 3D magic')\n      throw new Error('Your browser does not support WebGL and 3D magic')\n    }\n    this.gl = gl\n    this.__state = 'initializing'\n    this.__drawDoneTime = 0\n    this.__deltaTime = 0\n    this.__setupInputs({ ...options.input, ...DEFAULT_INPUT_OPTIONS })\n  }\n\n  __setupInputs (inputOptions) {\n    this.__input = {\n      keyboard: inputOptions.keyboard ? new Keyboard() : undefined,\n      mouse: inputOptions.mouse ? new Mouse() : undefined\n    }\n  }\n\n  notifyUpdating () {\n    this.__deltaTime = window.performance.now() - this.__drawDoneTime\n    this.__state = 'updating'\n  }\n\n  notifyUpdateDone () {\n    this.__state = 'updated'\n    if (this.__input.mouse) {\n      this.__input.mouse.update()\n    }\n  }\n\n  notifyDrawing () {\n    this.__state = 'drawing'\n  }\n\n  notifyDrawDone () {\n    this.__state = 'drawn'\n    this.__drawDoneTime = window.performance.now()\n  }\n\n  get input () {\n    return { ...this.__input }\n  }\n\n  get state () {\n    return this.__state\n  }\n\n  get deltaTime () {\n    return this.__deltaTime\n  }\n\n  createVertexShader (source) {\n    const { gl } = this\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER)\n    gl.shaderSource(vertexShader, source)\n    gl.compileShader(vertexShader)\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      throw new Error(`Error compiling vertex shader ${gl.getShaderInfoLog(vertexShader)}`)\n    }\n    return vertexShader\n  }\n\n  createFragmentShader (source) {\n    const { gl } = this\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)\n    gl.shaderSource(fragmentShader, source)\n    gl.compileShader(fragmentShader)\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      throw new Error(`Error compiling fragment shader ${gl.getShaderInfoLog(fragmentShader)}`)\n    }\n    return fragmentShader\n  }\n}\n\nexport default AppContext\n","class GameObject {\n  constructor (context) {\n    this.context = context\n    this.position = { x: 0, y: 0, z: 0 }\n    this.scale = { x: 1, y: 1, z: 1 }\n    this.rotation = { x: 0, y: 0, z: 0 }\n    this.__controlScripts = {}\n  }\n\n  addControlScript (name, script) {\n    this.__controlScripts[name] = script\n  }\n\n  getControlScript (name) {\n    return this.__controlScripts[name]\n  }\n\n  setScene (scene) {\n    this.scene = scene\n  }\n\n  _setModel (model) {\n    this.__model = model\n  }\n\n  draw (mView, mProj) {\n    if (this.__model) {\n      this.__model.prepareDraw(\n        this.position,\n        this.rotation,\n        this.scale,\n        mView,\n        mProj\n      )\n      this.__model.draw()\n    }\n  }\n\n  update () {\n    const { __controlScripts } = this\n    Object.keys(__controlScripts).forEach(name => {\n      __controlScripts[name].update(this, this.context)\n    })\n  }\n\n  destroy () {\n    if (this.__model) this.__model.destroy()\n  }\n}\n\nexport default GameObject\n","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 2x2 Matrix\n * @module mat2\n */\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\n * Calculates the determinant of a mat2\n *\n * @param {ReadonlyMat2} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat2} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\n * Returns a string representation of a mat2\n *\n * @param {ReadonlyMat2} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3]);\n}\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {ReadonlyMat2} L the lower triangular matrix\n * @param {ReadonlyMat2} D the diagonal matrix\n * @param {ReadonlyMat2} U the upper triangular matrix\n * @param {ReadonlyMat2} a the input matrix to factorize\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat2} a The first matrix.\n * @param {ReadonlyMat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat2} a The first matrix.\n * @param {ReadonlyMat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 2x3 Matrix\n * @module mat2d\n * @description\n * A mat2d contains six elements defined as:\n * <pre>\n * [a, b,\n *  c, d,\n *  tx, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, b, 0,\n *  c, d, 0,\n *  tx, ty, 1]\n * </pre>\n * The last column is ignored so the array is shorter and operations are faster.\n */\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {ReadonlyMat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {mat2d} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {mat2d} out\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to translate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to translate\n * @param {ReadonlyVec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat2d} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat2d} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\n * Returns a string representation of a mat2d\n *\n * @param {ReadonlyMat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat2d(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\n}\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat2d} a The first matrix.\n * @param {ReadonlyMat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat2d} a The first matrix.\n * @param {ReadonlyMat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\n * Dual Quaternion<br>\n * Format: [real, dual]<br>\n * Quaternion format: XYZW<br>\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\n * @module quat2\n */\n\n/**\n * Creates a new identity dual quat\n *\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat2} a dual quaternion to clone\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\n * Creates a new dual quat initialized with the given values\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\n * Creates a new dual quat from the given values (quat and translation)\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component (translation)\n * @param {Number} y2 Y component (translation)\n * @param {Number} z2 Z component (translation)\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\n * Creates a dual quat from a quaternion and a translation\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyQuat} q a normalized quaternion\n * @param {ReadonlyVec3} t tranlation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Creates a dual quat from a translation\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyVec3} t translation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\n * Creates a dual quat from a quaternion\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyQuat} q the quaternion\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\n * Creates a new dual quat from a matrix (4x4)\n *\n * @param {quat2} out the dual quaternion\n * @param {ReadonlyMat4} a the matrix\n * @returns {quat2} dual quat receiving operation result\n * @function\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\n * Copy the values from one dual quat to another\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the source dual quaternion\n * @returns {quat2} out\n * @function\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\n * Set a dual quat to the identity dual quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @returns {quat2} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\n * Set the components of a dual quat to the given values\n *\n * @param {quat2} out the receiving quaternion\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} out\n * @function\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\n * Gets the real part of a dual quat\n * @param  {quat} out real part\n * @param  {ReadonlyQuat2} a Dual Quaternion\n * @return {quat} real part\n */\n\nexport var getReal = quat.copy;\n/**\n * Gets the dual part of a dual quat\n * @param  {quat} out dual part\n * @param  {ReadonlyQuat2} a Dual Quaternion\n * @return {quat} dual part\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\n * Set the real component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat} q a quaternion representing the real part\n * @returns {quat2} out\n * @function\n */\n\nexport var setReal = quat.copy;\n/**\n * Set the dual component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat} q a quaternion representing the dual part\n * @returns {quat2} out\n * @function\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\n * Gets the translation of a normalized dual quat\n * @param  {vec3} out translation\n * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed\n * @return {vec3} translation\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\n * Translates a dual quat by the given vector\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {quat2} out\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\n * Rotates a dual quat around the X axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around the Y axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around the Z axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat by a given quaternion (a * q)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {ReadonlyQuat} q quaternion to rotate by\n * @returns {quat2} out\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\n * Rotates a dual quat by a given quaternion (q * a)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat} q quaternion to rotate by\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @returns {quat2} out\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around a given axis. Does the normalisation automatically\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @param {Number} rad how far the rotation should be\n * @returns {quat2} out\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Adds two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {quat2} out\n * @function\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\n * Multiplies two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {quat2} out\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\n * Alias for {@link quat2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a dual quat by a scalar number\n *\n * @param {quat2} out the receiving dual quat\n * @param {ReadonlyQuat2} a the dual quat to scale\n * @param {Number} b amount to scale the dual quat by\n * @returns {quat2} out\n * @function\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\n *\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = quat.dot;\n/**\n * Performs a linear interpolation between two dual quats's\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\n *\n * @param {quat2} out the receiving dual quat\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a dual quat to calculate inverse of\n * @returns {quat2} out\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\n * Calculates the conjugate of a dual quat\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat2} a quat to calculate conjugate of\n * @returns {quat2} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\n * Calculates the length of a dual quat\n *\n * @param {ReadonlyQuat2} a dual quat to calculate length of\n * @returns {Number} length of a\n * @function\n */\n\nexport var length = quat.length;\n/**\n * Alias for {@link quat2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a dual quat\n *\n * @param {ReadonlyQuat2} a dual quat to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\n * Alias for {@link quat2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a dual quat\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a dual quaternion to normalize\n * @returns {quat2} out\n * @function\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\n * Returns a string representation of a dual quatenion\n *\n * @param {ReadonlyQuat2} a dual quaternion to represent as a string\n * @returns {String} string representation of the dual quat\n */\n\nexport function str(a) {\n  return \"quat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \")\";\n}\n/**\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat2} a the first dual quaternion.\n * @param {ReadonlyQuat2} b the second dual quaternion.\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat2} a the first dual quat.\n * @param {ReadonlyQuat2} b the second dual quat.\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat2 from \"./mat2.js\";\nimport * as mat2d from \"./mat2d.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as mat4 from \"./mat4.js\";\nimport * as quat from \"./quat.js\";\nimport * as quat2 from \"./quat2.js\";\nimport * as vec2 from \"./vec2.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","import { mat4, quat } from 'gl-matrix'\n\nclass Model {\n  constructor (context) {\n    this.context = context\n    this.gl = context.gl\n  }\n\n  initialize (vertexShader, fragmentShader) {\n    const { gl } = this\n    this.program = gl.createProgram()\n    gl.attachShader(this.program, vertexShader.location)\n    gl.attachShader(this.program, fragmentShader.location)\n    this.__linkAndValidate()\n    this.__attribLocations = {\n      mWorld: gl.getUniformLocation(this.program, 'mWorld'),\n      mView: gl.getUniformLocation(this.program, 'mView'),\n      mProj: gl.getUniformLocation(this.program, 'mProj')\n    }\n  }\n\n  _createBuffer (data) {\n    const { gl } = this\n    const bufferObject = gl.createBuffer()\n    gl.bindBuffer(gl.ARRAY_BUFFER, bufferObject)\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW)\n  }\n\n  _createElementBuffer (data) {\n    const { gl } = this\n    const bufferObject = gl.createBuffer()\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferObject)\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(data), gl.STATIC_DRAW)\n  }\n\n  prepareDraw (position, rotation, scale, mView, mProj) {\n    const { gl } = this\n    gl.useProgram(this.program)\n    const mWorld = new Float32Array(16)\n    const rotationQuat = new Float32Array(9)\n    quat.fromEuler(rotationQuat, rotation.x, rotation.y, rotation.z)\n\n    const mRotate = new Float32Array(16)\n    const mScale = new Float32Array(16)\n    const mTranslate = new Float32Array(16)\n\n    mat4.fromTranslation(mTranslate, [position.x, position.y, position.z])\n    mat4.fromScaling(mScale, [scale.x, scale.y, scale.z])\n    mat4.fromQuat(mRotate, rotationQuat)\n\n    mat4.multiply(mWorld, mTranslate, mRotate)\n    mat4.multiply(mWorld, mWorld, mScale)\n\n    gl.uniformMatrix4fv(this.__attribLocations.mWorld, gl.FALSE, mWorld)\n    gl.uniformMatrix4fv(this.__attribLocations.mView, gl.FALSE, mView)\n    gl.uniformMatrix4fv(this.__attribLocations.mProj, gl.FALSE, mProj)\n  }\n\n  destroy () {\n    this.gl.deleteProgram(this.program)\n  }\n\n  __linkAndValidate () {\n    const { program, gl } = this\n    gl.linkProgram(program)\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      throw new Error(`Error linking program ${gl.getProgramInfoLog(program)}`)\n    }\n    gl.validateProgram(program)\n    if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\n      throw new Error(`Error validating program ${gl.getProgramInfoLog(program)}`)\n    }\n  }\n}\n\nexport default Model\n","import Model from '../../Model'\n\nclass Cylinder extends Model {\n  initialize (vertexShader, fragmentShader) {\n    super.initialize(vertexShader, fragmentShader)\n    const { gl } = this\n    this.attribLocations = {\n      vertPosition: gl.getAttribLocation(this.program, 'vertPosition'),\n      texCoord: gl.getAttribLocation(this.program, 'texCoord')\n    }\n  }\n\n  initializeProperties (radius, height, slices) {\n    this.radius = radius\n    this.height = height\n    this.slices = slices\n  }\n\n  setTexture (texture) {\n    this.texture = texture\n  }\n\n  generateVertices (radius = 0.8, height = 1, slices = 10) {\n    const halfLength = height / 2\n    const step = Math.PI * 2.0 / slices\n    const buffer = []\n    const bodyStart = 0\n    let i = 0\n    for (i = 0; i < slices + 1; ++i) {\n      const a = -(step * i)\n      const x = Math.cos(a) * radius\n      const z = Math.sin(a) * radius\n\n      buffer.push(x)\n      buffer.push(halfLength)\n      buffer.push(z)\n      buffer.push(0.2)\n      buffer.push(0.2)\n\n      buffer.push(x)\n      buffer.push(-halfLength)\n      buffer.push(z)\n      buffer.push(0.2)\n      buffer.push(0.2)\n    }\n    const bodyLength = i * 2\n    const topStart = bodyLength\n\n    buffer.push(0)\n    buffer.push(halfLength)\n    buffer.push(0)\n    buffer.push(0.25)\n    buffer.push(0.5)\n\n    for (i = 0; i < slices + 2; ++i) {\n      const a = -(step * i)\n      const x = Math.cos(a) * radius\n      const z = Math.sin(a) * radius\n\n      const b = a - Math.PI\n      const u = (Math.cos(b) + 1) / 4\n      const v = (Math.sin(b) + 1) / 2\n\n      buffer.push(x)\n      buffer.push(halfLength)\n      buffer.push(z)\n      buffer.push(u)\n      buffer.push(v)\n    }\n\n    const topLength = i\n\n    buffer.push(0)\n    buffer.push(-halfLength)\n    buffer.push(0)\n    buffer.push(0.75)\n    buffer.push(0.5)\n\n    const bottomStart = topStart + topLength + 1\n\n    const bottomSlices = slices + 1\n    for (let i = 0; i < bottomSlices; ++i) {\n      const a = -(step * (bottomSlices - i))\n      const x = Math.cos(a) * radius\n      const z = Math.sin(a) * radius\n\n      const b = a - Math.PI\n      const u = (Math.cos(b) + 1) / 4 + 0.5\n      const v = (Math.sin(b) + 1) / 2\n\n      buffer.push(x)\n      buffer.push(-halfLength)\n      buffer.push(z)\n      buffer.push(u)\n      buffer.push(v)\n    }\n\n    const bottomLength = i\n\n    return {\n      buffer: buffer,\n      bodyStart,\n      bodyLength,\n      topStart,\n      topLength,\n      bottomStart,\n      bottomLength\n    }\n  }\n\n  draw () {\n    const { gl } = this\n    const slices = this.slices || 10\n    const radius = this.radius || 0.8\n    const height = this.height || 1\n    const {\n      buffer,\n      bodyStart,\n      bodyLength,\n      topStart,\n      topLength,\n      bottomStart,\n      bottomLength\n    } = this.generateVertices(radius, height, slices)\n    this._createBuffer(buffer)\n\n    gl.vertexAttribPointer(\n      this.attribLocations.vertPosition,\n      3,\n      gl.FLOAT,\n      gl.FALSE,\n      5 * Float32Array.BYTES_PER_ELEMENT,\n      0\n    )\n    gl.vertexAttribPointer(\n      this.attribLocations.texCoord,\n      2,\n      gl.FLOAT,\n      gl.FALSE,\n      5 * Float32Array.BYTES_PER_ELEMENT,\n      3 * Float32Array.BYTES_PER_ELEMENT\n    )\n    gl.enableVertexAttribArray(this.attribLocations.vertPosition)\n    gl.enableVertexAttribArray(this.attribLocations.texCoord)\n    gl.bindTexture(gl.TEXTURE_2D, this.texture.location)\n    gl.activeTexture(gl.TEXTURE0)\n    gl.drawArrays(gl.TRIANGLE_STRIP, bodyStart, bodyLength)\n    gl.drawArrays(gl.TRIANGLE_FAN, topStart, topLength)\n    gl.drawArrays(gl.TRIANGLE_FAN, bottomStart, bottomLength)\n  }\n}\n\nexport default Cylinder\n","class VertexShader {\n  constructor (context, src) {\n    this.__compile(context.gl, src)\n  }\n\n  __compile (gl, source) {\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER)\n    gl.shaderSource(vertexShader, source)\n    gl.compileShader(vertexShader)\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      throw new Error(`Error compiling vertex shader ${gl.getShaderInfoLog(vertexShader)}`)\n    }\n    this.location = vertexShader\n  }\n}\n\nexport default VertexShader\n","class FragmentShader {\n  constructor (context, src) {\n    this.__compile(context.gl, src)\n  }\n\n  __compile (gl, source) {\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)\n    gl.shaderSource(fragmentShader, source)\n    gl.compileShader(fragmentShader)\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      throw new Error(`Error compiling fragment shader ${gl.getShaderInfoLog(fragmentShader)}`)\n    }\n    this.location = fragmentShader\n  }\n}\n\nexport default FragmentShader\n","import GameObject from '../../core/GameObject'\nimport Cylinder from '../../models/primitives/Cylinder'\nimport VertexShader from '../../core/shaders/VertexShader'\nimport FragmentShader from '../../core/shaders/FragmentShader'\nimport vertexShaderSrc from './shader.vert'\nimport fragmentShaderSrc from './shader.frag'\n\nclass Coin extends GameObject {\n  initialize (radius, thickness, detail = 20) {\n    const vertexShader = new VertexShader(this.context, vertexShaderSrc)\n    const fragmentShader = new FragmentShader(this.context, fragmentShaderSrc)\n    const model = new Cylinder(this.context)\n    model.initialize(vertexShader, fragmentShader)\n    model.initializeProperties(radius, thickness, detail)\n    this._setModel(model)\n  }\n\n  setTexture (textureImage) {\n    this.__model.setTexture(textureImage)\n  }\n}\n\nexport default Coin\n","class Scene {\n  constructor (context) {\n    const { gl } = context\n    this.context = context\n    this.__clearColor = [1.0, 1.0, 1.0, 1.0]\n    this.__gameObjects = []\n    gl.enable(gl.DEPTH_TEST)\n    gl.enable(gl.CULL_FACE)\n    gl.frontFace(gl.CCW)\n    gl.cullFace(gl.BACK)\n\n    this.__drawGameObject = this.__drawGameObject.bind(this)\n    this.__updateGameObject = this.__updateGameObject.bind(this)\n  }\n\n  setClearColor (clearColor) {\n    this.context.gl.clearColor(clearColor[0], clearColor[1], clearColor[2], clearColor[3])\n    this.__clearColor = clearColor\n  }\n\n  addGameObject (gameObject) {\n    const { __gameObjects } = this\n    gameObject.setScene(this)\n    gameObject.__sceneIndex = __gameObjects.length\n    __gameObjects.push(gameObject)\n  }\n\n  removeGameObject (gameObject) {\n    const index = gameObject.__sceneIndex\n    if (index !== undefined) {\n      this.__gameObjects.splice(index, 1)\n    }\n  }\n\n  setCamera (camera) {\n    this.__camera = camera\n  }\n\n  get camera () {\n    return this.__camera\n  }\n\n  get height () {\n    return this.context.canvas.height\n  }\n\n  get width () {\n    return this.context.canvas.width\n  }\n\n  update () {\n    this.context.notifyUpdating()\n    this.__camera.update()\n    this.__gameObjects.forEach(this.__updateGameObject)\n    this.context.notifyUpdateDone()\n  }\n\n  draw () {\n    this.context.notifyDrawing()\n    const { context: { gl } } = this\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n    this.__gameObjects.forEach(this.__drawGameObject)\n    this.context.notifyDrawDone()\n  }\n\n  __updateGameObject (gameObject) {\n    gameObject.update()\n  }\n\n  __drawGameObject (gameObject) {\n    gameObject.draw(this.__camera.viewMat, this.__camera.projMat)\n  }\n}\n\nexport default Scene\n","import { mat4, glMatrix, quat } from 'gl-matrix'\nimport GameObject from '../GameObject'\n\nclass Camera extends GameObject {\n  constructor (context) {\n    super(context)\n    this.__viewMatrix = new Float32Array(16)\n    this.__projection = new Float32Array(16)\n    this.__fov = glMatrix.toRadian(45)\n    this.__focus = [0.1, 4000]\n    this.__lookAtPosition = null\n    this.__ratio = 16 / 9\n  }\n\n  setPosition ([x, y, z]) {\n    this.position = { x, y, z }\n  }\n\n  setAspectRatio (ratio) {\n    this.__ratio = ratio\n  }\n\n  stopLookAt () {\n    this.__lookAtPosition = null\n  }\n\n  lookAt (position) {\n    this.__lookAtPosition = position\n  }\n\n  setFieldOfView (fov) {\n    this.__fov = glMatrix.toRadian(fov)\n  }\n\n  setFocus (near, far) {\n    this.__focus = [near, far]\n  }\n\n  get viewMat () {\n    const from = [this.position.x, this.position.y, this.position.z]\n    if (this.__lookAtPosition) {\n      mat4.lookAt(\n        this.__viewMatrix,\n        from,\n        this.__lookAtPosition,\n        [0, 1, 0]\n      )\n    } else {\n      const { position, rotation, scale } = this\n      const rotationQuat = new Float32Array(9)\n      quat.fromEuler(rotationQuat, rotation.x, rotation.y, rotation.z)\n\n      const mRotate = new Float32Array(16)\n      const mScale = new Float32Array(16)\n      const mTranslate = new Float32Array(16)\n\n      mat4.fromTranslation(mTranslate, [position.x, position.y, position.z])\n      mat4.fromScaling(mScale, [scale.x, scale.y, scale.z])\n      mat4.fromQuat(mRotate, rotationQuat)\n\n      mat4.multiply(this.__viewMatrix, mTranslate, mRotate)\n      mat4.multiply(this.__viewMatrix, this.__viewMatrix, mScale)\n      mat4.invert(this.__viewMatrix, this.__viewMatrix)\n    }\n    return this.__viewMatrix\n  }\n\n  get projMat () {\n    mat4.perspective(\n      this.__projection,\n      this.__fov,\n      this.__ratio,\n      this.__focus[0],\n      this.__focus[1]\n    )\n    return this.__projection\n  }\n}\n\nexport default Camera\n","class Texture {\n  constructor (context) {\n    this.gl = context.gl\n  }\n\n  setImage (image, channels = 3, tile = false) {\n    this.__tile = tile\n    this.__channels = channels\n    this.__prepare(image)\n  }\n\n  loadImage (url, channels = 3, tile = false) {\n    return new Promise((resolve, reject) => {\n      this.__tile = tile\n      this.__channels = 3\n      const image = document.createElement('img')\n      image.onload = () => {\n        this.__prepare(image)\n        resolve(image)\n      }\n      image.src = url\n    })\n  }\n\n  get location () {\n    return this.__location\n  }\n\n  __prepare (image) {\n    const { gl } = this\n    const channels = this.__channels === 4 ? gl.RGBA : gl.RGB\n    this.__location = gl.createTexture()\n    gl.bindTexture(gl.TEXTURE_2D, this.__location)\n    const wrap = this.__tile ? gl.REPEAT : gl.CLAMP_TO_EDGE\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrap)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrap)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)\n\n    gl.texImage2D(gl.TEXTURE_2D, 0, channels, channels, gl.UNSIGNED_BYTE, image)\n\n    gl.bindTexture(gl.TEXTURE_2D, null)\n  }\n}\n\nexport default Texture\n","class ControlScript {\n  update (gameObject, context) {}\n}\n\nexport default ControlScript\n","class Interpolator {\n  constructor (from, to, duration, easingFn = Interpolator.EASING.LINEAR) {\n    this.__from = Array.isArray(from) ? from : [from]\n    this.__to = Array.isArray(to) ? to : [to]\n    this.__duration = duration\n    this.__remaining = duration\n    this.__easingFn = easingFn\n    this.__done = false\n  }\n\n  clone (easingFn = this.__easingFn) {\n    return new Interpolator(this.__from, this.__to, this.__duration, easingFn)\n  }\n\n  reverse (easingFn = this.__easingFn) {\n    return new Interpolator(this.__to, this.__from, this.__duration, easingFn)\n  }\n\n  reset () {\n    this.__remaining = this.__duration\n    this.__done = false\n  }\n\n  get done () {\n    return this.__done\n  }\n\n  update (deltaTime) {\n    const { __from, __to } = this\n    if (this.__done) return this.__to\n    const elapsed = this.__duration - this.__remaining\n    this.__remaining = this.__remaining - deltaTime\n    if (this.__remaining <= 0) {\n      this.__done = true\n      return this.__to\n    }\n    const value = elapsed\n      ? __from.map((val, index) => {\n        return this.__easingFn(elapsed, val, __to[index] - val, this.__duration)\n      })\n      : this.__from\n    return value\n  }\n}\n\n// REFERENCE: https://github.com/danro/jquery-easing/blob/master/jquery.easing.js\nInterpolator.EASING = {\n  LINEAR (t, b, c, d) {\n    return b + (t / d * c)\n  },\n\n  IN: {\n    QUAD (t, b, c, d) {\n      return c * (t /= d) * t + b\n    },\n\n    CUBIC (t, b, c, d) {\n      return c * (t /= d) * t * t + b\n    },\n\n    QUART (t, b, c, d) {\n      return c * (t /= d) * t * t * t + b\n    },\n\n    QUINT (t, b, c, d) {\n      return c * (t /= d) * t * t * t * t + b\n    },\n\n    SINE (t, b, c, d) {\n      return -c * Math.cos(t / d * (Math.PI / 2)) + c + b\n    },\n\n    EXPO (t, b, c, d) {\n      return (t === 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b\n    },\n\n    CIRC (t, b, c, d) {\n      return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b\n    },\n\n    ELASTIC (t, b, c, d) {\n      var s = 1.70158; var p = 0; var a = c\n      if (t === 0) return b; if ((t /= d) === 1) return b + c; if (!p) p = d * 0.3\n      if (a < Math.abs(c)) { a = c; var s = p / 4 } else var s = p / (2 * Math.PI) * Math.asin(c / a)\n      return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b\n    },\n\n    BACK (t, b, c, d, s) {\n      if (s === undefined) s = 1.70158\n      return c * (t /= d) * t * ((s + 1) * t - s) + b\n    }\n  },\n\n  OUT: {\n    QUAD (t, b, c, d) {\n      return -c * (t /= d) * (t - 2) + b\n    },\n\n    CUBIC (t, b, c, d) {\n      return c * ((t = t / d - 1) * t * t + 1) + b\n    },\n\n    QUART (t, b, c, d) {\n      return -c * ((t = t / d - 1) * t * t * t - 1) + b\n    },\n\n    QUINT (t, b, c, d) {\n      return c * ((t = t / d - 1) * t * t * t * t + 1) + b\n    },\n\n    SINE (t, b, c, d) {\n      return c * Math.sin(t / d * (Math.PI / 2)) + b\n    },\n\n    EXPO (t, b, c, d) {\n      return (t === d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b\n    },\n\n    CIRC (t, b, c, d) {\n      return c * Math.sqrt(1 - (t = t / d - 1) * t) + b\n    },\n\n    ELASTIC (t, b, c, d) {\n      var s = 1.70158; var p = 0; var a = c\n      if (t === 0) return b; if ((t /= d) === 1) return b + c; if (!p) p = d * 0.3\n      if (a < Math.abs(c)) { a = c; var s = p / 4 } else var s = p / (2 * Math.PI) * Math.asin(c / a)\n      return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b\n    },\n\n    BACK (t, b, c, d, s) {\n      if (s === undefined) s = 1.70158\n      return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b\n    }\n  },\n\n  IN_OUT: {\n    QUAD (t, b, c, d) {\n      if ((t /= d / 2) < 1) return c / 2 * t * t + b\n      return -c / 2 * ((--t) * (t - 2) - 1) + b\n    },\n\n    CUBIC (t, b, c, d) {\n      if ((t /= d / 2) < 1) return c / 2 * t * t * t + b\n      return c / 2 * ((t -= 2) * t * t + 2) + b\n    },\n\n    QUART (t, b, c, d) {\n      if ((t /= d / 2) < 1) return c / 2 * t * t * t * t + b\n      return -c / 2 * ((t -= 2) * t * t * t - 2) + b\n    },\n    QUINT (t, b, c, d) {\n      if ((t /= d / 2) < 1) return c / 2 * t * t * t * t * t + b\n      return c / 2 * ((t -= 2) * t * t * t * t + 2) + b\n    },\n    SINE (t, b, c, d) {\n      return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b\n    },\n\n    EXPO (t, b, c, d) {\n      if (t === 0) return b\n      if (t === d) return b + c\n      if ((t /= d / 2) < 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b\n      return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b\n    },\n\n    CIRC (t, b, c, d) {\n      if ((t /= d / 2) < 1) return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b\n      return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b\n    },\n\n    ELASTIC (t, b, c, d) {\n      var s = 1.70158; var p = 0; var a = c\n      if (t === 0) return b; if ((t /= d / 2) === 2) return b + c; if (!p) p = d * (0.3 * 1.5)\n      if (a < Math.abs(c)) { a = c; var s = p / 4 } else var s = p / (2 * Math.PI) * Math.asin(c / a)\n      if (t < 1) return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b\n      return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * 0.5 + c + b\n    },\n\n    BACK (t, b, c, d, s) {\n      if (s === undefined) s = 1.70158\n      if ((t /= d / 2) < 1) return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b\n      return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b\n    }\n  }\n}\n\n/*\n *\n * TERMS OF USE - EASING EQUATIONS\n * \n * Open source under the BSD License. \n * \n * Copyright © 2001 Robert Penner\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without modification, \n * are permitted provided that the following conditions are met:\n * \n * Redistributions of source code must retain the above copyright notice, this list of \n * conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above copyright notice, this list \n * of conditions and the following disclaimer in the documentation and/or other materials \n * provided with the distribution.\n * \n * Neither the name of the author nor the names of contributors may be used to endorse \n * or promote products derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED \n * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED \n * OF THE POSSIBILITY OF SUCH DAMAGE. \n *\n */\n\nexport default Interpolator\n","class SerialInterpolatorSet {\n  constructor (interpolators) {\n    this.__items = interpolators\n    this.__currentIdx = 0\n  }\n\n  get done () {\n    return this.__currentIdx === this.__items.length\n  }\n\n  reset () {\n    this.__currentIdx = 0\n    this.__items.forEach(item => item.reset())\n  }\n\n  update (deltaTime) {\n    if (this.done) {\n      const lastItem = this.__items[this.__items.length - 1]\n      return lastItem.update(deltaTime)\n    } else {\n      const currentItem = this.__items[this.__currentIdx]\n      const val = currentItem.update(deltaTime)\n      if (currentItem.done) ++this.__currentIdx\n      return val\n    }\n  }\n}\n\nexport default SerialInterpolatorSet\n","class ParallelInterpolatorSet {\n  constructor (interpolators) {\n    this.__items = interpolators\n    this.__done = false\n  }\n\n  get done () {\n    return this.__done\n  }\n\n  reset () {\n    this.__items.forEach(item => item.reset())\n    this.__done = false\n  }\n\n  update (deltaTime) {\n    let allDone = true\n    const vals = this.__items.map(item => {\n      const val = item.update(deltaTime)\n      allDone = allDone && item.done\n      return val\n    })\n    if (allDone) { this.__done = true }\n    return vals\n  }\n}\n\nexport default ParallelInterpolatorSet\n","import Interpolator from '../../interpolators/Interpolator'\nimport SerialInterpolatorSet from '../../interpolators/SerialInterpolatorSet'\nimport ParallelInterpolatorSet from '../../interpolators/ParallelInterpolatorSet'\n\nexport function flipAnimation (gameObject, endAngle) {\n  const startY = gameObject.position.y\n  const midY = startY + 2\n  const endY = midY + 1\n  const jump = new Interpolator(startY, midY, 400)\n  const slowJump = new Interpolator(midY, endY, 400, Interpolator.EASING.OUT.SINE)\n  const stall = new Interpolator(endY, endY, 100)\n  const jumpAnim = new SerialInterpolatorSet([\n    jump,\n    slowJump,\n    stall,\n    slowJump.reverse(Interpolator.EASING.IN.SINE),\n    jump.reverse()\n  ])\n  const slowFlip = new Interpolator(0, 480, 900)\n  const flip = new Interpolator(0, 720, 400)\n  const endFlip = new Interpolator(360, endAngle, 400)\n  const flipAnim = new SerialInterpolatorSet([\n    flip,\n    slowFlip,\n    endFlip\n  ])\n  return new ParallelInterpolatorSet([\n    jumpAnim,\n    flipAnim\n  ])\n}\n","import ControlScript from '../../core/ControlScript'\nimport { flipAnimation } from './animations'\n\nclass ControlCoin extends ControlScript {\n  constructor () {\n    super()\n    this.__flipping = false\n    this.__flipAnimation = null\n    this.__flipResult = null\n    this.__onFlipEnd = null\n  }\n\n  onFlipStart (callback) {\n    this.__onFlipStart = callback\n  }\n\n  onFlipEnd (callback) {\n    this.__onFlipEnd = callback\n  }\n\n  startFlipping (gameObject, context) {\n    const mouse = context.input.mouse\n    if (mouse.isButtonPressed('left')) {\n      this.__flipping = true\n      const heads = Math.random() < 0.5\n      this.__flipAnimation = flipAnimation(gameObject, heads ? 720 : 900)\n      this.__flipResult = { heads, tails: !heads }\n      if (this.__onFlipStart) this.__onFlipStart()\n    }\n  }\n\n  update (gameObject, context) {\n    if (!this.__flipping) this.startFlipping(gameObject, context)\n    else {\n      const [pos, rot] = this.__flipAnimation.update(context.deltaTime)\n      gameObject.position.y = pos[0]\n      gameObject.rotation.x = rot[0]\n      if (this.__flipAnimation.done) {\n        this.__flipping = false\n        if (this.__onFlipEnd) return this.__onFlipEnd(this.__flipResult)\n      }\n    }\n  }\n}\n\nexport default ControlCoin\n","import Model from '../Model'\n\nclass Table extends Model {\n  initialize (vertexShader, fragmentShader) {\n    super.initialize(vertexShader, fragmentShader)\n    const { gl } = this\n    this.attribLocations = {\n      vertPosition: gl.getAttribLocation(this.program, 'vertPosition'),\n      texCoord: gl.getAttribLocation(this.program, 'texCoord')\n    }\n  }\n\n  initializeProperties (height, width, breadth, legHeight, legWidth, legBreadth) {\n    this.height = height\n    this.width = width\n    this.breadth = breadth\n    this.legHeight = legHeight\n    this.legWidth = legWidth\n    this.legBreadh = legBreadth\n  }\n\n  setTexture (texture) {\n    this.texture = texture\n  }\n\n  generateLegVertices (height, width, breadth, halfBaseHeight, halfBaseWidth, halfBaseBreadth, indexOffset = 0) {\n    const halfHeight = height / 2\n    const halfWidth = width / 2\n    const halfBreadth = breadth / 2\n\n    const leg1 = generateOneLegVertices(\n      0, halfBaseWidth - halfWidth, -halfHeight - halfBaseHeight, halfBaseBreadth - halfBreadth\n    )\n    const leg2 = generateOneLegVertices(\n      1, halfBaseWidth - halfWidth, -halfHeight - halfBaseHeight, -halfBaseBreadth + halfBreadth\n    )\n    const leg3 = generateOneLegVertices(\n      2, -halfBaseWidth + halfWidth, -halfHeight - halfBaseHeight, halfBaseBreadth - halfBreadth\n    )\n    const leg4 = generateOneLegVertices(\n      3, -halfBaseWidth + halfWidth, -halfHeight - halfBaseHeight, -halfBaseBreadth + halfBreadth\n    )\n\n    return {\n      vertices: [...leg1.vertices, ...leg2.vertices, ...leg3.vertices, ...leg4.vertices],\n      indices: [...leg1.indices, ...leg2.indices, ...leg3.indices, ...leg4.indices]\n    }\n\n    function generateOneLegVertices (legNumber, tx, ty, tz) {\n      const vertices = [\n        halfWidth + tx, -halfHeight + ty, -halfBreadth + tz, 0.0, 0.0,\n        halfWidth + tx, halfHeight + ty, -halfBreadth + tz, 0.1, 0.1,\n        -halfWidth + tx, -halfHeight + ty, -halfBreadth + tz, 0.0, 0.0,\n        -halfWidth + tx, halfHeight + ty, -halfBreadth + tz, 0.1, 0.1,\n\n        halfWidth + tx, -halfHeight + ty, halfBreadth + tz, 0.0, 0.0,\n        halfWidth + tx, halfHeight + ty, halfBreadth + tz, 0.1, 0.1,\n        -halfWidth + tx, -halfHeight + ty, halfBreadth + tz, 0.0, 0.0,\n        -halfWidth + tx, halfHeight + ty, halfBreadth + tz, 0.1, 0.1,\n\n        halfWidth + tx, halfHeight + ty, halfBreadth + tz, 0.1, 0.1,\n        halfWidth + tx, halfHeight + ty, -halfBreadth + tz, 0.0, 0.0,\n        -halfWidth + tx, halfHeight + ty, -halfBreadth + tz, 0.0, 0.0,\n        -halfWidth + tx, halfHeight + ty, halfBreadth + tz, 0.1, 0.1,\n\n        halfWidth + tx, -halfHeight + ty, halfBreadth + tz, 0.0, 0.0,\n        halfWidth + tx, -halfHeight + ty, -halfBreadth + tz, 0.1, 0.1,\n        -halfWidth + tx, -halfHeight + ty, -halfBreadth + tz, 0.0, 0.0,\n        -halfWidth + tx, -halfHeight + ty, halfBreadth + tz, 0.1, 0.1,\n\n        halfWidth + tx, halfHeight + ty, -halfBreadth + tz, 0.0, 0.0,\n        halfWidth + tx, halfHeight + ty, halfBreadth + tz, 0.1, 0.1,\n        halfWidth + tx, -halfHeight + ty, -halfBreadth + tz, 0.0, 0.0,\n        halfWidth + tx, -halfHeight + ty, halfBreadth + tz, 0.1, 0.1,\n\n        -halfWidth + tx, halfHeight + ty, -halfBreadth + tz, 0.0, 0.0,\n        -halfWidth + tx, halfHeight + ty, halfBreadth + tz, 0.1, 0.1,\n        -halfWidth + tx, -halfHeight + ty, -halfBreadth + tz, 0.0, 0.0,\n        -halfWidth + tx, -halfHeight + ty, halfBreadth + tz, 0.1, 0.1\n      ]\n\n      const indices = [\n        1, 2, 3, 2, 1, 0, // BACKWARD\n        4, 5, 6, 7, 6, 5, // FORWARD\n        8, 9, 10, 10, 11, 8, // TOP\n        12, 15, 14, 14, 13, 12, // BOTTOM\n        16, 17, 18, 19, 18, 17, // LEFT\n        21, 22, 23, 22, 21, 20 // RIGHT\n      ]\n      const numVertices = (vertices.length / 5)\n      const correctedIndices = indices.map(idx => idx + indexOffset + (legNumber * numVertices))\n      return { vertices, indices: correctedIndices }\n    }\n  }\n\n  generateVertices (legHeight, legWidth, legBreadth, baseHeight, baseWidth, baseBreadth) {\n    const halfHeight = baseHeight / 2\n    const halfWidth = baseWidth / 2\n    const halfBreadth = baseBreadth / 2\n\n    const vertices = [\n      halfWidth, -halfHeight, -halfBreadth, 0.0, 0.0,\n      halfWidth, halfHeight, -halfBreadth, 1.0, 1.0,\n      -halfWidth, -halfHeight, -halfBreadth, 0.0, 0.0,\n      -halfWidth, halfHeight, -halfBreadth, 1.0, 1.0,\n\n      halfWidth, -halfHeight, halfBreadth, 0.0, 0.0,\n      halfWidth, halfHeight, halfBreadth, 1.0, 1.0,\n      -halfWidth, -halfHeight, halfBreadth, 0.0, 0.0,\n      -halfWidth, halfHeight, halfBreadth, 1.0, 1.0,\n\n      halfWidth, halfHeight, halfBreadth, 1.0, 1.0,\n      halfWidth, halfHeight, -halfBreadth, 0.0, 0.0,\n      -halfWidth, halfHeight, -halfBreadth, 0.0, 0.0,\n      -halfWidth, halfHeight, halfBreadth, 1.0, 1.0,\n\n      halfWidth, -halfHeight, halfBreadth, 0.0, 0.0,\n      halfWidth, -halfHeight, -halfBreadth, 1.0, 1.0,\n      -halfWidth, -halfHeight, -halfBreadth, 0.0, 0.0,\n      -halfWidth, -halfHeight, halfBreadth, 1.0, 1.0,\n\n      halfWidth, halfHeight, -halfBreadth, 0.0, 0.0,\n      halfWidth, halfHeight, halfBreadth, 1.0, 1.0,\n      halfWidth, -halfHeight, -halfBreadth, 0.0, 0.0,\n      halfWidth, -halfHeight, halfBreadth, 1.0, 1.0,\n\n      -halfWidth, halfHeight, -halfBreadth, 0.0, 0.0,\n      -halfWidth, halfHeight, halfBreadth, 1.0, 1.0,\n      -halfWidth, -halfHeight, -halfBreadth, 0.0, 0.0,\n      -halfWidth, -halfHeight, halfBreadth, 1.0, 1.0\n    ]\n\n    const indices = [\n      1, 2, 3, 2, 1, 0, // BACKWARD\n      4, 5, 6, 7, 6, 5, // FORWARD\n      8, 9, 10, 10, 11, 8, // TOP\n      12, 15, 14, 14, 13, 12, // BOTTOM\n      16, 17, 18, 19, 18, 17, // LEFT\n      21, 22, 23, 22, 21, 20 // RIGHT\n    ]\n\n    const legData = this.generateLegVertices(\n      legHeight, legWidth, legBreadth,\n      halfHeight, halfWidth, halfBreadth,\n      vertices.length / 5\n    )\n\n    return {\n      vertices: [...vertices, ...legData.vertices],\n      indices: [...indices, ...legData.indices]\n    }\n  }\n\n  draw () {\n    const { gl } = this\n    const width = this.width || 1\n    const breadth = this.breadth || 1\n    const height = this.height || 1\n    const legHeight = this.legHeight || 3\n    const legBreadh = this.legBreadh || 0.5\n    const legWidth = this.legWidth || 0.5\n    const { vertices, indices } = this.generateVertices(legHeight, legWidth, legBreadh, height, width, breadth)\n    this._createBuffer(vertices)\n    this._createElementBuffer(indices)\n\n    gl.vertexAttribPointer(\n      this.attribLocations.vertPosition,\n      3,\n      gl.FLOAT,\n      gl.FALSE,\n      5 * Float32Array.BYTES_PER_ELEMENT,\n      0\n    )\n    gl.vertexAttribPointer(\n      this.attribLocations.texCoord,\n      2,\n      gl.FLOAT,\n      gl.FALSE,\n      5 * Float32Array.BYTES_PER_ELEMENT,\n      3 * Float32Array.BYTES_PER_ELEMENT\n    )\n    gl.enableVertexAttribArray(this.attribLocations.vertPosition)\n    gl.enableVertexAttribArray(this.attribLocations.texCoord)\n    gl.bindTexture(gl.TEXTURE_2D, this.texture.location)\n    gl.activeTexture(gl.TEXTURE0)\n    gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_SHORT, 0)\n  }\n}\n\nexport default Table\n","import GameObject from '../../core/GameObject'\nimport VertexShader from '../../core/shaders/VertexShader'\nimport FragmentShader from '../../core/shaders/FragmentShader'\nimport vertexShaderSrc from './shader.vert'\nimport fragmentShaderSrc from './shader.frag'\nimport TableModel from '../../models/Table'\n\nclass Table extends GameObject {\n  initialize (height, width, breadth, legHeight, legWidth, legBreadth) {\n    const vertexShader = new VertexShader(this.context, vertexShaderSrc)\n    const fragmentShader = new FragmentShader(this.context, fragmentShaderSrc)\n    const model = new TableModel(this.context)\n    model.initialize(vertexShader, fragmentShader)\n    model.initializeProperties(height, width, breadth, legHeight, legWidth, legBreadth)\n    this._setModel(model)\n  }\n\n  setTexture (textureImage) {\n    this.__model.setTexture(textureImage)\n  }\n}\n\nexport default Table\n","const template = document.createElement('template')\n\ntemplate.innerHTML = `\n<style>\n  :host {\n    display: block;\n    overflow: hidden;\n  }\n\n  h1 {\n    color: #3388FF;\n    text-align: center;\n    margin: 0;\n    user-select: none;\n    transition: 1s all;\n    opacity: 0;\n    font-size: 2rem;\n    transform: scale(1);\n    font-weight: normal;\n    background: #FFFFFF;\n    padding: 1rem 0;\n  }\n\n  h1.active {\n    opacity: 100;\n    transform: scale(1.5);\n  }\n\n</style>\n<h1>\n  It's <span id='result'> </span>!!\n</h1>\n`\n\nclass ResultMessage extends window.HTMLElement {\n  static get observedAttributes () {\n    return ['result']\n  }\n\n  constructor () {\n    super()\n    this._shadowRoot = this.attachShadow({ mode: 'open' })\n    this._shadowRoot.appendChild(template.content.cloneNode(true))\n    this.$root = this._shadowRoot.querySelector('h1')\n    this.$result = this._shadowRoot.querySelector('#result')\n  }\n\n  connectedCallback () {\n    this._render()\n  }\n\n  attributeChangedCallback (name, oldValue, newValue) {\n    switch (name) {\n      case 'result':\n        this._result = newValue\n    }\n    this._render()\n  }\n\n  get result () {\n    return this.getAttribute('result')\n  }\n\n  set result (value) {\n    this.setAttribute('result', value)\n  }\n\n  get resultText () {\n    switch (this._result) {\n      case 'heads': return 'Heads'\n      case 'tails': return 'Tails'\n      default: return 'Unknown'\n    }\n  }\n\n  _render () {\n    if (this._result) {\n      this.$result.innerText = this.resultText\n      this.$root.classList.add('active')\n    } else {\n      this.$root.classList.remove('active')\n    }\n  }\n}\n\nwindow.customElements.define('result-message', ResultMessage)\nexport default ResultMessage\n","const template = document.createElement('template')\n\ntemplate.innerHTML = `\n<style>\n  :host {\n    display: block;\n    overflow: hidden;\n  }\n\n  h1 {\n    color: #335599;\n    text-align: center;\n    user-select: none;\n    width: auto;\n    font-size: 2rem;\n    animation: pulsate 0.6s infinite alternate;\n    font-weight: normal;\n    margin: 0;\n  }\n\n  h2 {\n    color: #666666;\n    text-align: center;\n    user-select: none;\n    width: auto;\n    font-size: 1.3rem;\n    font-weight: normal;\n    margin: 0.5rem 0 0 0;\n  }\n\n  .question {\n    position: absolute;\n    animation: slide-down 1s 1;\n    animation-fill-mode: both;\n  }\n\n  @keyframes slide-down {\n    from {transform: scale(1.5) rotateY(360deg);}\n    to {left: scale(1) rotateY(0)}\n  }\n\n  @keyframes pulsate {\n    from {transform: scale(1)}\n    to {transform: scale(1.05)}\n  }\n</style>\n<h1>\n  Heads or Tails<span class='question'>?</span>\n</h1>\n<h2>\n  Click to flip!\n</h2>\n`\n\nclass ClickPrompt extends window.HTMLElement {\n  constructor () {\n    super()\n    this._shadowRoot = this.attachShadow({ mode: 'open' })\n    this._shadowRoot.appendChild(template.content.cloneNode(true))\n  }\n}\n\nwindow.customElements.define('click-prompt', ClickPrompt)\nexport default ClickPrompt\n","const template = document.createElement('template')\n\n// Source: https://iconmonstr.com/arrow-19-svg/\nconst arrowSvg = `\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n    <path d=\"M12.068.016l-3.717 3.698 5.263 5.286h-13.614v6h13.614l-5.295 5.317 3.718 3.699 11.963-12.016z\"/>\n  </svg>\n`\n// Source: https://iconmonstr.com/mouse-4-svg/\nconst mouseSvg = `\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n    <path d=\"M16 2c1.103 0 2 .897 2 2v12c0 3.309-2.691 6-6 6s-6-2.691-6-6v-12c0-1.103.897-2 2-2h8zm4 2c0-2.209-1.791-4-4-4h-8c-2.209 0-4 1.791-4 4v12c0 4.418 3.582 8 8 8s8-3.582 8-8v-12zm-7 1c0-.552-.447-1-1-1s-1 .448-1 1v4c0 .552.447 1 1 1s1-.448 1-1v-4z\"/>\n  </svg>\n`\n\ntemplate.innerHTML = `\n  <style>\n    .camera-text { color: #335599; font-weight: bold; padding: 0 0.5rem; }\n    .controls-container { opacity: 0.7; padding: 0.5rem; display: flex; }\n    .control-row { text-align: center; padding: 0.1rem 0; }\n    .arrow { display: inline-block; padding: 0.3rem; background: #335599; border-radius: 0.2rem; }\n    .arrow > svg { fill: #FFFFFF; width: 0.8rem; height: 0.8rem;}\n    .right { transform: rotate(0deg); }\n    .left { transform: rotate(180deg); }\n    .up { transform: rotate(270deg); }\n    .down { transform: rotate(90deg); }\n    .mouse { padding: 0 0.5rem; transform: rotate(-10deg); }\n    .mouse > svg { width: 3rem; height: 3.3rem; fill: #335599; }\n  </style>\n  <div class=\"control-info-container\">\n    <div class=\"controls-container\">\n        <div>\n        <div class=\"control-row\">\n            <div class=\"arrow up\">\n            ${arrowSvg}\n            </div>\n        </div>\n        <div class=\"control-row\">\n            <div class=\"arrow left\">\n                ${arrowSvg}\n            </div>\n            <div class=\"arrow down\">\n                ${arrowSvg}\n            </div>\n            <div class=\"arrow right\">\n                ${arrowSvg}\n            </div>\n        </div>\n        </div>\n        <div>\n        <div class=\"mouse\">\n            ${mouseSvg}\n        </div>\n        </div>\n    </div>\n    <div class=\"camera-text\" > Camera Controls </div>\n  </div>\n`\n\nclass ControlInfo extends window.HTMLElement {\n  constructor () {\n    super()\n    this._shadowRoot = this.attachShadow({ mode: 'open' })\n    this._shadowRoot.appendChild(template.content.cloneNode(true))\n  }\n}\n\nwindow.customElements.define('control-info', ControlInfo)\nexport default ControlInfo\n","const template = document.createElement('template')\n\ntemplate.innerHTML = `\n<style>\n  #loader-root {\n    right: 5%;\n    position: absolute;\n    bottom: 50%;\n    transform: translateY(50%);\n    user-select: none;\n  }\n\n  #loading-text {\n    font-size: 2rem;\n    color: #33AA11;\n    display: inline-block;\n    position: relative;\n    padding-left: 1rem;\n    transform: translateY(-50%);\n  }\n\n  #coin {\n    width: 4rem;\n    height: 4rem;\n    border-radius: 50%;\n    background: #99CC33;\n    animation: spin 1.5s linear infinite;\n    display: inline-block;\n  }\n\n  @keyframes spin {\n    from { transform: rotateY(0deg); }\n    to { transform: rotateY(360deg); }\n  }\n</style>\n<div id='loader-root'>\n  <div id='coin'></div>\n  <div id='loading-text'> LOADING </div>\n</div>\n`\n\nclass GameLoader extends window.HTMLElement {\n  constructor () {\n    super()\n    this._shadowRoot = this.attachShadow({ mode: 'open' })\n    this._shadowRoot.appendChild(template.content.cloneNode(true))\n  }\n}\n\nwindow.customElements.define('game-loader', GameLoader)\nexport default GameLoader\n","import './components/ResultMessage'\nimport './components/ClickPrompt'\nimport './components/ControlInfo'\nimport './components/GameLoader'\nimport './style.css'\n\nclass UI {\n  constructor () {\n    this.__initialize()\n    this.__sizeOverlay = this.__sizeOverlay.bind(this)\n    this.resetResultMessage = this.resetResultMessage.bind(this)\n    window.addEventListener('resize', this.__sizeOverlay)\n    this.__sizeOverlay()\n  }\n\n  __initialize () {\n    const overlay = document.createElement('div')\n    overlay.id = 'overlay'\n    document.body.appendChild(overlay)\n    this.__overlay = overlay\n  }\n\n  __sizeOverlay () {\n    const overlay = this.__overlay\n    overlay.style.width = window.innerWidth\n    overlay.style.height = window.innerHeight\n  }\n\n  showHUD () {\n    const overlay = this.__overlay\n    overlay.innerHTML = ''\n    const message = document.createElement('result-message')\n    const clickPrompt = document.createElement('click-prompt')\n    overlay.appendChild(clickPrompt)\n    overlay.appendChild(message)\n    this.__message = message\n    this.__clickPrompt = clickPrompt\n    this.showControlInfo()\n  }\n\n  showClickPrompt (show = true) {\n    if (show) {\n      this.__clickPrompt.classList.remove('hidden')\n    } else {\n      this.__clickPrompt.classList.add('hidden')\n    }\n  }\n\n  resetResultMessage () {\n    this.__message.result = ''\n    this.showClickPrompt(true)\n  }\n\n  displayResultMessage (result) {\n    this.__message.result = result\n    this.showClickPrompt(false)\n    if (this.__messageTimeout) window.clearTimeout(this.__messageTimeout)\n    this.__messageTimeout = window.setTimeout(this.resetResultMessage, 2000)\n  }\n\n  showControlInfo () {\n    const controlInfo = document.createElement('control-info')\n    this.__overlay.appendChild(controlInfo)\n  }\n\n  showLoader () {\n    this.__overlay.innerHTML = ''\n    const loader = document.createElement('game-loader')\n    this.__overlay.appendChild(loader)\n  }\n\n  destroy () {\n    window.removeEventListener('resize', this.__sizeOverlay)\n  }\n}\n\nexport default UI\n","import ControlScript from '../../core/ControlScript'\n\nclass ControlCamera extends ControlScript {\n  constructor (center, startRadius = 3, startAngleHorz = Math.PI / 2) {\n    super()\n    this.__center = center\n    this.__radius = startRadius\n    this.__angleHorz = startAngleHorz\n  }\n\n  update (gameObject, context) {\n    const mouse = context.input.mouse\n    const keyboard = context.input.keyboard\n    const scroll = mouse.getScroll()\n    const delta = context.deltaTime / 1000\n    this.__radius = Math.max(1, this.__radius - (scroll.y * 0.05))\n    if (keyboard.isKeyPressed('ArrowLeft')) {\n      this.__angleHorz += 1 * delta\n    }\n\n    if (keyboard.isKeyPressed('ArrowRight')) {\n      this.__angleHorz -= 1 * delta\n    }\n\n    if (keyboard.isKeyPressed('ArrowUp')) {\n      gameObject.position.y += 3 * delta\n    }\n\n    if (keyboard.isKeyPressed('ArrowDown')) {\n      gameObject.position.y -= 3 * delta\n    }\n\n    gameObject.position.x = this.__center.x + this.__radius * Math.cos(this.__angleHorz)\n    gameObject.position.z = this.__center.z + this.__radius * Math.sin(this.__angleHorz)\n\n    gameObject.lookAt([this.__center.x, this.__center.y, this.__center.z])\n  }\n}\n\nexport default ControlCamera\n","import AppContext from './core/AppContext'\nimport Coin from './gameObjects/Coin'\nimport Scene from './core/Scene'\nimport Camera from './core/Camera'\nimport Texture from './core/Texture'\nimport ControlCoin from './scripts/ControlCoin'\nimport Table from './gameObjects/Table'\nimport UI from './UI'\nimport ControlCamera from './scripts/ControlCamera'\n\nfunction main () {\n  const context = setupContext()\n  context.ui.showLoader()\n  return loadResources(context)\n    .then(resources => prepareGame(context, resources))\n    .then(scene => {\n      context.ui.showHUD()\n      gameLoop(scene)\n    })\n}\n\nfunction setupContext () {\n  const ui = new UI()\n  const canvas = document.getElementById('screen')\n  canvas.width = window.innerWidth\n  canvas.height = window.innerHeight\n\n  const context = new AppContext(canvas)\n  context.ui = ui\n  return context\n}\n\nfunction loadResources (context) {\n  return loadTextures(context)\n    .then(textures => ({ textures }))\n\n  function loadTextures (context) {\n    const tableTexture = new Texture(context)\n    const coinTexture = new Texture(context)\n    return Promise.all([\n      tableTexture.loadImage('textures/wood.jpg', 3),\n      coinTexture.loadImage('textures/2rscoin.jpg', 3)\n    ]).then(() => {\n      return {\n        table: tableTexture,\n        coin: coinTexture\n      }\n    })\n  }\n}\n\nfunction prepareGame (context, resources) {\n  const { textures } = resources\n  const scene = setupScene(context)\n  const coin = createCoin(context, textures.coin)\n  const table = createTable(context, textures.table)\n  scene.camera.addControlScript('controlCamera', new ControlCamera(coin.position))\n  scene.addGameObject(table)\n  scene.addGameObject(coin)\n  return scene\n}\n\nfunction gameLoop (scene) {\n  const loop = function () {\n    scene.update()\n    scene.draw()\n    window.requestAnimationFrame(loop)\n  }\n\n  loop()\n}\n\nfunction setupScene (context) {\n  const scene = new Scene(context)\n  scene.setClearColor([0.75, 0.85, 0.8, 1.0])\n  const camera = new Camera(context)\n  scene.setCamera(camera)\n  camera.setPosition([0, 5, 0])\n  return scene\n}\n\nfunction createTable (context, texture) {\n  const table = new Table(context)\n  table.initialize(0.5, 10, 7, 3, 0.5, 0.5)\n  table.setTexture(texture)\n  table.position.y = -0.32\n  return table\n}\n\nfunction createCoin (context, texture) {\n  const { ui } = context\n  const coin = new Coin(context)\n  const flipScript = new ControlCoin()\n  flipScript.onFlipStart(() => {\n    ui.showClickPrompt(false)\n  })\n  flipScript.onFlipEnd(({ heads }) => {\n    if (heads) {\n      ui.displayResultMessage('heads')\n    } else {\n      ui.displayResultMessage('tails')\n    }\n  })\n  coin.addControlScript('controlCoin', flipScript)\n  coin.initialize(0.7, 0.1, 50)\n  coin.setTexture(texture)\n  return coin\n}\n\nwindow.onload = main\n"]}